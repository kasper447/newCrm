[{"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\App.js":"2","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\serviceWorker.js":"3","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Context\\AttendanceContext\\AttendanceContextProvider.jsx":"4","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\history.js":"5","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Login\\Login.jsx":"6","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\DashboardAdmin.jsx":"7","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\ForgotPass\\ForgetPass.jsx":"8","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\DashboardHR.jsx":"9","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\DashboardEmployee.jsx":"10","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\ManagerDashboard.jsx":"11","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Routes.jsx":"12","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\DashContainer.jsx":"13","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\Sidebar.jsx":"14","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Sidebar.jsx":"15","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Router.jsx":"16","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\Router.jsx":"17","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Context\\AttendanceContext\\AttendanceContext.js":"18","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Sidebar\\Sidebar.jsx":"19","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Navbar\\NavBar.jsx":"20","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\sidebar\\Sidebar.jsx":"21","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\router\\Routes.jsx":"22","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminPortal.jsx":"23","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\InnerDashContainer.jsx":"24","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminProjectBid.jsx":"25","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\LeaveApplicationHR.jsx":"26","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\Role.jsx":"27","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Dashboard\\AdminDash.jsx":"28","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\Position.jsx":"29","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\Department.jsx":"30","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Salary\\Salary.jsx":"31","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\AddEmployee\\Employee.jsx":"32","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\AddEmployee\\EmployeeTable.jsx":"33","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\TaskManagement\\AdminAsignTask.jsx":"34","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\TaskManagement\\AdminTaskStatus.jsx":"35","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\TaskManagement\\AdminCancleTask.jsx":"36","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\TaskManagement\\AdminCompleteTask.jsx":"37","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\PageNot\\NotFound404.jsx":"38","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\TaskManagement\\RejectedTask.jsx":"39","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\attendance\\Attendance.jsx":"40","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\TaskManagement\\AdminAssignedTask.jsx":"41","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\LeaveCalendar\\LeaveCalendar.jsx":"42","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\attendance\\ViewAttendance.jsx":"43","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\Country.jsx":"44","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\State.jsx":"45","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Company\\Company.jsx":"46","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\City.jsx":"47","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\ApplyLeave\\LeaveApplication.jsx":"48","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\LeaveStatus\\LeaveApplicationHRReject.jsx":"49","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\LeaveStatus\\LeaveApplicationHRAccept.jsx":"50","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Dashboard\\ManagerDash.jsx":"51","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\attendance\\ViewAttendance.jsx":"52","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\attendance\\TodaysAttendance.jsx":"53","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\ManagerTaskManagement\\ManagerNewTask.jsx":"54","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\ManagerTaskManagement\\ManagerCencelledTask.jsx":"55","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\ManagerTaskManagement\\ManagerCompletedTask.jsx":"56","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\ManagerTaskManagement\\ManagerRejectedTask.jsx":"57","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\ManagerTaskManagement\\ManagerActiveTask.jsx":"58","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\attendance\\Attendance.jsx":"59","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\Dashboard\\EmpDash.jsx":"60","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\attendance\\SelfAttendance.jsx":"61","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\Dashboard\\CountData\\UpcomingBirthdays.jsx":"62","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\Dashboard\\EmpChart.jsx\\DepartmentChart.jsx":"63","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\attendance\\Attendance.jsx":"64","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\attendance\\AttendanceList.jsx":"65","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmployeeTaskManagement\\EmployeeCompleteTask.jsx":"66","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmployeeTaskManagement\\EmployeeRejectTask.jsx":"67","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmployeeTaskManagement\\EmployeeActiveTask.jsx":"68","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmployeeTaskManagement\\EmployeeNewTask.jsx":"69","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpLeave\\LeaveApplicationEmp.jsx":"70","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpWorkExp\\WorkExperience.jsx":"71","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpFamily\\FamilyInfo.jsx":"72","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpEducation\\Education.jsx":"73","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpPresonal\\PersonalInfo.jsx":"74","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\attendance\\Attendance.jsx":"75","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminPortalFormEdit.jsx":"76","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminPortalForm.jsx":"77","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminProjectBidFormEdit.jsx":"78","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminPortalTable.jsx":"79","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\ManagerTaskManagement\\ManagerRejectedTask.jsx":"80","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\ManagerTaskManagement\\ManagerCompletedTask.jsx":"81","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\ManagerTaskManagement\\ManagerActiveTask.jsx":"82","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\ManagerTaskManagement\\ManagerCencelledTask.jsx":"83","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\ManagerTaskManagement\\ManagerNewTask.jsx":"84","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\Dashboard\\HRDash.jsx":"85","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\ApplyLeave\\LeaveApplicationFormEdit.jsx":"86","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\ApplyLeave\\LeaveApplicationForm.jsx":"87","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\ApplyLeave\\LeaveApplicationTable.jsx":"88","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\CityFormEdit.jsx":"89","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\CityForm.jsx":"90","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\CityTable.jsx":"91","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpLeave\\LeaveApplicationEmpForm.jsx":"92","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpLeave\\LeaveApplicationEmpTable.jsx":"93","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpLeave\\LeaveApplicationEmpFormEdit.jsx":"94","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpPresonal\\PersonalInfoFormEdit.jsx":"95","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpPresonal\\PersonalInfoTable.jsx":"96","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpEducation\\EducationFormEdit.jsx":"97","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\attendance\\SelfAttendance.jsx":"98","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\attendance\\TodaysAttendance.jsx":"99","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\LeaveCalendar\\HolidayList.jsx":"100","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\AddEmployee\\UpcomingBirthdays.jsx":"101","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Dashboard\\Chart\\DepartmentChart.jsx":"102","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Dashboard\\Chart\\TaskChart.jsx":"103","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Dashboard\\CountData\\EmployeeCount.jsx":"104","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Dashboard\\CountData\\LeavesCount.jsx":"105","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\attendance\\SelfAttendance.jsx":"106","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpEducation\\EducationForm.jsx":"107","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpEducation\\EducationTable.jsx":"108","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Chart\\TaskChart.jsx":"109","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Chart\\DepartmentChart.jsx":"110","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\Dashboard\\CountData\\LeavesCount.jsx":"111","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\Dashboard\\CountData\\EmployeeCount.jsx":"112","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpFamily\\FamilyInfoForm.jsx":"113","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpFamily\\FamilyInfoFormEdit.jsx":"114","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpFamily\\FamilyInfoTable.jsx":"115","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpWorkExp\\WorkExperienceFormEdit.jsx":"116","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpWorkExp\\WorkExperienceForm.jsx":"117","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpWorkExp\\WorkExperienceTable.jsx":"118","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Company\\CompanyFormEdit.jsx":"119","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Company\\CompanyForm.jsx":"120","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Company\\CompanyTable.jsx":"121","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\StateFormEdit.jsx":"122","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\StateForm.jsx":"123","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\StateTable.jsx":"124","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\CountryFormEdit.jsx":"125","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\CountryForm.jsx":"126","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\CountryTable.jsx":"127","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\AddEmployee\\EmployeeFormEdit.jsx":"128","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\AddEmployee\\EmployeeInfo.jsx":"129","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\AddEmployee\\EmployeeForm.jsx":"130","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Salary\\SalaryFormEdit.jsx":"131","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Salary\\SalaryForm.jsx":"132","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Salary\\SalaryTable.jsx":"133","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\DepartmentFormEdit.jsx":"134","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\DepartmentForm.jsx":"135","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\DepartmentTable.jsx":"136","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\PositionFormEdit.jsx":"137","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\PositionForm.jsx":"138","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\PositionTable.jsx":"139","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\Dashboard\\CountData\\EmpTaskCount.jsx":"140","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\RoleFormEdit.jsx":"141","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\RoleForm.jsx":"142","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\Dashboard\\EmpChart.jsx\\EmpTaskChart.jsx":"143","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\RoleTable.jsx":"144","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\LeaveApplicationHRTable.jsx":"145","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\LeaveApplicationHRFormEdit.jsx":"146","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminProjectBidForm.jsx":"147","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminProjectBidTable.jsx":"148","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\LeaveCalendar\\Container.jsx":"149","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\attendance\\SelfAttendance.jsx":"150","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Dashboard\\CountData\\LeavesCount.jsx":"151","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Dashboard\\CountData\\EmployeeCount.jsx":"152","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Dashboard\\Chart\\TaskChart.jsx":"153","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\LeaveApplicationHR.jsx":"154","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\LeaveApplicationHRTable.jsx":"155","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\LeaveApplicationHRFormEdit.jsx":"156","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Notification\\Notification.jsx":"157","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\Notification\\Notification.jsx":"158","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\Notification\\Notification.jsx":"159","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Notification\\Notification.jsx":"160","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\Notification\\NoticeBoard.jsx":"161","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\Notification\\NoticeBoard.jsx":"162","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Notification\\NoticeBoard.jsx":"163","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Notification\\NoticeBoard.jsx":"164","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Notification\\NoticeManagement.jsx":"165","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Chat.jsx":"166"},{"size":1812,"mtime":1709553326000,"results":"167","hashOfConfig":"168"},{"size":13619,"mtime":1709193208000,"results":"169","hashOfConfig":"168"},{"size":4951,"mtime":1704783088000,"results":"170","hashOfConfig":"168"},{"size":898,"mtime":1710225915469,"results":"171","hashOfConfig":"168"},{"size":87,"mtime":1704783088000,"results":"172","hashOfConfig":"168"},{"size":4811,"mtime":1709274462000,"results":"173","hashOfConfig":"168"},{"size":1877,"mtime":1709272596000,"results":"174","hashOfConfig":"168"},{"size":7010,"mtime":1709193164000,"results":"175","hashOfConfig":"168"},{"size":1476,"mtime":1709273088000,"results":"176","hashOfConfig":"168"},{"size":13493,"mtime":1710311262966,"results":"177","hashOfConfig":"168"},{"size":1391,"mtime":1709273278000,"results":"178","hashOfConfig":"168"},{"size":4967,"mtime":1710410365786,"results":"179","hashOfConfig":"168"},{"size":341,"mtime":1709877718000,"results":"180","hashOfConfig":"168"},{"size":14828,"mtime":1710309718253,"results":"181","hashOfConfig":"168"},{"size":6873,"mtime":1710309309509,"results":"182","hashOfConfig":"168"},{"size":4107,"mtime":1710315389307,"results":"183","hashOfConfig":"168"},{"size":4482,"mtime":1710315482092,"results":"184","hashOfConfig":"168"},{"size":97,"mtime":1706769584000,"results":"185","hashOfConfig":"168"},{"size":18631,"mtime":1709181488000,"results":"186","hashOfConfig":"168"},{"size":10574,"mtime":1710313128177,"results":"187","hashOfConfig":"168"},{"size":5822,"mtime":1709531386000,"results":"188","hashOfConfig":"168"},{"size":3897,"mtime":1710315631157,"results":"189","hashOfConfig":"168"},{"size":4375,"mtime":1709272300000,"results":"190","hashOfConfig":"168"},{"size":343,"mtime":1709794672000,"results":"191","hashOfConfig":"168"},{"size":4809,"mtime":1709272438000,"results":"192","hashOfConfig":"168"},{"size":4122,"mtime":1710310010191,"results":"193","hashOfConfig":"168"},{"size":3819,"mtime":1709274192000,"results":"194","hashOfConfig":"168"},{"size":1389,"mtime":1710316173869,"results":"195","hashOfConfig":"168"},{"size":3602,"mtime":1709274142000,"results":"196","hashOfConfig":"168"},{"size":3812,"mtime":1709274072000,"results":"197","hashOfConfig":"168"},{"size":3856,"mtime":1709274534000,"results":"198","hashOfConfig":"168"},{"size":10413,"mtime":1710159937932,"results":"199","hashOfConfig":"168"},{"size":38609,"mtime":1709273592000,"results":"200","hashOfConfig":"168"},{"size":27758,"mtime":1710230474549,"results":"201","hashOfConfig":"168"},{"size":16947,"mtime":1709186402000,"results":"202","hashOfConfig":"168"},{"size":7621,"mtime":1709105416000,"results":"203","hashOfConfig":"168"},{"size":6289,"mtime":1708495578000,"results":"204","hashOfConfig":"168"},{"size":365,"mtime":1704783088000,"results":"205","hashOfConfig":"168"},{"size":6311,"mtime":1708495594000,"results":"206","hashOfConfig":"168"},{"size":8534,"mtime":1708691556000,"results":"207","hashOfConfig":"168"},{"size":16425,"mtime":1709185296000,"results":"208","hashOfConfig":"168"},{"size":6543,"mtime":1709195912000,"results":"209","hashOfConfig":"168"},{"size":16741,"mtime":1709181236000,"results":"210","hashOfConfig":"168"},{"size":3615,"mtime":1709274322000,"results":"211","hashOfConfig":"168"},{"size":3538,"mtime":1709274380000,"results":"212","hashOfConfig":"168"},{"size":3700,"mtime":1709199976000,"results":"213","hashOfConfig":"168"},{"size":2597,"mtime":1709274266000,"results":"214","hashOfConfig":"168"},{"size":3501,"mtime":1709273702000,"results":"215","hashOfConfig":"168"},{"size":11851,"mtime":1708497774000,"results":"216","hashOfConfig":"168"},{"size":11851,"mtime":1708497796000,"results":"217","hashOfConfig":"168"},{"size":3447,"mtime":1710316280419,"results":"218","hashOfConfig":"168"},{"size":16747,"mtime":1709181224000,"results":"219","hashOfConfig":"168"},{"size":11761,"mtime":1709897826000,"results":"220","hashOfConfig":"168"},{"size":13096,"mtime":1710235764945,"results":"221","hashOfConfig":"168"},{"size":7625,"mtime":1709113470000,"results":"222","hashOfConfig":"168"},{"size":6449,"mtime":1709113950000,"results":"223","hashOfConfig":"168"},{"size":6147,"mtime":1709114954000,"results":"224","hashOfConfig":"168"},{"size":53393,"mtime":1710236297069,"results":"225","hashOfConfig":"168"},{"size":15421,"mtime":1708691472000,"results":"226","hashOfConfig":"168"},{"size":1779,"mtime":1710316092355,"results":"227","hashOfConfig":"168"},{"size":15260,"mtime":1709803892000,"results":"228","hashOfConfig":"168"},{"size":7088,"mtime":1710140287811,"results":"229","hashOfConfig":"168"},{"size":9490,"mtime":1709809028000,"results":"230","hashOfConfig":"168"},{"size":7497,"mtime":1709035932000,"results":"231","hashOfConfig":"168"},{"size":15240,"mtime":1709369604000,"results":"232","hashOfConfig":"168"},{"size":6721,"mtime":1709616406000,"results":"233","hashOfConfig":"168"},{"size":6434,"mtime":1709616614000,"results":"234","hashOfConfig":"168"},{"size":37770,"mtime":1709616038000,"results":"235","hashOfConfig":"168"},{"size":39895,"mtime":1710239569941,"results":"236","hashOfConfig":"168"},{"size":8701,"mtime":1710310229547,"results":"237","hashOfConfig":"168"},{"size":7187,"mtime":1709272920000,"results":"238","hashOfConfig":"168"},{"size":6987,"mtime":1709208688000,"results":"239","hashOfConfig":"168"},{"size":2670,"mtime":1709724464000,"results":"240","hashOfConfig":"168"},{"size":5564,"mtime":1709272860000,"results":"241","hashOfConfig":"168"},{"size":22061,"mtime":1708691128000,"results":"242","hashOfConfig":"168"},{"size":2361,"mtime":1704783090000,"results":"243","hashOfConfig":"168"},{"size":2323,"mtime":1709272320000,"results":"244","hashOfConfig":"168"},{"size":8992,"mtime":1709272480000,"results":"245","hashOfConfig":"168"},{"size":4574,"mtime":1709272414000,"results":"246","hashOfConfig":"168"},{"size":6137,"mtime":1709113530000,"results":"247","hashOfConfig":"168"},{"size":6406,"mtime":1709113520000,"results":"248","hashOfConfig":"168"},{"size":51948,"mtime":1709187140000,"results":"249","hashOfConfig":"168"},{"size":7633,"mtime":1709113514000,"results":"250","hashOfConfig":"168"},{"size":25432,"mtime":1710229451547,"results":"251","hashOfConfig":"168"},{"size":14472,"mtime":1710315986963,"results":"252","hashOfConfig":"168"},{"size":4412,"mtime":1709273840000,"results":"253","hashOfConfig":"168"},{"size":3746,"mtime":1709273802000,"results":"254","hashOfConfig":"168"},{"size":4980,"mtime":1708431534000,"results":"255","hashOfConfig":"168"},{"size":4667,"mtime":1709274298000,"results":"256","hashOfConfig":"168"},{"size":3931,"mtime":1709274276000,"results":"257","hashOfConfig":"168"},{"size":5102,"mtime":1709274308000,"results":"258","hashOfConfig":"168"},{"size":9237,"mtime":1710219824442,"results":"259","hashOfConfig":"168"},{"size":4964,"mtime":1710220496410,"results":"260","hashOfConfig":"168"},{"size":10136,"mtime":1707823924000,"results":"261","hashOfConfig":"168"},{"size":15041,"mtime":1709875664000,"results":"262","hashOfConfig":"168"},{"size":31236,"mtime":1709874710000,"results":"263","hashOfConfig":"168"},{"size":7758,"mtime":1707816864000,"results":"264","hashOfConfig":"168"},{"size":16768,"mtime":1709054064000,"results":"265","hashOfConfig":"168"},{"size":8952,"mtime":1708085514000,"results":"266","hashOfConfig":"168"},{"size":4248,"mtime":1709722066000,"results":"267","hashOfConfig":"168"},{"size":7058,"mtime":1709876870000,"results":"268","hashOfConfig":"168"},{"size":2577,"mtime":1709271334000,"results":"269","hashOfConfig":"168"},{"size":5750,"mtime":1709353544000,"results":"270","hashOfConfig":"168"},{"size":12796,"mtime":1708584688000,"results":"271","hashOfConfig":"168"},{"size":11379,"mtime":1709275580000,"results":"272","hashOfConfig":"168"},{"size":16800,"mtime":1709726774000,"results":"273","hashOfConfig":"168"},{"size":4836,"mtime":1709272690000,"results":"274","hashOfConfig":"168"},{"size":11936,"mtime":1709874014000,"results":"275","hashOfConfig":"168"},{"size":8948,"mtime":1709269302000,"results":"276","hashOfConfig":"168"},{"size":2578,"mtime":1709723096000,"results":"277","hashOfConfig":"168"},{"size":13224,"mtime":1708518390000,"results":"278","hashOfConfig":"168"},{"size":12796,"mtime":1708584688000,"results":"279","hashOfConfig":"168"},{"size":5079,"mtime":1709208696000,"results":"280","hashOfConfig":"168"},{"size":7533,"mtime":1707820784000,"results":"281","hashOfConfig":"168"},{"size":12964,"mtime":1709723754000,"results":"282","hashOfConfig":"168"},{"size":3801,"mtime":1704783090000,"results":"283","hashOfConfig":"168"},{"size":4541,"mtime":1709272932000,"results":"284","hashOfConfig":"168"},{"size":11440,"mtime":1709272962000,"results":"285","hashOfConfig":"168"},{"size":12224,"mtime":1709274040000,"results":"286","hashOfConfig":"168"},{"size":8649,"mtime":1709274026000,"results":"287","hashOfConfig":"168"},{"size":12969,"mtime":1709274054000,"results":"288","hashOfConfig":"168"},{"size":2994,"mtime":1704783088000,"results":"289","hashOfConfig":"168"},{"size":2493,"mtime":1709274408000,"results":"290","hashOfConfig":"168"},{"size":4844,"mtime":1709274412000,"results":"291","hashOfConfig":"168"},{"size":1908,"mtime":1709200388000,"results":"292","hashOfConfig":"168"},{"size":1607,"mtime":1709274338000,"results":"293","hashOfConfig":"168"},{"size":6622,"mtime":1709274362000,"results":"294","hashOfConfig":"168"},{"size":31328,"mtime":1709273512000,"results":"295","hashOfConfig":"168"},{"size":1934,"mtime":1709273540000,"results":"296","hashOfConfig":"168"},{"size":30433,"mtime":1710160326375,"results":"297","hashOfConfig":"168"},{"size":16434,"mtime":1707395506000,"results":"298","hashOfConfig":"168"},{"size":5186,"mtime":1707395548000,"results":"299","hashOfConfig":"168"},{"size":23246,"mtime":1709274554000,"results":"300","hashOfConfig":"168"},{"size":3427,"mtime":1709274098000,"results":"301","hashOfConfig":"168"},{"size":2758,"mtime":1709274082000,"results":"302","hashOfConfig":"168"},{"size":6673,"mtime":1709274122000,"results":"303","hashOfConfig":"168"},{"size":3568,"mtime":1709274172000,"results":"304","hashOfConfig":"168"},{"size":2675,"mtime":1709274152000,"results":"305","hashOfConfig":"168"},{"size":6945,"mtime":1709274182000,"results":"306","hashOfConfig":"168"},{"size":28306,"mtime":1710152487062,"results":"307","hashOfConfig":"168"},{"size":3107,"mtime":1704783088000,"results":"308","hashOfConfig":"168"},{"size":2484,"mtime":1709274204000,"results":"309","hashOfConfig":"168"},{"size":6485,"mtime":1709798014000,"results":"310","hashOfConfig":"168"},{"size":6678,"mtime":1709274218000,"results":"311","hashOfConfig":"168"},{"size":11930,"mtime":1710244858361,"results":"312","hashOfConfig":"168"},{"size":11740,"mtime":1706679044000,"results":"313","hashOfConfig":"168"},{"size":5707,"mtime":1709272462000,"results":"314","hashOfConfig":"168"},{"size":7844,"mtime":1709272584000,"results":"315","hashOfConfig":"168"},{"size":313,"mtime":1709195912000,"results":"316","hashOfConfig":"168"},{"size":16768,"mtime":1709053796000,"results":"317","hashOfConfig":"168"},{"size":13225,"mtime":1708593970000,"results":"318","hashOfConfig":"168"},{"size":12780,"mtime":1708588460000,"results":"319","hashOfConfig":"168"},{"size":9759,"mtime":1709105478000,"results":"320","hashOfConfig":"168"},{"size":4180,"mtime":1710309933435,"results":"321","hashOfConfig":"168"},{"size":11723,"mtime":1710245570126,"results":"322","hashOfConfig":"168"},{"size":11740,"mtime":1706679044000,"results":"323","hashOfConfig":"168"},{"size":6153,"mtime":1709720891594,"results":"324","hashOfConfig":"168"},{"size":6153,"mtime":1709720891594,"results":"325","hashOfConfig":"168"},{"size":6179,"mtime":1709728084359,"results":"326","hashOfConfig":"168"},{"size":6153,"mtime":1709720891594,"results":"327","hashOfConfig":"168"},{"size":2949,"mtime":1709879476223,"results":"328","hashOfConfig":"168"},{"size":2964,"mtime":1709879495452,"results":"329","hashOfConfig":"168"},{"size":3249,"mtime":1709879178260,"results":"330","hashOfConfig":"168"},{"size":3035,"mtime":1709879485973,"results":"331","hashOfConfig":"168"},{"size":2563,"mtime":1709878991469,"results":"332","hashOfConfig":"168"},{"size":3396,"mtime":1710738022554,"results":"333","hashOfConfig":"168"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},"17em0ug",{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"336"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"336"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"336"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"336"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"336"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"336"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"336"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"336"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"336"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"336"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"336"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"336"},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"336"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":2,"source":"414","usedDeprecatedRules":"336"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"336"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"336"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"336"},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"336"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"336"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"336"},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"336"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"336"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"445","messages":"446","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"447","messages":"448","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"336"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"336"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"336"},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"336"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"336"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"336"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"336"},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"336"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"336"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"336"},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"336"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"336"},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"336"},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"336"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"336"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"336"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"336"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"336"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"336"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"336"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"336"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"336"},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529","usedDeprecatedRules":"336"},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532","usedDeprecatedRules":"336"},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"336"},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"336"},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"336"},{"filePath":"544","messages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546","usedDeprecatedRules":"336"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"336"},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"336"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"555","usedDeprecatedRules":"336"},{"filePath":"556","messages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"558","usedDeprecatedRules":"336"},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561","usedDeprecatedRules":"336"},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"564","usedDeprecatedRules":"336"},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"336"},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"336"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"336"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"336"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"336"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"582","usedDeprecatedRules":"336"},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585","usedDeprecatedRules":"336"},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"336"},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"591","usedDeprecatedRules":"336"},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"594","messages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"336"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"601","usedDeprecatedRules":"336"},{"filePath":"602","messages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604","usedDeprecatedRules":"336"},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607","usedDeprecatedRules":"336"},{"filePath":"608","messages":"609","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610","usedDeprecatedRules":"336"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"613","usedDeprecatedRules":"336"},{"filePath":"614","messages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616","usedDeprecatedRules":"336"},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"336"},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"622","messages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"336"},{"filePath":"625","messages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"336"},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"336"},{"filePath":"631","messages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"633","usedDeprecatedRules":"336"},{"filePath":"634","messages":"635","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"613","usedDeprecatedRules":"336"},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"638","usedDeprecatedRules":"336"},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"641","usedDeprecatedRules":"336"},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"644","usedDeprecatedRules":"336"},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647","usedDeprecatedRules":"336"},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"336"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"653","usedDeprecatedRules":"336"},{"filePath":"654","messages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"656","usedDeprecatedRules":"336"},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"659","usedDeprecatedRules":"336"},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"336"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"336"},{"filePath":"666","messages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"668","messages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670","usedDeprecatedRules":"336"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"673","usedDeprecatedRules":"336"},{"filePath":"674","messages":"675","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"676","usedDeprecatedRules":"336"},{"filePath":"677","messages":"678","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"679","usedDeprecatedRules":"336"},{"filePath":"680","messages":"681","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"682","usedDeprecatedRules":"336"},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"685","usedDeprecatedRules":"336"},{"filePath":"686","messages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"690","messages":"691","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"692","messages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"694","messages":"695","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"696","usedDeprecatedRules":"336"},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"699","messages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"701","usedDeprecatedRules":"336"},{"filePath":"702","messages":"703","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"704","usedDeprecatedRules":"336"},{"filePath":"705","messages":"706","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"707","usedDeprecatedRules":"336"},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"710","usedDeprecatedRules":"336"},{"filePath":"711","messages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"713","usedDeprecatedRules":"336"},{"filePath":"714","messages":"715","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"716","usedDeprecatedRules":"336"},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721","usedDeprecatedRules":"336"},{"filePath":"722","messages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"724","usedDeprecatedRules":"336"},{"filePath":"725","messages":"726","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"336"},{"filePath":"728","messages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730","usedDeprecatedRules":"336"},{"filePath":"731","messages":"732","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"733","usedDeprecatedRules":"336"},{"filePath":"734","messages":"735","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"736","usedDeprecatedRules":"336"},{"filePath":"737","messages":"738","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"739","messages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"336"},{"filePath":"741","messages":"742","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"743","usedDeprecatedRules":"336"},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"746","usedDeprecatedRules":"336"},{"filePath":"747","messages":"748","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"749","usedDeprecatedRules":"336"},{"filePath":"750","messages":"751","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"752","usedDeprecatedRules":"336"},{"filePath":"753","messages":"754","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"755","usedDeprecatedRules":"336"},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730","usedDeprecatedRules":"336"},{"filePath":"758","messages":"759","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"760","usedDeprecatedRules":"336"},{"filePath":"761","messages":"762","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"760","usedDeprecatedRules":"336"},{"filePath":"763","messages":"764","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"765","usedDeprecatedRules":"336"},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"760","usedDeprecatedRules":"336"},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"770","usedDeprecatedRules":"336"},{"filePath":"771","messages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"773","usedDeprecatedRules":"336"},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"776","usedDeprecatedRules":"336"},{"filePath":"777","messages":"778","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"779","usedDeprecatedRules":"336"},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"782","usedDeprecatedRules":"336"},{"filePath":"783","messages":"784","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"785"},"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\index.js",[],["786","787"],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\App.js",["788","789","790","791","792","793","794","795","796","797"],"import React, { useState, useEffect } from \"react\";\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n  Routes\n} from \"react-router-dom\";\nimport axios from \"axios\";\nimport jwt from \"jsonwebtoken\";\nimport history from \"./history.js\";\n\nimport Login from \"./Pages/Login/Login.jsx\";\nimport DashboardAdmin from \"./Component/Admin/DashboardAdmin.jsx\";\nimport DashboardHR from \"./Component/HrManager/DashboardHR.jsx\";\nimport DashboardEmployee from \"./Component/Employee/DashboardEmployee.jsx\";\nimport ManagerDashboard from \"./Component/Manager/ManagerDashboard.jsx\";\nimport ForgetPass from \"./Pages/ForgotPass/ForgetPass.jsx\";\n\nconst App = () => {\n  const [userData, setUserData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [pass, setPass] = useState(true);\n  const [isLogin, setIsLogin] = useState(false);\n  const [firstTimeAlert, setFirstTimeAlert] = useState(true);\n  const [employees, setEmployees] = useState(null);\n  useEffect(() => {\n    setUserData({\n      _id: localStorage.getItem(\"_id\") || \"\",\n      Account: localStorage.getItem(\"Account\") || \"\",\n      Name: localStorage.getItem(\"Name\") || \"\",\n      Email: localStorage.getItem(\"Email\") || \"\"\n    });\n\n    setIsLogin(localStorage.getItem(\"isLogin\") === \"true\");\n\n    // temporary: for the user to see user id and pass of all accounts to explore all features of the app\n    if (firstTimeAlert && !isLogin) {\n      setFirstTimeAlert(false);\n    }\n  }, [firstTimeAlert, isLogin]);\n  const loadEmployeeData = (email, account) => {\n    console.log(email, account, localStorage.getItem(\"token\"));\n    axios\n      .get(\"http://localhost:4000/api/employee\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        // Ensure that response.data is an array\n        let related = response.data.filter((val) => {\n          return val.Account === account;\n        });\n        console.log(related);\n        setEmployees(related);\n        handleLogin(related, email);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    setPass(true);\n    setLoading(true);\n    login(event.target[0].value, event.target[1].value);\n    event.target.reset();\n  };\n  // const handleLogou = async () => {\n  //   let email = localStorage.getItem(\"Email\");\n  //   console.log(employees, email);\n  //   if (employees) {\n  //     let data = employees.filter((val) => {\n  //       return val.Email === email;\n  //     });\n  //     console.log(data);\n  //     let attencenceID = data[0].attendanceObjID;\n  //     let selectedEmployee = data[0]._id;\n  //     try {\n  //       if (!email) {\n  //         alert(\"Please select an employee\");\n  //         return;\n  //       }\n\n  //       const currentTime = new Date().toLocaleTimeString();\n  //       await axios.post(\n  //         `http://localhost:4000/api/attendance/${attencenceID}`,\n  //         {\n  //           employeeId: selectedEmployee,\n  //           year: new Date().getFullYear(),\n  //           month: new Date().getMonth() + 1,\n  //           date: new Date().getDate(),\n  //           logoutTime: [currentTime],\n  //           status: \"logout\"\n  //         }\n  //       );\n  //       alert(\"Logout time recorded successfully\");\n  //     } catch (error) {\n  //       console.error(\"Error recording logout time:\", error);\n  //       alert(\"Error recording logout time\");\n  //     }\n  //   }\n  // };\n\n  const handleLogou = async () => {\n    let email = localStorage.getItem(\"Email\");\n    console.log(employees, email);\n    if (employees) {\n      let data = employees.filter((val) => {\n        return val.Email === email;\n      });\n      console.log(data);\n      let attencenceID = data[0].attendanceObjID;\n      let selectedEmployee = data[0]._id;\n      try {\n        if (!email) {\n          alert(\"Please select an employee\");\n          return;\n        }\n\n        // Create a new Date object\n        const currentDate = new Date();\n\n        // Get the current hour, minute, and second in 24-hour format\n        const currentHour = currentDate.getHours();\n        const currentMinute = currentDate.getMinutes();\n        const currentSecond = currentDate.getSeconds();\n\n        // Format the current time in 24-hour format\n        const currentTime24Hrs = `${\n          currentHour < 10 ? \"0\" : \"\"\n        }${currentHour}:${currentMinute < 10 ? \"0\" : \"\"}${currentMinute}:${\n          currentSecond < 10 ? \"0\" : \"\"\n        }${currentSecond}`;\n\n        // Get the current time in milliseconds\n        const currentTimeMs = currentDate.getTime();\n\n        await axios.post(\n          `http://localhost:4000/api/attendance/${attencenceID}`,\n          {\n            employeeId: selectedEmployee,\n            year: new Date().getFullYear(),\n            month: new Date().getMonth() + 1,\n            date: new Date().getDate(),\n            logoutTime: [currentTime24Hrs],\n            logoutTimeMs: [currentTimeMs],\n            status: \"Logout\"\n          }\n        );\n        alert(\"Logout time recorded successfully\");\n      } catch (error) {\n        console.error(\"Error recording logout time:\", error);\n        alert(\"Error recording logout time\");\n      }\n    }\n  };\n  const handleLogout = () => {\n    console.log(\"logout\");\n    handleLogou();\n    localStorage.clear();\n    setUserData({});\n    setIsLogin(false);\n  };\n  const fetchUsers = async (id, email) => {\n    console.log(id, email);\n    try {\n      const response = await axios.get(\n        \"http://localhost:4000/api/employee/\" + id,\n        {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        }\n      );\n      console.log(response.data);\n      setEmployees(response.data);\n      handleLogin(response.data, email);\n    } catch (error) {\n      console.error(\"Error fetching employees:\", error);\n    }\n  };\n\n  // const handleLogin = async (data1, email) => {\n  //   console.log(data1);\n  //   if (data1 && email) {\n  //     let data = data1.filter((val) => {\n  //       return val.Email === email;\n  //     });\n  //     console.log(data[0].attendanceObjID, data[0]._id);\n  //     let attencenceID = data[0].attendanceObjID;\n  //     let selectedEmployee = data[0]._id;\n\n  //     try {\n  //       if (!(data1 && email)) {\n  //         alert(\"Please select a user\");\n  //         return;\n  //       }\n\n  //       const currentTime = new Date().toLocaleTimeString();\n\n  //       await axios.post(\n  //         `http://localhost:4000/api/attendance/${attencenceID}`,\n  //         {\n  //           employeeId: selectedEmployee,\n  //           year: new Date().getFullYear(),\n  //           month: new Date().getMonth() + 1,\n  //           date: new Date().getDate(),\n  //           loginTime: [currentTime],\n  //           status: \"login\"\n  //         }\n  //       );\n  //       alert(\"Login time recorded successfully\");\n  //     } catch (error) {\n  //       console.error(\"Error recording login time:\", error);\n  //       alert(\"Error recording login time\");\n  //     }\n  //   }\n  // };\n\n  const handleLogin = async (data1, email) => {\n    console.log(data1);\n    if (data1 && email) {\n      let data = data1.filter((val) => {\n        return val.Email === email;\n      });\n      console.log(data[0].attendanceObjID, data[0]._id);\n      let attencenceID = data[0].attendanceObjID;\n      let selectedEmployee = data[0]._id;\n\n      try {\n        if (!(data1 && email)) {\n          alert(\"Please select a user\");\n          return;\n        }\n\n        const currentDate = new Date();\n\n        // Get the current hour, minute, and second in 24-hour format\n        const currentHour = currentDate.getHours();\n        const currentMinute = currentDate.getMinutes();\n        const currentSecond = currentDate.getSeconds();\n\n        // Format the current time in 24-hour format\n        const currentTime24Hrs = `${\n          currentHour < 10 ? \"0\" : \"\"\n        }${currentHour}:${currentMinute < 10 ? \"0\" : \"\"}${currentMinute}:${\n          currentSecond < 10 ? \"0\" : \"\"\n        }${currentSecond}`;\n\n        // Get the current time in milliseconds\n        const currentTimeMs = currentDate.getTime();\n\n        await axios.post(\n          `http://localhost:4000/api/attendance/${attencenceID}`,\n          {\n            employeeId: selectedEmployee,\n            year: new Date().getFullYear(),\n            month: new Date().getMonth() + 1,\n            date: new Date().getDate(),\n            loginTime: [currentTime24Hrs],\n            loginTimeMs: [currentTimeMs],\n            status: \"login\"\n          }\n        );\n        alert(\"Login time recorded successfully\");\n      } catch (error) {\n        console.error(\"Error recording login time:\", error);\n        alert(\"Error recording login time\");\n      }\n    }\n  };\n  const login = (id, pass) => {\n    const bodyLogin = {\n      email: id,\n      password: pass\n    };\n\n    axios\n      .post(\"http://localhost:4000/api/login\", bodyLogin)\n      .then((res) => {\n        const decodedData = jwt.decode(res.data);\n\n        localStorage.setItem(\"token\", res.data);\n\n        if (decodedData.Account === 1) {\n          setPass(true);\n          setLoading(false);\n          setIsLogin(true);\n\n          localStorage.setItem(\"isLogin\", true);\n          localStorage.setItem(\"Account\", 1);\n          localStorage.setItem(\"_id\", decodedData._id);\n          localStorage.setItem(\n            \"Name\",\n            `${decodedData.FirstName} ${decodedData.LastName}`\n          );\n          localStorage.setItem(\"Email\", bodyLogin.email);\n          loadEmployeeData(bodyLogin.email, decodedData.Account);\n          history.push(\"#/admin/dashboard\");\n        } else if (decodedData.Account === 2) {\n          setPass(true);\n          setLoading(false);\n          setIsLogin(true);\n\n          localStorage.setItem(\"isLogin\", true);\n          localStorage.setItem(\"Account\", 2);\n          localStorage.setItem(\"_id\", decodedData._id);\n          localStorage.setItem(\n            \"Name\",\n            `${decodedData.FirstName} ${decodedData.LastName}`\n          );\n          localStorage.setItem(\"Email\", bodyLogin.email);\n          // console.log(decodedData._id);\n          loadEmployeeData(bodyLogin.email, decodedData.Account);\n          // fetchUsers(decodedData._id, bodyLogin.email);\n          history.push(\"#/hr/dashboard\");\n        } else if (decodedData.Account === 4) {\n          setPass(true);\n          setLoading(false);\n          setIsLogin(true);\n\n          localStorage.setItem(\"isLogin\", true);\n          localStorage.setItem(\"Account\", 4);\n          localStorage.setItem(\"_id\", decodedData._id);\n          localStorage.setItem(\n            \"Name\",\n            `${decodedData.FirstName} ${decodedData.LastName}`\n          );\n          localStorage.setItem(\"Email\", bodyLogin.email);\n          // console.log(decodedData._id);\n          loadEmployeeData(bodyLogin.email, decodedData.Account);\n          // fetchUsers(decodedData._id, bodyLogin.email);\n          history.push(\"#/manager/dashboard\");\n        } else if (decodedData.Account === 3) {\n          setPass(true);\n          setLoading(false);\n          setIsLogin(true);\n\n          localStorage.setItem(\"isLogin\", true);\n          localStorage.setItem(\"Account\", 3);\n          localStorage.setItem(\"_id\", decodedData._id);\n          localStorage.setItem(\n            \"Name\",\n            `${decodedData.FirstName} ${decodedData.LastName}`\n          );\n          localStorage.setItem(\"Email\", bodyLogin.email);\n          // loadEmployeeData(bodyLogin.email, decodedData.Account);\n          fetchUsers(decodedData._id, bodyLogin.email);\n\n          // history.push(`#/employee/${decodedData._id}/dashboard`);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setPass(false);\n        setLoading(false);\n      });\n  };\n\n  return (\n    <Router>\n      <Route\n        exact\n        path=\"/login\"\n        render={() =>\n          userData.Account == 1 ? (\n            <Redirect to=\"/admin/dashboard\" />\n          ) : userData.Account == 2 ? (\n            <Redirect to=\"/hr/dashboard\" />\n          ) : userData.Account == 3 ? (\n            <Redirect to=\"/employee/dashboard\" />\n          ) : userData.Account == 4 ? (\n            <Redirect to=\"/manager/dashboard\" />\n          ) : (\n            <Login onSubmit={handleSubmit} loading={loading} pass={pass} />\n          )\n        }\n      />\n      <Route\n        path=\"/admin\"\n        render={() =>\n          userData.Account == 1 ? (\n            <DashboardAdmin data={userData} onLogout={handleLogout} />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        path=\"/hr\"\n        render={() =>\n          userData.Account == 2 ? (\n            <DashboardHR data={userData} onLogout={handleLogout} />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        path=\"/employee/\"\n        render={() =>\n          userData.Account == 3 ? (\n            <DashboardEmployee data={userData} onLogout={handleLogout} />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        path=\"/manager/\"\n        render={() =>\n          userData.Account == 4 ? (\n            <ManagerDashboard data={userData} onLogout={handleLogout} />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route path=\"/forgetPassword\" exact component={ForgetPass} />\n      <Route path=\"/\" render={() => <Redirect to=\"/login\" />} />\n      <Route render={() => <Redirect to=\"/login\" />} />\n    </Router>\n  );\n};\n\nexport default App;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\serviceWorker.js",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Context\\AttendanceContext\\AttendanceContextProvider.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\history.js",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Login\\Login.jsx",["798","799","800"],"import React, { useState } from \"react\";\nimport { css } from \"@emotion/core\";\nimport \"./Login.css\";\nimport LoginIMG from \"../../img/LOGINBACK.svg\";\nimport { RxEyeOpen } from \"react-icons/rx\";\nimport { GoEyeClosed } from \"react-icons/go\";\nimport { FaUserCircle } from \"react-icons/fa\";\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nconst Login = (props) => {\n  const [alertMsg, setalertMsg] = useState(\"\");\n  const [seePass, setSeepass] = useState(false);\n  const [password, setPassword] = useState(\"\");\n\n  return (\n    <div\n      style={{ height: \"100vh\", width: \"100%\", overflow: \"auto\" }}\n      className=\"  m-0 p-0 bg-light\"\n    >\n      <div style={{ height: \"100%\", width: \"100%\" }} className=\"row bg-white\">\n        <div\n          style={{ height: \"100%\" }}\n          className=\"col-12 col-md-6  px-5 d-flex bg-white flex-column justify-content-center aline-center\"\n        >\n          <form\n            style={{ height: \"100%\", widt: \"60%\" }}\n            onSubmit={props.onSubmit}\n            className=\"form  my-auto  p-3 pb-5 rounded text-black fw-bold d-flex flex-column justify-content-center gap-5\"\n          >\n            <h2 className=\"fw-bolder text-success mb-2 text-start\">\n              {\" \"}\n              <FaUserCircle /> Log in\n            </h2>\n            <div className=\"d-flex flex-column gap-2\">\n              <label for=\"email\" className=\"ps-2\">\n                Enter uour email address{\" \"}\n              </label>\n              <input\n                name=\"email\"\n                placeholder=\"abcd@xyz.com\"\n                className=\"form-control rounded-5 bg-white border-3 border-muted\"\n                type=\"email\"\n              />\n            </div>\n\n            <div className=\"d-flex flex-column gap-2\">\n              <label for=\"password\" className=\"ps-2\">\n                Enter your password:\n              </label>\n              <div className=\"position-relative\">\n                <input\n                  name=\"password\"\n                  style={{ width: \"100%\" }}\n                  placeholder=\"**********\"\n                  className=\"form-control rounded-5 bg-white border-3 border-muted\"\n                  type={!seePass ? \"password\" : \"text\"}\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n                <button\n                  style={{\n                    position: \"absolute\",\n                    top: \"5%\",\n                    right: \"3%\",\n                    outline: \"none\",\n                    border: \"none\"\n                  }}\n                  className=\"btn p-0 fs-5 text-muted my-0\"\n                  onClick={() => setSeepass(seePass ? false : true)}\n                >\n                  {\" \"}\n                  {!seePass ? <RxEyeOpen /> : <GoEyeClosed />}\n                </button>\n              </div>\n              <p className=\"text-muted  fw-normal text-start\">\n                <Link to=\"/forgetPassword\" className=\"fw-semibold   px-2\">\n                  Forgot password\n                </Link>\n              </p>\n            </div>\n\n            <p\n              style={{\n                display: alertMsg ? \"block\" : \"none\",\n                fontWeight: \"normal\"\n              }}\n              className=\"text-danger text-center\"\n            >\n              {alertMsg}\n            </p>\n\n            <button\n              style={{ width: \"fit-content\" }}\n              className=\"btn btn-success px-5 rounded-5 fw-bolder shadow-sm\"\n            >\n              Login\n            </button>\n\n            <p className=\"text-muted  fw-normal text-center\">\n              if You forget your password please contact administration !\n            </p>\n            {!props.pass ? (\n              <p className=\"alert text-danger\">Invalid UserName or Password</p>\n            ) : (\n              \"\"\n            )}\n          </form>\n        </div>\n        <div\n          style={{ height: \"100%\", backgroundColor: \"#a6ecdec7\" }}\n          className=\"col-12 col-md-6 p-5 d-flex flex-column justify-content-center gap-4 \"\n        >\n          <div className=\"pt-5\">\n            <h5\n              style={{ wordSpacing: \"5px\" }}\n              className=\"text-muted text-center\"\n            >\n              👋 Nice to se you again\n            </h5>\n            <h1\n              style={{ letterSpacing: \"5px\" }}\n              className=\"fw-bolder text-success text-center\"\n            >\n              Welcome Back\n            </h1>\n          </div>\n          <img\n            style={{ width: \"80%\", margin: \"0 auto\" }}\n            src={LoginIMG}\n            alt=\"\"\n          />\n          <p className=\"text-center pt-5 text-muted\">www.kasperinfotech.org</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\DashboardAdmin.jsx",["801"],"\nimport React, { useState, useEffect } from \"react\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport Sidebar from \"./Sidebar/Sidebar.jsx\";\nimport AdminRoutes from \"./Routes.jsx\";\nimport NavBar from \"../../Pages/Navbar/NavBar.jsx\";\nimport \"./DashboardAdmin.css\";\n// import InnerDashContainer from \"../InnerDashContainer.jsx\";\nimport DashContainer from \"../DashContainer.jsx\";\n\nconst DashboardAdmin = (props) => {\n  const [checked, setChecked] = useState(true);\n\n  const handleChange = () => {\n    console.log(\"switch\");\n\n    if (checked) {\n      document.getElementById(\"sidebar\").setAttribute(\"class\", \"display-none\");\n    } else {\n      document.getElementById(\"sidebar\").setAttribute(\"class\", \"display-block\");\n    }\n\n    setChecked(!checked);\n  };\n\n  return (\n    <DashContainer>\n      <Router>\n        <div id=\"outer-main-div\">\n          <div id=\"outer-nav\">\n            <NavBar\n              loginInfo={props.data}\n              checked={checked}\n              handleChange={handleChange}\n              onLogout={props.onLogout}\n            />\n          </div>\n          <div\n            className=\"d-flex\"\n            style={{\n              maxHeight: \"100vh\"\n            }}\n            id=\"main-non-nav\"\n          >\n            <Sidebar />\n            <div\n              style={{ overflow: \"hidden\" }}\n              className=\"HrDashBG w-100\"\n              id=\"main-area\"\n            >\n              <AdminRoutes />\n            </div>\n          </div>\n          {/* <div\n            className=\"d-flex\"\n            style={{\n              maxHeight: \"100vh\"\n            }}\n            id=\"main-non-nav\"\n          >\n            {\" \"}\n            \n            <div className=\"AdminDashBG w-100\" id=\"main-area\">\n              \n            </div>\n          </div> */}\n        </div>\n      </Router>\n    </DashContainer>\n  );\n};\n\nexport default DashboardAdmin;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\ForgotPass\\ForgetPass.jsx",["802","803","804"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./forgot.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport logo from \"../../img/logo.png\";\r\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\r\n\r\nconst ForgetPass = () => {\r\n  const history = useHistory();\r\n  const [stage, setStage] = useState(1);\r\n  const [data, setData] = useState({\r\n    email: \"\",\r\n    otp: \"\",\r\n    pass: \"\",\r\n    confirm_pass: \"\",\r\n  });\r\n  const [formError, setFormError] = useState({\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    setFormError({\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n    });\r\n  }, [stage]);\r\n\r\n  const [passMatch, setPassMatch] = useState({\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const [countDown, setCountDown] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  // timer\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      if (countDown > 0) {\r\n        if (countDown === 1 && stage === 2) {\r\n          // alert(\"time out\");\r\n          // setStage(1);\r\n          clearInterval(timer);\r\n          setMessage(\"\");\r\n          return;\r\n        }\r\n        setCountDown(countDown - 1);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [countDown]);\r\n\r\n  // verfy the email id\r\n  const verfyEmail = async () => {\r\n    await axios\r\n      .post(\"http://localhost:4000/api/verfy_email\", data)\r\n      .then((res) => {\r\n        localStorage.setItem(\"id\", res.data.user._id);\r\n        SendOtp();\r\n        setStage(2);\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.message === \"Enter valid email id\") {\r\n          alert(err.response.data.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleEmailSubmit = async (e) => {\r\n    e.preventDefault();\r\n    verfyEmail();\r\n  };\r\n\r\n  // send the otp\r\n  const SendOtp = async () => {\r\n    const id = localStorage.getItem(\"id\");\r\n    await axios\r\n      .post(`http://localhost:4000/api/send_otp/${id}`, data)\r\n      .then((res) => {\r\n        let day = new Date();\r\n        let secounds = day.getSeconds();\r\n        setCountDown(res.data.time - secounds + 1);\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n\r\n  // verfy the otp\r\n  const handleOtpSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post(\r\n        `http://localhost:4000/api/verfy_otp`,\r\n        data\r\n      );\r\n    } catch (error) {\r\n      console.log(error.response.data.message);\r\n      if (error.response.data.message === \"your requist is faild\") {\r\n        alert(\"invalid otp\");\r\n        // setStage(1);\r\n        return;\r\n      }\r\n    }\r\n\r\n    setStage(3);\r\n  };\r\n\r\n  // change  the password\r\n  const validateFormInput = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (data.pass === \"\") {\r\n      setFormError({\r\n        password: \"Password should not be empty\",\r\n      });\r\n    } else {\r\n      const id = localStorage.getItem(\"id\");\r\n      await axios\r\n        .post(`http://localhost:4000/api/forgot_pass/${id}`, data)\r\n        .then((res) => {\r\n          console.log(res);\r\n          localStorage.removeItem(\"id\");\r\n          history.push(\"/login#/login\");\r\n          alert(\"Your Password is Updated\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n\r\n    setStage(3);\r\n  };\r\n\r\n  let success = () => {\r\n    if (\r\n      passMatch.password &&\r\n      passMatch.confirmPassword === passMatch.password\r\n    ) {\r\n      alert(\"successfully changed\");\r\n    }\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"login-container\">\r\n        <div className=\"main\">\r\n          <div className=\"stage-indicator\">\r\n            <div className=\"logo\">\r\n              <img src={logo} alt=\"\" />\r\n            </div>\r\n            <div className=\"progress-container\">\r\n              <div className={`progress-bar step-${stage}`} />\r\n            </div>\r\n            <span className=\"stage-text\">Stage {stage} of 3</span>\r\n          </div>\r\n\r\n          {stage === 1 && (\r\n            <form onSubmit={handleEmailSubmit} className=\"login-form\">\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Enter your email\"\r\n                value={data.email}\r\n                onChange={(e) =>\r\n                  setData((prev) => ({ ...prev, email: e.target.value }))\r\n                }\r\n                className=\"login-input\"\r\n                required\r\n              />\r\n              <button type=\"submit\" className=\"login-button\">\r\n                Next\r\n              </button>\r\n            </form>\r\n          )}\r\n\r\n          {stage === 2 && countDown > 0 ? (\r\n            <>\r\n              <form onSubmit={handleOtpSubmit} className=\"login-form mb-3\">\r\n                <p className=\"count-Down\">Time Left: {countDown} sec</p>\r\n                <input\r\n                  type=\"number\"\r\n                  placeholder=\"Enter OTP\"\r\n                  value={data.otp}\r\n                  onChange={(e) =>\r\n                    setData((prev) => ({ ...prev, otp: e.target.value }))\r\n                  }\r\n                  className=\"login-input\"\r\n                  required\r\n                />\r\n                <button type=\"submit\" className=\"login-button\">\r\n                  Next\r\n                </button>\r\n              </form>\r\n              <div className=\"box\">\r\n                <button\r\n                  className={`bg-none mt-2 fw-semibold mx-auto text-primary`}\r\n                  onClick={SendOtp}\r\n                  style={{\r\n                    background: \"none\",\r\n                    border: \"none\",\r\n                    fontSize: \"14px\",\r\n                  }}\r\n                >\r\n                  Resend Otp\r\n                </button>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <p>{message}</p>\r\n          )}\r\n\r\n          {stage === 3 && (\r\n            <form onSubmit={validateFormInput} className=\"login-form mb-3\">\r\n              <p className=\"label\">Password</p>\r\n              <input\r\n                value={data.pass}\r\n                onChange={(e) =>\r\n                  setData((prev) => ({ ...prev, pass: e.target.value }))\r\n                }\r\n                name=\"password\"\r\n                type=\"password\"\r\n                className=\"login-input\"\r\n                placeholder=\"Password\"\r\n                required\r\n              />\r\n              <p className=\"error-message\">{formError.password}</p>\r\n\r\n              <input\r\n                type=\"submit\"\r\n                className=\"login-button\"\r\n                value=\"Submit\"\r\n                onClick={success}\r\n              />\r\n            </form>\r\n          )}\r\n          <div className=\"box text-center\">\r\n            <Link\r\n              to=\"login#/login\"\r\n              className=\"fw-semibold\"\r\n              style={{ fontSize: \"14px\" }}\r\n            >\r\n              Do You Login Hear\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ForgetPass;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\DashboardHR.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\DashboardEmployee.jsx",["805","806","807","808","809","810","811"],"// import React, { Component } from \"react\";\n// import { HashRouter as Router, Route, Link } from \"react-router-dom\";\n// import { Redirect } from \"react-router-dom\";\n// import NavBar from \"../../Pages/Navbar/NavBar.jsx\";\n// import PersonalInfo from \"./PersonalInfo.jsx\";\n// import Education from \"./Education.jsx\";\n// import FamilyInfo from \"./FamilyInfo.jsx\";\n// import WorkExperience from \"./WorkExperience.jsx\";\n// import LeaveApplicationEmp from \"./LeaveApplicationEmp.jsx\";\n// import NotFound404 from \"../../Pages/PageNot/NotFound404.jsx\";\n// import EmployeeNewTask from \"./EmployeeTaskManagement/EmployeeNewTask.jsx\";\n// import EmployeeActiveTask from \"./EmployeeTaskManagement/EmployeeActiveTask.jsx\";\n// import Attendance from \"./attendance/Attendance.jsx\";\n// import AttendanceList from \"./attendance/AttendanceList.jsx\";\n// import EmpDash from \"./Dashboard/EmpDash.jsx\";\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import {\n//   faUsers,\n//   faUser,\n//   faFileAlt,\n//   faUniversity,\n//   faBriefcase,\n//   faMale\n// } from \"@fortawesome/free-solid-svg-icons\";\n// import DashContainer from \"../DashContainer.jsx\";\n\n// class DashboardEmployee extends Component {\n//   state = {\n//     redirect: true,\n//     checked: true\n//   };\n//   handleChange = (checked) => {\n//     console.log(\"switch\");\n\n//     if (this.state.checked == true) {\n//       document.getElementById(\"sidebar\").setAttribute(\"class\", \"display-none\");\n//     } else {\n//       document.getElementById(\"sidebar\").setAttribute(\"class\", \"display-block\");\n//     }\n//     this.setState({ checked });\n//   };\n\n//   Navigation = [\n//     {\n//       icon: <FontAwesomeIcon icon={faUser} className=\"sidebar-icon\" />,\n//       Linkrute: \"/employee/dashboard\",\n//       LinkName: \"Dashboard\"\n//     },\n//     {\n//       icon: <FontAwesomeIcon icon={faUser} className=\"sidebar-icon\" />,\n//       Linkrute: \"/employee/\" + this.props.data[\"_id\"] + \"/personal-info\",\n//       LinkName: \"Profile\"\n//     },\n//     {\n//       icon: <FontAwesomeIcon icon={faUniversity} className=\"sidebar-icon\" />,\n//       Linkrute: \"/employee/\" + this.props.data[\"_id\"] + \"/education\",\n//       LinkName: \"Education\"\n//     },\n//     {\n//       icon: <FontAwesomeIcon icon={faMale} className=\"sidebar-icon\" />,\n//       Linkrute: \"/employee/\" + this.props.data[\"_id\"] + \"/family-info\",\n//       LinkName: \"Dependents\"\n//     },\n//     {\n//       icon: <FontAwesomeIcon icon={faBriefcase} className=\"sidebar-icon\" />,\n//       Linkrute: \"/employee/\" + this.props.data[\"_id\"] + \"/work-experience\",\n//       LinkName: \"WorkExp\"\n//     },\n//     {\n//       icon: <FontAwesomeIcon icon={faFileAlt} className=\"sidebar-icon\" />,\n//       Linkrute:\n//         \"/employee/\" + this.props.data[\"_id\"] + \"/leave-application-emp\",\n//       LinkName: \"Leave\"\n//     },\n//     {\n//       icon: <FontAwesomeIcon icon={faUser} className=\"sidebar-icon\" />,\n//       Linkrute: \"/employee/newTask\",\n//       LinkName: \"New Task\"\n//     },\n//     {\n//       icon: <FontAwesomeIcon icon={faUser} className=\"sidebar-icon\" />,\n//       Linkrute: \"/employee/activeTask\",\n//       LinkName: \"Active Task\"\n//     },\n//     {\n//       icon: <FontAwesomeIcon icon={faUser} className=\"sidebar-icon\" />,\n//       Linkrute: \"/employee/\" + this.props.data[\"_id\"] + \"/attendance\",\n//       LinkName: \"Attendance\"\n//     },\n//     {\n//       icon: <FontAwesomeIcon icon={faUser} className=\"sidebar-icon\" />,\n//       Linkrute: \"/employee/\" + this.props.data[\"_id\"] + \"/attendanceList\",\n//       LinkName: \"Attendance List\"\n//     }\n//   ];\n\n//   render() {\n//     return (\n//       <DashContainer>\n//         <Router>\n//           <NavBar\n//             loginInfo={this.props.data}\n//             checked={this.state.checked}\n//             handleChange={this.handleChange}\n//             onLogout={this.props.onLogout}\n//           />\n//           <div style={{ height: \"94vh\", width: \"100%\" }} className=\"d-flex\">\n//             <div\n//               style={{ height: \"100%\" }}\n//               className=\"empSidebar bg-dark p-3 d-flex flex-column gap-4 \"\n//             >\n//               {this.Navigation.map((navigation) => (\n//                 <Link\n//                   className=\"text-white text-decoration-none fw-bold d-flex justify-content-between \"\n//                   key={navigation}\n//                   to={navigation.Linkrute}\n//                 >\n//                   <div\n//                     style={{ width: \"fit-content\" }}\n//                     className=\"d-flex gap-2\"\n//                   >\n//                     <p\n//                       style={{\n//                         height: \"20px\",\n//                         width: \"20px\",\n//                         alignItems: \"center\"\n//                       }}\n//                       className=\"m-auto d-flex rounded-5  justify-content-center\"\n//                     >\n//                       {navigation.icon}\n//                     </p>\n//                     <p\n//                       style={{ whiteSpace: \"pre\" }}\n//                       className=\"my-auto fw-normal\"\n//                     >\n//                       {navigation.LinkName}\n//                     </p>\n//                   </div>\n//                   <span className=\"my-auto fs-4\">+</span>\n//                 </Link>\n//               ))}\n//             </div>\n\n//             <div\n//               div\n//               style={{ height: \"100%\", width: \"100%\" }}\n//               className=\"empSidebar d-flex flex-column\"\n//             >\n//               <Route path=\"/employee/dashboard\" exact component={EmpDash} />\n//               <Route\n//                 exact\n//                 path=\"/employee/:id/personal-info\"\n//                 render={(props) => (\n//                   <PersonalInfo data={this.props.data} back={false} />\n//                 )}\n//               />\n//               <Route\n//                 exact\n//                 path=\"/employee/:id/education\"\n//                 render={(props) => (\n//                   <Education data={this.props.data} back={false} />\n//                 )}\n//               />\n//               <Route\n//                 exact\n//                 path=\"/employee/:id/family-info\"\n//                 render={(props) => (\n//                   <FamilyInfo data={this.props.data} back={false} />\n//                 )}\n//               />\n//               <Route\n//                 exact\n//                 path=\"/employee/:id/work-experience\"\n//                 render={(props) => (\n//                   <WorkExperience data={this.props.data} back={false} />\n//                 )}\n//               />\n//               <Route\n//                 exact\n//                 path=\"/employee/:id/leave-application-emp\"\n//                 render={(props) => (\n//                   <LeaveApplicationEmp data={this.props.data} />\n//                 )}\n//               />\n//               <Route\n//                 exact\n//                 path=\"/employee/:id/attenDance\"\n//                 render={(props) => <Attendance data={this.props.data} />}\n//               />\n//               <Route\n//                 exact\n//                 path=\"/employee/:id/attendanceList\"\n//                 render={(props) => <AttendanceList data={this.props.data} />}\n//               />\n//               <Route\n//                 path=\"/employee/newTask\"\n//                 exact\n//                 component={EmployeeNewTask}\n//               />\n//               <Route\n//                 path=\"/employee/activeTask\"\n//                 exact\n//                 component={EmployeeActiveTask}\n//               />\n//             </div>\n//           </div>\n//         </Router>\n//       </DashContainer>\n//     );\n//   }\n// }\n\n// export default DashboardEmployee;\n\nimport React, { useState } from \"react\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faUsers,\n  faUser,\n  faFileAlt,\n  faUniversity,\n  faBriefcase,\n  faMale\n} from \"@fortawesome/free-solid-svg-icons\";\nimport NavBar from \"../../Pages/Navbar/NavBar.jsx\";\nimport DashContainer from \"../DashContainer.jsx\";\nimport Sidebar from \"./sidebar/Sidebar.jsx\";\nimport RouterContent from \"./router/Routes.jsx\";\nimport { BsBuildingsFill } from \"react-icons/bs\";\nimport { FaAddressBook } from \"react-icons/fa\";\nimport { FaUserCircle } from \"react-icons/fa\";\nimport { FaCalendarCheck } from \"react-icons/fa6\";\nimport { MdDashboard, MdMenuOpen, MdTaskAlt } from \"react-icons/md\";\nimport { TbDeviceIpadMinus } from \"react-icons/tb\";\nimport { MdHolidayVillage } from \"react-icons/md\";\nimport { FcLeave } from \"react-icons/fc\";\n\nconst DashboardEmployee = (props) => {\n  const [checked, setChecked] = useState(true);\n\n  const handleChange = () => {\n    console.log(\"switch\");\n\n    if (checked) {\n      document.getElementById(\"sidebar\").setAttribute(\"class\", \"display-none\");\n    } else {\n      document.getElementById(\"sidebar\").setAttribute(\"class\", \"display-block\");\n    }\n    setChecked(!checked);\n  };\n\n  const Navigation = [\n    {\n      icon: <FontAwesomeIcon icon={faUser} className=\"sidebar-icon\" />,\n      name: \"Dashboard\",\n      navLinks: [{ to: \"/employee/dashboard\", label: \"Dashboard\" }]\n    },\n    {\n      icon: <FaUserCircle />,\n      name: \"Profile\",\n      navLinks: [\n        {\n          to: \"/employee/\" + props.data[\"_id\"] + \"/personal-info\",\n          label: \"Profile\"\n        }\n      ]\n    },\n\n    {\n      icon: <FontAwesomeIcon icon={faUniversity} className=\"sidebar-icon\" />,\n      name: \"Dependents\",\n      navLinks: [\n        {\n          to: \"/employee/\" + props.data[\"_id\"] + \"/family-info\",\n          label: \"Dependents\"\n        }\n      ]\n    },\n    {\n      icon: <FontAwesomeIcon icon={faMale} className=\"sidebar-icon\" />,\n      name: \"Education\",\n      navLinks: [\n        {\n          to: \"/employee/\" + props.data[\"_id\"] + \"/education\",\n          label: \"Education\"\n        },\n        {\n          to: \"/employee/\" + props.data[\"_id\"] + \"/departmentchart\",\n          label: \"dep chsrt\"\n        },\n        {\n          to: \"/employee/\" + props.data[\"_id\"] + \"/birthDay\",\n          label: \"birth\"\n        }\n      ]\n    },\n    {\n      icon: <FontAwesomeIcon icon={faBriefcase} className=\"sidebar-icon\" />,\n      name: \"Work Exp\",\n      navLinks: [\n        {\n          to: \"/employee/\" + props.data[\"_id\"] + \"/work-experience\",\n          label: \"WorkExp\"\n        }\n      ]\n    },\n\n    {\n      icon: <FaCalendarCheck />,\n      name: \"Attendance\",\n      navLinks: [\n        {\n          to: \"/employee/\" + props.data[\"_id\"] + \"/attendance\",\n          label: \"Create Attendance\"\n        },\n        {\n          to: \"/employee/\" + props.data[\"_id\"] + \"/attendanceList\",\n          label: \"View Attendance\"\n        },\n        {\n          to: \"/employee/\" + props.data[\"_id\"] + \"/selfAtteend\",\n          label: \"self Attendance\"\n        }\n      ]\n    },\n    {\n      icon: <FcLeave />,\n      name: \"Leave\",\n      navLinks: [\n        // {\n        //   to: \"/employee/\" + props.data[\"_id\"] + \"/leave-application-emp\",\n        //   label: \"Apply Leave\"\n        // },\n        {\n          to: \"/employee/leaveApplication\",\n          label: \"Apply Leave\"\n        }\n      ]\n    },\n    {\n      icon: <MdTaskAlt />,\n      name: \"Task\",\n      navLinks: [\n        { to: \"/employee/newTask\", label: \" New Task\" },\n        { to: \"/employee/activeTask\", label: \"Active Task\" },\n        // { to: \"/hr/taskcancle\", label: \"Cancelled Task\" },\n        { to: \"/employee/taskcomplete\", label: \"Completed Task\" },\n        { to: \"/employee/taskreject\", label: \"Rejected Task\" }\n      ]\n    },\n    {\n      icon: <TbDeviceIpadMinus />,\n      name: \"Access\",\n      navLinks: [\n        { to: \"/hr/departmentchart\", label: \"Role\" },\n        { to: \"/hr/position\", label: \"Position\" },\n        { to: \"/hr/department\", label: \"Department\" }\n      ]\n    }\n    // {\n    //   icon: <BsBuildingsFill />,\n    //   name: \"Company\",\n    //   navLinks: [\n    //     { to: \"/hr/company\", label: \"Company List\" }\n    //     // { to: \"/hr/employee\", label: \"Create Employee\" },\n    //   ]\n    // },\n    // {\n    //   icon: <FaAddressBook />,\n    //   name: \"Address\",\n    //   navLinks: [\n    //     { to: \"/hr/country\", label: \"Country\" },\n    //     { to: \"/hr/state\", label: \"State\" },\n    //     { to: \"/hr/city\", label: \"City\" }\n    //   ]\n    // },\n    // {\n    //   icon: <MdHolidayVillage />,\n    //   name: \"Holiday\",\n    //   navLinks: [{ to: \"/hr/holiday\", label: \"Leave Calendar\" }]\n    // },\n    // {\n    //   icon: <MdHolidayVillage />,\n    //   name: \"Profile\",\n    //   navLinks: [{ to: \"/hr/profile\", label: \"Leave Calendar\" }]\n    // }\n  ];\n\n  return (\n    <DashContainer>\n      <Router>\n        <NavBar\n          loginInfo={props.data}\n          checked={checked}\n          handleChange={handleChange}\n          onLogout={props.onLogout}\n        />\n        {/* <div style={{ height: \"94vh\", width: \"100%\" }} className=\"d-flex\">\n          <Sidebar navigation={Navigation} />\n\n\n          <RouterContent data={props.data} />\n        </div> */}\n\n        <div\n          className=\"d-flex\"\n          style={{\n            maxHeight: \"100vh\"\n          }}\n          id=\"main-non-nav\"\n        >\n          <Sidebar navigation={Navigation} />\n          <div className=\"HrDashBG w-100\" id=\"main-area\">\n            <RouterContent data={props.data} />\n          </div>\n        </div>\n      </Router>\n    </DashContainer>\n  );\n};\n\nexport default DashboardEmployee;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\ManagerDashboard.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Routes.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\DashContainer.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\Sidebar.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Sidebar.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Router.jsx",["812","813","814"],"// MainContent.jsx\nimport React from \"react\";\nimport { BrowserRouter, Route, Routes, Switch } from \"react-router-dom\";\nimport Role from \"../../Pages/Department/Role.jsx\";\nimport Position from \"../../Pages/Department/Position.jsx\";\nimport Department from \"../../Pages/Department/Department.jsx\";\nimport Country from \"../../Pages/Location/Country.jsx\";\nimport State from \"../../Pages/Location/State.jsx\";\nimport City from \"../../Pages/Location/City.jsx\";\nimport Company from \"../../Pages/Company/Company.jsx\";\n// import Employee from \"../../Pages/AddEmployee/Employee.jsx\";\nimport Salary from \"../../Pages/Salary/Salary.jsx\";\nimport LeaveApplicationHR from \"../Manager/LeaveApplicationHR.jsx\";\nimport NotFound404 from \"../../Pages/PageNot/NotFound404.jsx\";\nimport Dashboard from \"../Manager/Dashboard/ManagerDash.jsx\";\nimport ViewAttendance from \"../HrManager/attendance/ViewAttendance.jsx\";\n// task management\nimport ManagerNewTask from \"./ManagerTaskManagement/ManagerNewTask.jsx\";\nimport ManagerCencelledTask from \"./ManagerTaskManagement/ManagerCencelledTask.jsx\";\nimport ManagerCompletedTask from \"./ManagerTaskManagement/ManagerCompletedTask.jsx\";\nimport ManagerRejectedTask from \"./ManagerTaskManagement/ManagerRejectedTask.jsx\";\nimport ManagerActiveTask from \"./ManagerTaskManagement/ManagerActiveTask.jsx\";\n// import Attendance from \"../HrManager/attendance/Attendance.jsx\";\nimport Attendance from \"./attendance/Attendance.jsx\";\nimport InnerDashContainer from \"../InnerDashContainer.jsx\";\nimport LeaveCalendar from \"../../Pages/LeaveCalendar/LeaveCalendar.jsx\";\nimport TodaysAttendance from \"../HrManager/attendance/TodaysAttendance.jsx\";\nimport Employee from \"../../Pages/AddEmployee/Employee.jsx\";\nimport LeaveApplication from \"../../Pages/ApplyLeave/LeaveApplication.jsx\";\nimport Notification from \"./Notification/Notification.jsx\"\nconst MainContent = () => {\n  return (\n    <div id=\"main-area\">\n      <div id=\"sidebar-top-content\" />\n      <Switch>\n        <Route path=\"/manager/employee\" component={Employee} />\n        <Route path=\"/manager/salary\" exact component={Salary} />\n        <Route path=\"/manager/company\" exact component={Company} />\n        <Route path=\"/manager/role\" component={Role} />\n        <Route path=\"/manager/position\" exact component={Position} />\n        <Route path=\"/manager/department\" exact component={Department} />\n        <Route path=\"/manager/country\" exact component={Country} />\n        <Route path=\"/manager/state\" exact component={State} />\n        <Route path=\"/manager/city\" exact component={City} />\n        <Route\n          path=\"/manager/leaveApplication\"\n          exact\n          component={LeaveApplicationHR}\n        />\n\n        <Route path=\"/manager/city\" exact component={City} />\n        <Route path=\"/manager/dashboard\" exact component={Dashboard} />\n        {/* <Route path=\"/manager/task\" exact component={TaskAssign} /> */}\n        <Route path=\"/manager/newTask\" exact component={ManagerNewTask} />\n        <Route path=\"/manager/activeTask\" exact component={ManagerActiveTask} />\n        <Route\n          path=\"/manager/taskcancle\"\n          exact\n          component={ManagerCencelledTask}\n        />\n        <Route\n          path=\"/manager/taskcomplete\"\n          exact\n          component={ManagerCompletedTask}\n        />\n        <Route\n          path=\"/manager/rejectTask\"\n          exact\n          component={ManagerRejectedTask}\n        />\n        <Route path=\"/manager/attenDance\" exact component={Attendance} />\n        <Route\n          path=\"/manager/viewAttenDance\"\n          exact\n          component={ViewAttendance}\n        />\n        <Route path=\"/manager/holiday\" exact component={LeaveCalendar} />\n        <Route\n          path=\"/manager/todaysAttendance\"\n          exact\n          component={TodaysAttendance}\n        />\n            <Route path=\"/manager/notification\" exact component={Notification} />\n        <Route path=\"/manager/createLeave\" exact component={LeaveApplication} />\n        {/* attendance */}\n        <Route render={() => <NotFound404 />} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default MainContent;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\Router.jsx",["815","816"],"// MainContent.jsx\nimport React from \"react\";\nimport { BrowserRouter, Route, Routes, Switch } from \"react-router-dom\";\nimport Role from \"../../Pages/Department/Role.jsx\";\nimport Position from \"../../Pages/Department/Position.jsx\";\nimport Department from \"../../Pages/Department/Department.jsx\";\nimport Country from \"../../Pages/Location/Country.jsx\";\nimport State from \"../../Pages/Location/State.jsx\";\nimport City from \"../../Pages/Location/City.jsx\";\nimport Company from \"../../Pages/Company/Company.jsx\";\nimport Employee from \"../../Pages/AddEmployee/Employee.jsx\";\nimport Salary from \"../../Pages/Salary/Salary.jsx\";\nimport LeaveApplicationHR from \"../HrManager/LeaveApplicationHR.jsx\";\nimport NotFound404 from \"../../Pages/PageNot/NotFound404.jsx\";\nimport Dashboard from \"../HrManager/Dashboard/HRDash.jsx\";\nimport ViewAttendance from \"../HrManager/attendance/ViewAttendance.jsx\";\n// task management\nimport ManagerNewTask from \"../HrManager/ManagerTaskManagement/ManagerNewTask.jsx\";\nimport ManagerCencelledTask from \"../HrManager/ManagerTaskManagement/ManagerCencelledTask.jsx\";\nimport ManagerCompletedTask from \"../HrManager/ManagerTaskManagement/ManagerCompletedTask.jsx\";\nimport ManagerRejectedTask from \"../HrManager/ManagerTaskManagement/ManagerRejectedTask.jsx\";\nimport ManagerActiveTask from \"./ManagerTaskManagement/ManagerActiveTask.jsx\";\nimport Attendance from \"../HrManager/attendance/Attendance.jsx\";\nimport InnerDashContainer from \"../InnerDashContainer.jsx\";\nimport LeaveCalendar from \"../../Pages/LeaveCalendar/LeaveCalendar.jsx\";\nimport TodaysAttendance from \"../HrManager/attendance/TodaysAttendance.jsx\";\nimport LeaveApplication from \"../../Pages/ApplyLeave/LeaveApplication.jsx\";\nimport LeaveApplicationHRAccept from \"./LeaveStatus/LeaveApplicationHRAccept.jsx\";\nimport LeaveApplicationHRReject from \"./LeaveStatus/LeaveApplicationHRReject.jsx\";\n// import Main from \"../../Pages/Profile/Main.jsx\";\nimport Notification from \"./Notification/Notification.jsx\";\nconst MainContent = () => {\n  return (\n    <InnerDashContainer>\n      <div id=\"main-area\">\n        <div id=\"sidebar-top-content\" />\n        <Switch>\n          <Route path=\"/hr/employee\" component={Employee} />\n          <Route path=\"/hr/salary\" exact component={Salary} />\n          <Route path=\"/hr/company\" exact component={Company} />\n          <Route path=\"/hr/role\" component={Role} />\n          <Route path=\"/hr/position\" exact component={Position} />\n          <Route path=\"/hr/department\" exact component={Department} />\n          <Route path=\"/hr/country\" exact component={Country} />\n          <Route path=\"/hr/state\" exact component={State} />\n          <Route path=\"/hr/city\" exact component={City} />\n          <Route\n            path=\"/hr/leaveApplication\"\n            exact\n            component={LeaveApplicationHR}\n          />\n\n          <Route path=\"/hr/city\" exact component={City} />\n          <Route path=\"/hr/dashboard\" exact component={Dashboard} />\n          {/* <Route path=\"/hr/task\" exact component={TaskAssign} /> */}\n          <Route path=\"/hr/newTask\" exact component={ManagerNewTask} />\n          <Route path=\"/hr/ActiveTask\" exact component={ManagerActiveTask} />\n          <Route path=\"/hr/taskcancle\" exact component={ManagerCencelledTask} />\n          <Route\n            path=\"/hr/taskcomplete\"\n            exact\n            component={ManagerCompletedTask}\n          />\n          <Route path=\"/hr/rejectTask\" exact component={ManagerRejectedTask} />\n          <Route path=\"/hr/attenDance\" exact component={Attendance} />\n          <Route path=\"/hr/viewAttenDance\" exact component={ViewAttendance} />\n          <Route path=\"/hr/holiday\" exact component={LeaveCalendar} />\n          <Route\n            path=\"/hr/todaysAttendance\"\n            exact\n            component={TodaysAttendance}\n          />\n          <Route path=\"/hr/hrLeave\" exact component={LeaveApplication} />\n          <Route\n            path=\"/hr/leaveAccepted\"\n            exact\n            component={LeaveApplicationHRAccept}\n          />\n          <Route\n            path=\"/hr/leaveRejected\"\n            exact\n            component={LeaveApplicationHRReject}\n          />\n          <Route path=\"/hr/notification\" exact component={Notification} />\n\n          {/* <Route path=\"/hr/profile\" exact component={Main} /> */}\n          {/* attendance */}\n          <Route render={() => <NotFound404 />} />\n        </Switch>\n      </div>\n    </InnerDashContainer>\n  );\n};\n\nexport default MainContent;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Context\\AttendanceContext\\AttendanceContext.js",["817"],"import React, { createContext } from 'react'\r\n\r\nexport const AttendanceContext = createContext();","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Sidebar\\Sidebar.jsx",["818"],"// Sidebar.jsx\n// import React from \"react\";\n// import { Link } from \"react-router-dom\";\n// import { useState, useRef, useEffect } from \"react\";\n// import \"./Sidebar.css\";\n// import { MdDashboard } from \"react-icons/md\";\n// import { FaUserTie } from \"react-icons/fa\";\n// import { BsFillCalendar2DateFill } from \"react-icons/bs\";\n// import { FaUsersCog } from \"react-icons/fa\";\n// import { FaChair } from \"react-icons/fa\";\n// import { FaBuilding } from \"react-icons/fa\";\n// import { FaMoneyBillWave } from \"react-icons/fa6\";\n// import { VscProject } from \"react-icons/vsc\";\n// import { FiTarget } from \"react-icons/fi\";\n// import { FaFileInvoice } from \"react-icons/fa\";\n// import { RiMenu3Line } from \"react-icons/ri\";\n\n// const Sidebar = () => {\n//   const [isTaskSubMenuOpen, setTaskSubMenuOpen] = useState(false);\n//   const [isExtended, setIsExtended] = useState(false);\n\n//   const taskSubMenuRef = useRef(null);\n\n//   const toggleTaskSubMenu = () => {\n//     setTaskSubMenuOpen(!isTaskSubMenuOpen);\n//   };\n\n//   const checkExtended = () => {\n//     if (isExtended === true) {\n//       setIsExtended(false);\n//     } else {\n//       setIsExtended(true);\n//     }\n//   };\n\n//   useEffect(() => {\n//     const handleClickOutside = (event) => {\n//       if (\n//         taskSubMenuRef.current &&\n//         !taskSubMenuRef.current.contains(event.target)\n//       ) {\n//         setTaskSubMenuOpen(false);\n//       }\n//     };\n\n//     document.addEventListener(\"mousedown\", handleClickOutside);\n\n//     return () => {\n//       document.removeEventListener(\"mousedown\", handleClickOutside);\n//     };\n//   }, [taskSubMenuRef]);\n//   return (\n//     <div\n//       className=\"px-0\"\n//       id=\"sidebar\"\n//       style={{\n//         backgroundColor: \"#1D267D\",\n//         width: \"fit-content\",\n//         transition: \"1s ease\"\n//       }}\n//     >\n//       {/* <div id=\"sidebar-top-content\" /> */}\n//       <div\n//         style={{ boxShadow: \"-3px 2px 3px gray inset\", position: \"relative\" }}\n//         className=\"fw-bold bg-white m-1 px-3 d-flex justify-between aline-center fs-5\"\n//       >\n//         <p\n//           style={{ display: isExtended ? \"none\" : \"block\" }}\n//           className=\"my-auto px-2\"\n//         >\n//           {\" \"}\n//           ADMIN\n//         </p>\n//         <button\n//           style={{\n//             outline: \"none\",\n//             border: \"none\",\n//             backgroundColor: \"transparent\"\n//           }}\n//           onClick={checkExtended}\n//           className=\"fs-4\"\n//         >\n//           <RiMenu3Line className=\"fw-bolder my-auto\" />\n//         </button>\n//       </div>\n//       <div className=\"navbar-ul d-flex flex-column gap-2 p-1\">\n//         <li>\n//           <Link to=\"/admin/dashboard\" className=\"d-flex aline-center gap-2\">\n//             <span\n//               title=\"Dashboard\"\n//               className=\"fs-4 d-flex my-auto text-warning\"\n//             >\n//               <MdDashboard />\n//             </span>\n//             <p\n//               className=\"my-auto px-2\"\n//               style={{ display: isExtended ? \"none\" : \"block\" }}\n//             >\n//               Dashboard\n//             </p>\n//           </Link>\n//         </li>\n//         <li>\n//           <Link to=\"/admin/user\" className=\"d-flex aline-center gap-2\">\n//             <span title=\"Employee\" className=\"fs-4 d-flex my-auto text-warning\">\n//               <FaUserTie />\n//             </span>\n//             <p\n//               style={{ display: isExtended ? \"none\" : \"block\" }}\n//               className=\"my-auto px-2\"\n//             >\n//               {\" \"}\n//               Employee\n//             </p>\n//           </Link>\n//         </li>\n//         <li>\n//           <Link to=\"/admin/leave\" className=\"d-flex aline-center gap-2\">\n//             <span title=\"Leave\" className=\"fs-4 d-flex my-auto text-warning\">\n//               <BsFillCalendar2DateFill />\n//             </span>\n//             <p\n//               style={{ display: isExtended ? \"none\" : \"block\" }}\n//               className=\"my-auto px-2\"\n//             >\n//               {\" \"}\n//               Leave\n//             </p>\n//           </Link>\n//         </li>\n\n//         <li>\n//           <Link to=\"/admin/role\" className=\"d-flex aline-center gap-2\">\n//             <span title=\"Role\" className=\"fs-4 d-flex my-auto text-warning\">\n//               <FaUsersCog />\n//             </span>\n//             <p\n//               style={{ display: isExtended ? \"none\" : \"block\" }}\n//               className=\"my-auto px-2\"\n//             >\n//               {\" \"}\n//               Role\n//             </p>\n//           </Link>\n//         </li>\n//         <li>\n//           <Link to=\"/admin/position\" className=\"d-flex aline-center gap-2\">\n//             <span title=\"Position\" className=\"fs-4 d-flex my-auto text-warning\">\n//               <FaChair />\n//             </span>\n//             <p\n//               style={{ display: isExtended ? \"none\" : \"block\" }}\n//               className=\"my-auto px-2\"\n//             >\n//               {\" \"}\n//               Position\n//             </p>\n//           </Link>\n//         </li>\n//         <li>\n//           <Link to=\"/admin/department\" className=\"d-flex aline-center gap-2\">\n//             <span\n//               title=\"Department\"\n//               className=\"fs-4 d-flex my-auto text-warning\"\n//             >\n//               <FaBuilding />\n//             </span>\n//             <p\n//               style={{ display: isExtended ? \"none\" : \"block\" }}\n//               className=\"my-auto px-2\"\n//             >\n//               {\" \"}\n//               Department\n//             </p>\n//           </Link>\n//         </li>\n//         <li>\n//           <Link to=\"/admin/salary\" className=\"d-flex aline-center gap-2\">\n//             <span title=\"Salary\" className=\"fs-4 d-flex my-auto text-warning\">\n//               <FaMoneyBillWave />\n//             </span>\n//             <p\n//               style={{ display: isExtended ? \"none\" : \"block\" }}\n//               className=\"my-auto px-2\"\n//             >\n//               {\" \"}\n//               Salary\n//             </p>\n//           </Link>\n//         </li>\n//         <li>\n//           <Link to=\"/admin/project-bid\" className=\"d-flex aline-center gap-2\">\n//             <span\n//               title=\" Project Bidding\"\n//               className=\"fs-4 d-flex my-auto text-warning\"\n//             >\n//               <VscProject />\n//             </span>\n//             <p\n//               style={{ display: isExtended ? \"none\" : \"block\" }}\n//               className=\"my-auto px-2\"\n//             >\n//               {\" \"}\n//               Project Bidding\n//             </p>\n//           </Link>\n//         </li>\n//         <li>\n//           <Link to=\"/admin/portal-master\" className=\"d-flex aline-center gap-2\">\n//             <span\n//               title=\"Portal Master\"\n//               className=\"fs-4 d-flex my-auto text-warning\"\n//             >\n//               <FiTarget />\n//             </span>\n//             <p\n//               style={{ display: isExtended ? \"none\" : \"block\" }}\n//               className=\"my-auto px-2\"\n//             >\n//               {\" \"}\n//               Portal Master\n//             </p>\n//           </Link>\n//         </li>\n//         <li>\n//           <Link to=\"/admin/task\" className=\"d-flex aline-center gap-2\">\n//             <span title=\"Invoice\" className=\"fs-4 d-flex my-auto text-warning\">\n//               <FaBuilding />\n//             </span>\n//             <p\n//               style={{ display: isExtended ? \"none\" : \"block\" }}\n//               className=\"my-auto\"\n//             >\n//               {\" \"}\n//               Invoice\n//             </p>\n//           </Link>\n//         </li>\n//         <li>\n//           <Link\n//             to=\"/admin/adminAttendance\"\n//             className=\"d-flex aline-center gap-2\"\n//           >\n//             <span title=\"Invoice\" className=\"fs-4 d-flex my-auto text-warning\">\n//               <FaBuilding />\n//             </span>\n//             <p\n//               style={{ display: isExtended ? \"none\" : \"block\" }}\n//               className=\"my-auto\"\n//             >\n//               {\" \"}\n//               Attendnce\n//             </p>\n//           </Link>\n//         </li>\n//         <li\n//           onClick={toggleTaskSubMenu}\n//           ref={taskSubMenuRef}\n//           className=\"taskmanagement-menue\"\n//         >\n//           <div style={{ color: \"white\" }} className=\"d-flex aline-center gap-2\">\n//             <span\n//               title=\"Task Management\"\n//               className=\"fs-4 d-flex my-auto text-warning\"\n//             >\n//               <FaFileInvoice />\n//             </span>\n//             <p\n//               style={{\n//                 display: isExtended ? \"none\" : \"block\",\n//                 cursor: \"pointer\"\n//               }}\n//               className=\"my-auto px-2\"\n//             >\n//               {\" \"}\n//               Task Management\n//             </p>\n//           </div>\n//           {isTaskSubMenuOpen && (\n//             <div\n//               className=\"sub-menu rounded-4 mt-3 rounded-top-0\"\n//               style={{\n//                 background: \"rgba(47, 45, 151, 0.944)\",\n//                 position: \"absolute\",\n//                 width: \"fit-conten\",\n//                 padding: \"0rem 1rem .5rem .2rem\",\n//                 border: \"3px solid gold\",\n//                 zIndex: \"1\"\n//               }}\n//             >\n//               {/* Add your sub-menu items here */}\n//               <li>\n//                 <Link\n//                   to=\"/admin/task\"\n//                   className=\"d-flex gap-2 justify-content-between aline-center\"\n//                 >\n//                   Create Task <span> » </span>\n//                 </Link>\n//               </li>\n//               <li>\n//                 <Link\n//                   to=\"/admin/taskassign\"\n//                   className=\"d-flex gap-2 justify-content-between aline-center\"\n//                 >\n//                   Assigned <span> » </span>\n//                 </Link>\n//               </li>\n//               <li>\n//                 <Link\n//                   to=\"/admin/taskstatus\"\n//                   className=\"d-flex gap-2 justify-content-between aline-center\"\n//                 >\n//                   Active <span> » </span>\n//                 </Link>\n//               </li>\n//               <li>\n//                 <Link\n//                   to=\"/admin/taskcancle\"\n//                   className=\"d-flex gap-2 justify-content-between aline-center\"\n//                 >\n//                   Cancelled <span> » </span>\n//                 </Link>\n//               </li>\n//               <li>\n//                 <Link\n//                   to=\"/admin/taskcomplete\"\n//                   className=\"d-flex gap-2 justify-content-between aline-center\"\n//                 >\n//                   Completed <span> » </span>\n//                 </Link>\n//               </li>\n//               <li>\n//                 <Link\n//                   to=\"/admin/taskreject\"\n//                   className=\"d-flex gap-2 justify-content-between aline-center\"\n//                 >\n//                   Reject <span> » </span>\n//                 </Link>\n//               </li>\n//             </div>\n//           )}\n//         </li>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Sidebar;\n\nimport React, { useState } from \"react\";\nimport { BsBuildingsFill } from \"react-icons/bs\";\nimport { FaAddressBook } from \"react-icons/fa\";\nimport { FaUserCircle } from \"react-icons/fa\";\nimport { FaCalendarCheck } from \"react-icons/fa6\";\nimport { MdDashboard, MdMenuOpen, MdTaskAlt } from \"react-icons/md\";\nimport { TbDeviceIpadMinus } from \"react-icons/tb\";\nimport { MdHolidayVillage } from \"react-icons/md\";\nimport { AiOutlineFundProjectionScreen } from \"react-icons/ai\";\nimport { FcLeave } from \"react-icons/fc\";\n\n// import { Link } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { Link } from \"react-router-dom\";\nimport { FaUserTie } from \"react-icons/fa\";\nimport \"./Sidebar.css\";\n\nconst Sidebar = () => {\n  const [activeCategory, setActiveCategory] = useState(null);\n  const [extended, setExtended] = useState(true);\n\n  const allLinks = [\n    {\n      icon: <MdDashboard />,\n      name: \"Dashboard\",\n      navLinks: [{ to: \"/admin/dashboard\", label: \"Dashboard\" }]\n    },\n    {\n      icon: <FaUserTie />,\n      name: \"Employee\",\n      navLinks: [\n        { to: \"/admin/user\", label: \"Employee List\" },\n        { to: \"/admin/salary\", label: \"Salary\" }\n      ]\n    },\n    {\n      icon: <FaCalendarCheck />,\n      name: \"Attendance\",\n      navLinks: [\n        { to: \"/admin/adminAttendance\", label: \"Create Attendance\" },\n        { to: \"/admin/adminviewAttenDance\", label: \"View Attendance\" }\n      ]\n    },\n    {\n      icon: <FcLeave />,\n      name: \"Leave\",\n      navLinks: [\n        { to: \"/admin/applyLeave\", label: \"Apply Leave\" },\n        { to: \"/admin/pendingLeave\", label: \"Pending \" },\n        { to: \"/admin/leaveAccepted\", label: \"Accepted \" },\n        { to: \"/admin/leaveRejected\", label: \"Rejected \" }\n      ]\n    },\n    {\n      icon: <MdTaskAlt />,\n      name: \"Task\",\n      navLinks: [\n        { to: \"/admin/task\", label: \"Create New Task\" },\n        { to: \"/admin/taskassign\", label: \"Assigned\" },\n        { to: \"/admin/taskstatus\", label: \"Active Taask\" },\n        { to: \"/admin/taskcancle\", label: \"Cancelled Task\" },\n        { to: \"/admin/taskcomplete\", label: \"Completed Task\" },\n        { to: \"/admin/taskreject\", label: \"Rejected Task\" }\n      ]\n    },\n    {\n      icon: <TbDeviceIpadMinus />,\n      name: \"Access\",\n      navLinks: [\n        { to: \"/admin/role\", label: \"Role\" },\n        { to: \"/admin/position\", label: \"Position\" },\n        { to: \"/admin/department\", label: \"Department\" }\n      ]\n    },\n    {\n      icon: <BsBuildingsFill />,\n      name: \"Company\",\n      navLinks: [\n        { to: \"/admin/company\", label: \"Company List\" }\n        // { to: \"/hr/employee\", label: \"Create Employee\" },\n      ]\n    },\n    {\n      icon: <FaAddressBook />,\n      name: \"Address\",\n      navLinks: [\n        { to: \"/admin/country\", label: \"Country\" },\n        { to: \"/admin/state\", label: \"State\" },\n        { to: \"/admin/city\", label: \"City\" }\n      ]\n    },\n    {\n      icon: <MdHolidayVillage />,\n      name: \"Holiday\",\n      navLinks: [{ to: \"/admin/leaveCal\", label: \"Leave Calendar\" }]\n    },\n    {\n      icon: <AiOutlineFundProjectionScreen />,\n      name: \"Project\",\n      navLinks: [\n        { to: \"/admin/project-bid\", label: \"Project Bidding\" },\n        { to: \"/admin/portal-master\", label: \"Portal Master\" }\n      ]\n    }\n  ];\n\n  const ExtendClick = () => {\n    setExtended(extended ? false : true);\n  };\n\n  return (\n    <div\n      style={{\n        minHeight: \"100%\",\n        maxHeight: \"100%\",\n        overflowY: \"auto\",\n        overflow: \"inherit\",\n        width: \"fit-content\",\n        background: \"#1D267D\"\n      }}\n      className=\"d-flex  flex-column gap-2 p-3\"\n    >\n      <h3\n        style={{ borderBottom: \"3px solid green\" }}\n        className=\"fw-bolder mt-5 text-success justify-content-between py-2 d-flex gap-2\"\n      >\n        <p\n          style={{ display: !extended ? \"none\" : \"block\" }}\n          className=\"my-auto\"\n        >\n          ADMIN\n        </p>{\" \"}\n        <span\n          onClick={ExtendClick}\n          style={{\n            border: \"none\",\n            outline: \"none\",\n            cursor: \"pointer\",\n            transform: `rotate(${!extended ? \"180deg\" : \"0deg\"})`\n          }}\n          className=\"my-auto p-0 fs-2 text-white\"\n        >\n          <MdMenuOpen />\n        </span>\n      </h3>\n\n      {allLinks.map(({ icon, name, navLinks }) => (\n        <div\n          key={name}\n          onMouseEnter={() => setActiveCategory(name)}\n          onMouseLeave={() => setActiveCategory(null)}\n          className=\"position-relative\"\n        >\n          <button\n            style={buttonStyle}\n            className=\"btn p-0 text-white text-start fw-bold gap-2 justify-between w-100 d-flex justify-content-between\"\n          >\n            <div\n              style={{ width: \"fit-content\" }}\n              className=\"d-flex gap-2 my-auto\"\n            >\n              <p\n                style={{\n                  height: \"30px\",\n                  width: \"30px\",\n                  alignItems: \"center\",\n                  color: activeCategory === name ? \"#FF9209\" : \"white\"\n                }}\n                className=\"m-auto d-flex rounded-5  justify-content-center fs-3\"\n              >\n                {icon}\n              </p>\n              <p\n                style={{ display: !extended ? \"none\" : \"block\" }}\n                className=\"my-auto\"\n              >\n                {name}\n              </p>\n            </div>\n            <span\n              style={{\n                transform: `rotate(${\n                  activeCategory === name ? \"135deg\" : \"0deg\"\n                })`,\n                transition: \"1s ease\",\n                display: !extended ? \"none\" : \"block\"\n              }}\n              className=\"my-auto fs-4\"\n            >\n              +\n            </span>\n          </button>\n\n          <div\n            style={{\n              ...dropdownStyle,\n              display: activeCategory === name ? \"flex\" : \"none\",\n              background:\n                \"linear-gradient(165deg,#11009E, #700B97, 90%, #C84B31)\",\n              width: \"fit-content\"\n            }}\n            className=\"flex-column position-absolute top-0 start-100 py-2 px-2 gap-2 mt-2  \"\n          >\n            {navLinks.map((link) => (\n              <Link className=\"text-decoration-none\" key={link.to} to={link.to}>\n                <div className=\"text-decoration-none flex-nowrap text-start fw-bolder gap-3 text-white d-flex justify-content-between \">\n                  <div\n                    style={{ borderBottom: \"1px solid white\" }}\n                    className=\"d-flex gap-1 flex-nowrap\"\n                  >\n                    <p className=\"m-0\">{link.icon}</p>\n                    <p style={{ whiteSpace: \"pre\" }} className=\"m-auto\">\n                      {link.label}\n                    </p>\n                  </div>\n                  <span style={{}} className=\"my-auto \">\n                    ›\n                  </span>\n                </div>\n              </Link>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst buttonStyle = {\n  outline: \"none\",\n  border: \"none\",\n  height: \"3rem\"\n};\n\nconst dropdownStyle = {\n  width: \"250px\",\n  zIndex: \"5\",\n  borderLeft: \"5px solid white\"\n};\n\nexport default Sidebar;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Navbar\\NavBar.jsx",["819","820","821","822"],"import React, { useState, useContext, useEffect } from \"react\";\nimport { Navbar } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport Logo from \"../../img/logo.png\";\nimport \"./NavBar.css\";\nimport { LuBell } from \"react-icons/lu\";\nimport { IoMdClose } from \"react-icons/io\";\n// import Switch from \"react-switch\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSignOutAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { AttendanceContext } from \"../../Context/AttendanceContext/AttendanceContext\";\nimport { useHistory } from 'react-router-dom';\nimport addNotification from \"react-push-notification\";\nimport { useLocation } from \"react-router-dom/cjs/react-router-dom\";\n\nconst NavBar = (props) => {\n  const [activeProfile, setActiveProfile] = useState(null);\n  const history = useHistory();\n  const location = useLocation().pathname.split(\"/\")[1];\n  const [notification, setNotification] = useState([]);\n  const [employeeData, setEmployeeData] = useState(\"\");\n  const [notiToggle, setNotiToggle] = useState(false)\n  const {socket} = useContext(AttendanceContext);\n \n  const id = localStorage.getItem(\"_id\");\n  const email = localStorage.getItem(\"Email\");\n  const pushNotification = (taskName)=>{\n    addNotification({\n      title: \"Kasper\",\n      subtitle: taskName,\n      duration: 4000,\n      icon: Logo,\n      native: true,\n    })\n  }\n  const loadEmployeeData = () => {\n    axios\n      .get(`http://localhost:4000/api/particularEmployee/${id}`, {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        console.log(response.data.Notification)\n        setEmployeeData(response.data)\n        setNotification(response.data.Notification)\n        \n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  useEffect(()=>{\n    loadEmployeeData();\n  },[]);\n  const notificationDeleteHandler = (id)=>{\n \n    axios\n    .post(`http://localhost:4000/api/notificationDeleteHandler/${id}`, {email},{\n      headers: {\n        authorization: localStorage.getItem(\"token\") || \"\"\n      }\n    })\n    .then((response) => {\n      console.log(response)\n      setEmployeeData(response.data.result)\n      setNotification(response.data.result.Notification);\n    \n    })\n    .catch((error) => {\n      console.log(error);\n    });\n  }\n  const notificationHandler = (id, path)=>{\n    console.log(id)\n    axios\n    .post(`http://localhost:4000/api/notificationStatusUpdate/${id}`, {email},{\n      headers: {\n        authorization: localStorage.getItem(\"token\") || \"\"\n      }\n    })\n    .then((response) => {\n      \n      setEmployeeData(response.data.result)\n      setNotification(response.data.result.Notification);\n      history.push(`/${location}/${path}`)\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n  }\n  const handleNotificationRequest = () => {\n    // Check if the browser supports notifications\n    if ('Notification' in window) {\n      Notification.requestPermission().then((permission) => {\n        if (permission === 'granted') {\n          // Permission granted, you can now trigger notifications\n          console.log('Notification permission granted');\n        }\n      });\n    }\n  };\n  useEffect(() => {\n    // console.log('Socket:', socket.id);\n    socket.emit('userConnected', { email });\n    handleNotificationRequest();\n    if (socket) {\n      socket.on(\"taskNotificationReceived\", (data) => {\n       console.log(data.Account)\n        if(data.Account===4){\n          if(data.managerEmail===email){\n        setNotification((prev) => (\n          [data, ...prev]\n        ));\n        pushNotification(data.message)\n          }\n        }else if(data.Account===2|| data.Account===3){\n          console.log(data)\n         let emp=    data.employeesEmail.filter((val)=>{\n             return val===email && val !==data.senderMail\n            });\n           if(emp.length>0){\n            setNotification((prev) => (\n              [data, ...prev]));\n              pushNotification(data.message)\n           }\n        }else if(data.Account===1){\n         console.log(data)\n          if(data.adminMail===email){\n            setNotification((prev) => (\n              [data, ...prev]\n            ));\n            pushNotification(data.message)\n              }\n        }\n       \n       \n      });\n      socket.on(\"notificationPageUpdate\", (data)=>{\n       if(data){\n        loadEmployeeData()\n       }\n      })\n      socket.on(\"leaveNotificationReceived\", (data)=>{\n       const  {message,status,path,taskId,managerEmail,hrEmail} = data;\n    \n     const data1 = {message,status,path, taskId, managerEmail, hrEmail};\n        setNotification((prev) => (\n          [data1, ...prev]\n        ));\n        pushNotification(data1.message)\n      })\n      socket.on(\"leaveManagerStatusNotificationReceived\", (data)=>{\n        const  {message,status,path,taskId,employeeEmail,hrEmail,managerEmail} = data;\n        if(location===\"employee\"){\n     \n       \n          const data1 = {message,status,path, taskId, employeeEmail, hrEmail};\n          setNotification((prev) => (\n            [data1, ...prev]\n          ));\n          pushNotification(data1.message)\n        }else if (location===\"hr\"){\n\n          const data1 = {message,status,path, taskId, employeeEmail, hrEmail};\n          setNotification((prev) => (\n            [data1, ...prev]\n          ));\n          pushNotification(data1.message)\n        }else if (location===\"manager\"){\n  \n          const data1 = {message,status,path, taskId, employeeEmail, managerEmail};\n          setNotification((prev) => (\n            [data1, ...prev]\n          ));\n          pushNotification(data1.message)\n        }\n       \n      \n      \n        \n       })\n    }\n  }, [socket]);\n  const clearAllHandler = ()=>{\n    if(notification.length>0){\n      axios.post(`http://localhost:4000/api/selectedNotificationDelete`,{email},{\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        console.log(response)\n        setNotification(response.data.result.Notification);\n      })\n      .catch((error) => {\n        console.log(error);\n      }); \n    }\n  \n   }\n   let uniqueNotification = notification.filter((val, index, arr) => {\n    return val.status === \"unseen\" && arr.findIndex(item => item.taskId === val.taskId) === index;\n});\n\n  return (\n    <div\n      className=\"shadow-sm px-2 py-1 bg-white\"\n      style={{ height: \"fit-content\" }}\n    >\n      <nav className=\"d-flex aline-items-center justify-content-between\">\n        <Navbar.Brand className=\"my-auto\" style={{ width: \"120px\" }}>\n          <img style={{ width: \"100%\" }} src={Logo} alt=\"\" />\n        </Navbar.Brand>\n        <div className=\"ml-auto my-auto d-flex align-items-center gap-3\">\n          <div className=\"position-relative\" onClick={()=>setNotiToggle(!notiToggle)}>\n          <LuBell className=\"fs-4\" />\n          {notification.length>0 && uniqueNotification.length>0 && <p style={{height:'1.3rem', width:'1.3rem', display:'flex', justifyContent:'center', alignItems:'center', position:'absolute', top:'-35%', right:'-30%', borderRadius:'50% 50% 50% 0' , scale:'.7'}}  className=\"bg-primary text-white fw-bold\">{uniqueNotification.length}</p>} \n   \n            <span className='notification-list'>\n              {notiToggle && notification.slice(0,10).filter((val, i, ar) => ar.findIndex(item => item.taskId === val.taskId) === i).map((val,i) => {\n                return <span style={{display:'flex', justifyContent:'space-between', alignItems:'center', gap:'.1rem'}}  className={val.status===\"unseen\"?\"new\":\"old\"}><h6 style={{fontSize: \"0.9rem\"}} onClick={val.status===\"unseen\"?()=>notificationHandler(val.taskId, val.path):()=>  history.push(`/${location}/${val.path}`)}>{val.message}</h6><IoMdClose  onClick={(e)=>(notificationDeleteHandler(val.taskId),   e.stopPropagation())} style={{cursor: \"pointer\"}} className=\"closing\"/></span>\n              })}\n\n            {notiToggle && notification.length>0  && <h4 className=\"viewAll\" onClick={clearAllHandler}>Clear All</h4>} \n            </span>\n          </div>\n          <span className=\"navbar-right-content my-auto d-flex  fw-bold\">\n            <div\n              onMouseEnter={() => setActiveProfile(\"name\")}\n              onMouseLeave={() => setActiveProfile(null)}\n              style={{\n                height: \"45px\",\n                width: \"45px\",\n                border: \"1px solid blue\",\n                borderRadius: \"50%\",\n                position: \"relative\"\n              }}\n            >\n              <img\n                style={{\n                  height: \"100%\",\n                  width: \"100%\",\n                  objectFit: \"cover\",\n                  border: \"1px solid red\",\n                  borderRadius: \"50%\"\n                }}\n                src=\"https://www.pngitem.com/pimgs/m/394-3947057_circular-profile-picture-png-transparent-png.png\"\n                alt=\"\"\n              />\n\n              <div\n                className=\"bg-white shadow pb-3 pt-1 px-3 flex-column gap-3\"\n                style={{\n                  position: \"absolute\",\n                  zIndex: \"100\",\n                  width: \"fit-content\",\n                  right: \"0\",\n                  top: \"90%\",\n                  display: activeProfile === \"name\" ? \"flex\" : \"none\"\n                }}\n              >\n                <span>\n                  {\" \"}\n                  <p className=\"m-0 p-0\">\n                    Hello{\" \"}\n                    <span className=\"text-capitalize m-0 p-0 text-primary\">\n                      {props.loginInfo[\"Name\"]}\n                    </span>{\" \"}\n                  </p>\n                  <p\n                    style={{ fontSize: \".9rem\" }}\n                    className=\"m-0 text-muted p-0\"\n                  >\n                    {props.loginInfo[\"Email\"]}\n                  </p>\n                </span>\n                <p>Profile</p>\n                <button\n                  onClick={props.onLogout}\n                  style={{ cursor: \"pointer\" }}\n                  className=\"btn w-100 p-0 m-0 border-0 d-flex justify-content-between aline-items-center navbar-right-content\"\n                >\n                  Logout\n                  <FontAwesomeIcon\n                    className=\"my-auto fs-6 text-muted\"\n                    icon={faSignOutAlt}\n                  />\n                </button>\n              </div>\n            </div>\n            <span className=\"text-muted\"></span>\n          </span>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default NavBar;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\sidebar\\Sidebar.jsx",["823","824","825","826","827","828","829","830","831"],"// import React from \"react\";\n// import { Link } from \"react-router-dom\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n// const Sidebar = ({ navigation }) => {\n//   return (\n//     <div\n//       style={{ height: \"100%\" }}\n//       className=\"empSidebar bg-dark p-3 d-flex flex-column gap-4\"\n//     >\n//       {navigation.map((item) => (\n//         <Link\n//           className=\"text-white text-decoration-none fw-bold d-flex justify-content-between\"\n//           key={item.Linkrute}\n//           to={item.Linkrute}\n//         >\n//           <div style={{ width: \"fit-content\" }} className=\"d-flex gap-2\">\n//             <p\n//               style={{ height: \"20px\", width: \"20px\", alignItems: \"center\" }}\n//               className=\"m-auto d-flex rounded-5 justify-content-center\"\n//             >\n//               {item.icon}\n//             </p>\n//             <p style={{ whiteSpace: \"pre\" }} className=\"my-auto fw-normal\">\n//               {item.LinkName}\n//             </p>\n//           </div>\n//           <span className=\"my-auto fs-4\">+</span>\n//         </Link>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Sidebar;\n\nimport React, { useState } from \"react\";\nimport { BsBuildingsFill } from \"react-icons/bs\";\nimport { FaAddressBook } from \"react-icons/fa\";\nimport { FaUserCircle } from \"react-icons/fa\";\nimport { FaCalendarCheck } from \"react-icons/fa6\";\nimport { MdDashboard, MdMenuOpen, MdTaskAlt } from \"react-icons/md\";\nimport { TbDeviceIpadMinus } from \"react-icons/tb\";\nimport { MdHolidayVillage } from \"react-icons/md\";\nimport { FcLeave } from \"react-icons/fc\";\n\n// import { Link } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { Link } from \"react-router-dom\";\n\nconst Sidebar = ({ navigation }) => {\n  const [activeCategory, setActiveCategory] = useState(null);\n  const [extended, setExtended] = useState(true);\n\n  const ExtendClick = () => {\n    setExtended(extended ? false : true);\n  };\n\n  return (\n    <div\n      style={{\n        minHeight: \"100%\",\n        maxHeight: \"100%\",\n        overflowY: \"auto\",\n        overflow: \"inherit\",\n        width: \"fit-content\",\n        backgroundColor: \"var(--primaryDashColorDark)\"\n      }}\n      className=\"d-flex  flex-column gap-2 p-3\"\n    >\n      <h3\n        style={{ borderBottom: \"3px solid green\" }}\n        className=\"fw-bolder text-success justify-content-between py-2 d-flex gap-2\"\n      >\n        <p\n          style={{ display: !extended ? \"none\" : \"block\" }}\n          className=\"my-auto\"\n        >\n          EMPLOYEE\n        </p>{\" \"}\n        <span\n          onClick={ExtendClick}\n          style={{\n            border: \"none\",\n            outline: \"none\",\n            cursor: \"pointer\",\n            transform: `rotate(${!extended ? \"180deg\" : \"0deg\"})`\n          }}\n          className=\"my-auto p-0 fs-2 text-white\"\n        >\n          <MdMenuOpen />\n        </span>\n      </h3>\n\n      {navigation.map(({ icon, name, navLinks }) => (\n        <div\n          key={name}\n          onMouseEnter={() => setActiveCategory(name)}\n          onMouseLeave={() => setActiveCategory(null)}\n          className=\"position-relative\"\n        >\n          <button\n            style={buttonStyle}\n            className=\"btn p-0 text-white text-start fw-bold gap-2 justify-between w-100 d-flex justify-content-between\"\n          >\n            <div\n              style={{ width: \"fit-content\" }}\n              className=\"d-flex my-auto gap-2\"\n            >\n              <p\n                style={{\n                  height: \"30px\",\n                  width: \"30px\",\n                  alignItems: \"center\",\n                  color: activeCategory === name ? \"#FF9209\" : \"white\"\n                }}\n                className=\"m-auto d-flex rounded-5  justify-content-center fs-3\"\n              >\n                {icon}\n              </p>\n              <p\n                style={{ display: !extended ? \"none\" : \"block\" }}\n                className=\"my-auto\"\n              >\n                {name}\n              </p>\n            </div>\n            <span\n              style={{\n                transform: `rotate(${\n                  activeCategory === name ? \"135deg\" : \"0deg\"\n                })`,\n                transition: \"1s ease\",\n                display: !extended ? \"none\" : \"block\"\n              }}\n              className=\"my-auto fs-4\"\n            >\n              +\n            </span>\n          </button>\n\n          <div\n            style={{\n              ...dropdownStyle,\n              display: activeCategory === name ? \"flex\" : \"none\",\n              backgroundColor: \"var(--primaryDashColorDark)\",\n              width: \"fit-content\"\n            }}\n            className=\"flex-column position-absolute top-0 start-100 py-2 px-2 gap-2 mt-2  \"\n          >\n            {navLinks.map((link) => (\n              <Link className=\"text-decoration-none\" key={link.to} to={link.to}>\n                <div className=\"text-decoration-none flex-nowrap text-start fw-bolder gap-3 text-white d-flex justify-content-between \">\n                  <div\n                    style={{ borderBottom: \"1px solid white\" }}\n                    className=\"d-flex gap-1 flex-nowrap\"\n                  >\n                    <p className=\"m-0\">{link.icon}</p>\n                    <p style={{ whiteSpace: \"pre\" }} className=\"m-auto\">\n                      {link.label}\n                    </p>\n                  </div>\n                  <span style={{}} className=\"my-auto \">\n                    ›\n                  </span>\n                </div>\n              </Link>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst buttonStyle = {\n  outline: \"none\",\n  border: \"none\",\n  height: \"3rem\"\n};\n\nconst dropdownStyle = {\n  width: \"250px\",\n  zIndex: \"5\",\n  borderLeft: \"5px solid white\"\n};\n\nexport default Sidebar;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\router\\Routes.jsx",["832"],"import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport PersonalInfo from \"../EmpPresonal/PersonalInfo.jsx\";\nimport Education from \"../EmpEducation/Education.jsx\";\nimport FamilyInfo from \"../EmpFamily/FamilyInfo.jsx\";\nimport WorkExperience from \"../EmpWorkExp/WorkExperience.jsx\";\nimport LeaveApplicationEmp from \"../EmpLeave/LeaveApplicationEmp.jsx\";\n// import NotFound404 from \"../../Pages/PageNot/NotFound404.jsx\";\nimport EmployeeNewTask from \"../EmployeeTaskManagement/EmployeeNewTask.jsx\";\nimport EmployeeActiveTask from \"../EmployeeTaskManagement/EmployeeActiveTask.jsx\";\nimport EmployeeCompleteTask from \"../EmployeeTaskManagement/EmployeeCompleteTask.jsx\";\nimport EmployeeRejectTask from \"../EmployeeTaskManagement/EmployeeRejectTask.jsx\";\nimport Attendance from \"../attendance/Attendance.jsx\";\nimport AttendanceList from \"../attendance/AttendanceList.jsx\";\nimport EmpDash from \"../Dashboard/EmpDash.jsx\";\nimport LeaveApplicationEmpTable from \"../EmpLeave/LeaveApplicationEmp.jsx\";\n// import DepartmentChart from \"../../../Pages/Chart/DepartmentChart\";\nimport DashContainer from \"../../DashContainer.jsx\";\nimport SelfAttendance from \"../attendance/SelfAttendance.jsx\";\nimport DepartmentChart from \"../Dashboard/EmpChart.jsx/DepartmentChart.jsx\";\nimport UpcomingBirthdays from \"../Dashboard/CountData/UpcomingBirthdays.jsx\";\nimport Notification from \"../Notification/Notification.jsx\";\nconst RouterContent = ({ data }) => {\n  return (\n    // <DashContainer>\n    <div\n      style={{ height: \"100%\", width: \"100%\", overflow: \"auto\" }}\n      className=\"empSidebar d-flex flex-column\"\n    >\n      <Route path=\"/employee/dashboard\" exact component={EmpDash} />\n      <Route\n        exact\n        path=\"/employee/:id/personal-info\"\n        render={(props) => <PersonalInfo data={data} back={false} />}\n      />\n      <Route\n        exact\n        path=\"/employee/:id/education\"\n        render={(props) => <Education data={data} back={false} />}\n      />\n      <Route\n        exact\n        path=\"/employee/:id/family-info\"\n        render={(props) => <FamilyInfo data={data} back={false} />}\n      />\n      <Route\n        exact\n        path=\"/employee/:id/work-experience\"\n        render={(props) => <WorkExperience data={data} back={false} />}\n      />\n      <Route\n        exact\n        path=\"/employee/:id/leave-application-emp\"\n        render={(props) => <LeaveApplicationEmp data={data} />}\n      />\n      <Route\n        exact\n        path=\"/employee/leaveApplication\"\n        render={(props) => <LeaveApplicationEmpTable data={data} />}\n      />\n      <Route\n        exact\n        path=\"/employee/:id/leave-application-emp\"\n        render={(props) => <LeaveApplicationEmp data={data} />}\n      />\n      <Route\n        exact\n        path=\"/employee/:id/attenDance\"\n        render={(props) => <Attendance data={data} />}\n      />\n      <Route\n        exact\n        path=\"/employee/:id/attendanceList\"\n        render={(props) => <AttendanceList data={data} />}\n      />\n      <Route\n        exact\n        path=\"/employee/:id/departmentchart\"\n        render={(props) => <DepartmentChart data={data} />}\n      />\n      <Route path=\"/employee/newTask\" exact component={EmployeeNewTask} />\n      <Route path=\"/employee/activeTask\" exact component={EmployeeActiveTask} />\n      <Route\n        path=\"/employee/taskcomplete\"\n        exact\n        component={EmployeeCompleteTask}\n      />\n      <Route path=\"/employee/taskreject\" exact component={EmployeeRejectTask} />\n      <Route\n        path=\"/employee/:id/selfAtteend\"\n        exact\n        component={SelfAttendance}\n      />\n      <Route\n        path=\"/employee/:id/birthDay\"\n        exact\n        component={UpcomingBirthdays}\n      />\n       <Route\n        path=\"/employee/notification\"\n        exact\n        component={Notification}\n      />\n      \n    </div>\n    // </DashContainer>\n  );\n};\n\nexport default RouterContent;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminPortal.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\InnerDashContainer.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminProjectBid.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\LeaveApplicationHR.jsx",["833","834"],"import React, { useState,useContext } from \"react\";\nimport axios from \"axios\";\nimport LeaveApplicationHRTable from \"./LeaveApplicationHRTable.jsx\";\nimport LeaveApplicationHRFormEdit from \"./LeaveApplicationHRFormEdit.jsx\";\nimport \"./LeaveApplicationHR.css\";\nimport { AttendanceContext } from \"../../Context/AttendanceContext/AttendanceContext.js\";\nimport {v4 as uuid} from \"uuid\";\nconst LeaveApplicationHR = (props) => {\n  const [table, setTable] = useState(true);\n  const [editForm, setEditForm] = useState(false);\n  const [editData, setEditData] = useState({});\n  const {socket} = useContext(AttendanceContext);\n  const email = localStorage.getItem(\"Email\");\n  const handleLeaveApplicationHRSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"id\", event.target[0].value, event.target[1].value);\n    setTable(true);\n\n    let body = {\n      Leavetype: event.target[0].value,\n      FromDate: event.target[1].value,\n      ToDate: event.target[2].value,\n      Status: event.target[3].value,\n      Reasonforleave: event.target[4].value\n    };\n    axios\n      .post(\n        \"http://localhost:4000/api/leave-application-hr/\" + props.data[\"_id\"],\n        body,\n        {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        }\n      )\n      .then((res) => {\n        setTable(false);\n        setTable(true);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const handleAddLeaveApplicationHR = () => {\n    console.log(\"clicked1\");\n    setTable(false);\n  };\n\n  const handleEditLeaveApplicationHR = (e) => {\n    console.log(e);\n    console.log(\"clicked6\");\n    setEditForm(true);\n    setEditData(e);\n    // Assuming setEditFormGender is not used in the rest of your component\n    // setEditFormGender(e[\"Gender\"]);\n  };\n\n  const handleFormClose = () => {\n    console.log(\"clicked1\");\n    setTable(true);\n  };\n\n  const handleEditFormClose = () => {\n    console.log(\"clicked5\");\n    setEditForm(false);\n  };\n\n  const handleLeaveApplicationHREditUpdate = (info, newInfo) => {\n    newInfo.preventDefault();\n    console.log(\"zero data\", newInfo.target[0].value);\n    let body = {\n      Status: newInfo.target[3].value\n    };\n    console.log(\"update\", body);\n    axios\n      .put(\n        \"http://localhost:4000/api/leave-application-hr/\" + info[\"_id\"],\n        body,\n        {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        }\n      )\n      .then((res) => {\n        setTable(false);\n        setTable(true);\n        const taskId = uuid();\n        let leaveStatus = \"\";\n        if(body.Status===\"2\"){\n          leaveStatus = \"Approved\"\n        }else if(body.Status===\"3\"){\n          leaveStatus = \"Rejected\"\n        }\n        const data = {\n          taskId,\n          employeeEmail:info.employee[0].Email,\n          managerEmail:info.managerEmail,\n          message: `${info.employee[0].Email} Leave request ${leaveStatus} by ${email}`,\n          status: \"unseen\",\n          path: \"leaveApplication\"\n        }\n        console.log(data)\n        socket.emit(\"leaveHrStatusNotification\", data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n    setEditForm(false);\n  };\n\n  return (\n    <React.Fragment>\n      {table ? (\n        editForm ? (\n          <LeaveApplicationHRFormEdit\n            onLeaveApplicationHREditUpdate={handleLeaveApplicationHREditUpdate}\n            onFormEditClose={handleEditFormClose}\n            editData={editData}\n          />\n        ) : (\n          <LeaveApplicationHRTable\n            onAddLeaveApplicationHR={handleAddLeaveApplicationHR}\n            onEditLeaveApplicationHR={handleEditLeaveApplicationHR}\n            data={props.data}\n          />\n        )\n      ) : (\n        <div></div>\n        // Uncomment the following code if needed\n        // <LeaveApplicationHRForm\n        //   onLeaveApplicationHRSubmit={handleLeaveApplicationHRSubmit}\n        //   onFormClose={handleFormClose}\n        //   onGenderChange={handleAddFormGenderChange}\n        // />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default LeaveApplicationHR;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\Role.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Dashboard\\AdminDash.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\Position.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\Department.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Salary\\Salary.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\AddEmployee\\Employee.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\AddEmployee\\EmployeeTable.jsx",["835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856"],"\nimport React, { useState, useEffect } from \"react\";\nimport { LuSearch } from \"react-icons/lu\";\nimport { LiaPhoneSolid } from \"react-icons/lia\";\nimport \"./EmployeeTable.css\";\n\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTrash,\n  faEdit,\n  faInfoCircle\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BsFillFileEarmarkPdfFill } from \"react-icons/bs\";\nimport { IoMdInformationCircleOutline } from \"react-icons/io\";\nimport { FaFilePdf, FaFilter, FaRegEdit } from \"react-icons/fa\";\nimport { MdDeleteForever, MdOutlineEmail } from \"react-icons/md\";\nimport { SiMinutemailer } from \"react-icons/si\";\nimport { TbPhoneCalling } from \"react-icons/tb\";\nimport { FcNumericalSorting12 } from \"react-icons/fc\";\nimport { FcNumericalSorting21 } from \"react-icons/fc\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\n// *************csv & pdf **************//\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\n// import { Link } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { FiSearch } from \"react-icons/fi\";\n// *************csv & pdf **************//\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nconst AdminEmployeeTable = (props) => {\n  const [employeeData, setEmployeeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [rowData, setRowData] = useState([]);\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [isIdFilterActive, setIsIdFilterActive] = useState(false);\n  const [isIdSortAscending, setIsIdSortAscending] = useState(true);\n  const [upcomingBirthdays, setUpcomingBirthdays] = useState([]);\n  const [selectedFilter, setSelectedFilter] = useState(\"\");\n  const [activeProfile, setActiveProfile] = useState(null);\n\n  const loadEmployeeData = () => {\n    axios\n      .get(\"http://localhost:4000/api/employee\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        // Ensure that response.data is an array\n        if (Array.isArray(response.data)) {\n          setEmployeeData(response.data);\n          setLoading(false);\n\n          // Clear the state arrays\n          setRowData([]);\n\n          response.data.forEach((data) => {\n            let temp = {\n              data,\n              Email: data[\"Email\"],\n              Password: data[\"Password\"],\n              Account:\n                data[\"Account\"] === 1\n                  ? \"Admin\"\n                  : data[\"Account\"] === 2\n                  ? \"HR\"\n                  : data[\"Account\"] === 3\n                  ? \"Employee\"\n                  : data[\"Account\"] === 4\n                  ? \"Manager\"\n                  : \"\",\n\n              RoleName: data[\"role\"][0] ? data[\"role\"][0][\"RoleName\"] : \"\",\n              FirstName: data[\"FirstName\"],\n              MiddleName: data[\"MiddleName\"],\n              LastName: data[\"LastName\"],\n              DOB: data[\"DOB\"].slice(0, 10),\n              ContactNo: data[\"ContactNo\"],\n              // EmployeeCode: data[\"EmployeeCode\"],\n              empID: data[\"empID\"],\n              DepartmentName: data[\"department\"][0]\n                ? data[\"department\"][0][\"DepartmentName\"]\n                : \"\",\n              PositionName: data[\"position\"][0]\n                ? data[\"position\"][0][\"PositionName\"]\n                : \"\",\n              DateOfJoining: data[\"DateOfJoining\"].slice(0, 10)\n            };\n\n            // Use set function to update state\n            setRowData((prevData) => [...prevData, temp]);\n          });\n        } else {\n          console.error(\"Data received is not an array:\", response.data);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const onEmployeeDelete = (e) => {\n    if (window.confirm(\"Are you sure to delete this record? \")) {\n      axios\n        .delete(`http://localhost:4000/api/employee/${e}`, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then(() => {\n          loadEmployeeData();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const exportToPDF = () => {\n    window.confirm(\"Are you sure to download Employee record? \");\n    const doc = new jsPDF({\n      orientation: \"landscape\",\n      unit: \"mm\",\n      format: [297, 210]\n    });\n\n    doc.setFontSize(18);\n    doc.text(\"Employee Details\", 297 / 2, 15, \"center\");\n    const headers = [\n      \"Emp Id\",\n      \"Email\",\n      \"Account Access\",\n      \"First Name\",\n      \"Last Name\",\n      \"DOB\",\n      \"ContactNo\",\n      \"Role\",\n      \"Position\",\n      \"Department\",\n      \"D.O.J\"\n    ];\n    const data = rowData.map((row) => [\n      row.empID,\n      row.Email,\n      row.Account,\n      row.FirstName,\n      row.LastName,\n      row.DOB,\n      row.ContactNo,\n      row.RoleName,\n      row.PositionName,\n      row.DepartmentName,\n      row.DateOfJoining,\n      \"\"\n    ]);\n    doc.setFontSize(12);\n    doc.autoTable({\n      head: [headers],\n      body: data,\n      startY: 25\n    });\n\n    doc.save(\"employee_data.pdf \");\n  };\n\n  const renderInfoButton = (params) => {\n    if (params.data && params.data.data) {\n      return (\n        <div>\n          <FontAwesomeIcon\n            icon={faInfoCircle}\n            onClick={() => props.onEmpInfo(params.data.data)}\n          />\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const renderButton = (params) => {\n    if (params.data && params.data.data && params.data.data[\"_id\"]) {\n      return (\n        <FontAwesomeIcon\n          icon={faTrash}\n          onClick={() => onEmployeeDelete(params.data.data[\"_id\"])}\n        />\n      );\n    }\n    return null;\n  };\n\n  const renderEditButton = (params) => {\n    if (params.data && params.data.data) {\n      return (\n        <FontAwesomeIcon\n          icon={faEdit}\n          onClick={() => props.onEditEmployee(params.data.data)}\n        />\n      );\n    }\n    return null;\n  };\n\n  const getBackgroundColor = (accountType) => {\n    switch (accountType) {\n      case \"Admin\":\n        return \"#1D267D\";\n      case \"HR\":\n        return \"#1D267D\";\n      case \"Employee\":\n        return \"#1D267D\";\n      case \"Manager\":\n        return \"#1D267D\";\n      default:\n        return \"#1D267D\";\n    }\n  };\n\n  const handleSearchInputChange = (event) => {\n    setSearchInput(event.target.value);\n  };\n\n  const handleToggleIdSort = () => {\n    setIsIdSortAscending(!isIdSortAscending);\n  };\n\n  const sortById = (a, b) => {\n    const idA = a.empID.toLowerCase();\n    const idB = b.empID.toLowerCase();\n\n    if (isIdSortAscending) {\n      return idA.localeCompare(idB);\n    } else {\n      return idB.localeCompare(idA);\n    }\n  };\n\n  useEffect(() => {\n    loadEmployeeData();\n  }, []);\n\n  const calculateUpcomingBirthdays = () => {\n    const today = new Date();\n    const upcomingBirthdaysData = rowData.filter((employee) => {\n      const dob = new Date(employee.DOB);\n      dob.setFullYear(today.getFullYear());\n\n      // Check if the upcoming birthday is within the next 7 days\n      const timeDiff = dob - today;\n      const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));\n      return daysDiff >= 0 && daysDiff <= 7;\n    });\n\n    setUpcomingBirthdays(upcomingBirthdaysData);\n  };\n\n  useEffect(() => {\n    calculateUpcomingBirthdays();\n  }, [rowData]);\n\n  let filteredData = rowData.filter((item) => {\n    const isMatchingId = isIdFilterActive\n      ? item.empID.toLowerCase() === searchInput.toLowerCase()\n      : true;\n\n    const isMatchingFirstName = item.FirstName.toLowerCase().includes(\n      searchInput.toLowerCase()\n    );\n\n    return isMatchingId && isMatchingFirstName;\n  });\n\n  filteredData = filteredData.sort(sortById);\n\n  // Calculate the total length for each status\n  const allCount = filteredData.filter((data) => data.Account === \"\").length;\n  const adminCount = filteredData.filter(\n    (data) => data.Account === \"Admin\"\n  ).length;\n  const hrCount = filteredData.filter((data) => data.Account === \"HR\").length;\n  const managerCount = filteredData.filter(\n    (data) => data.Account === \"Manager\"\n  ).length;\n  const employeeCount = filteredData.filter(\n    (data) => data.Account === \"Employee\"\n  ).length;\n\n  return (\n    <div className=\"py-0\">\n      <div\n        style={{\n          position: \"sticky\",\n          top: \"-1rem\",\n          zIndex: \"1\",\n          backgroundColor: \"white\"\n        }}\n        className=\"my-auto shadow-sm mb-3\"\n      >\n        <div className=\"d-flex justify-between py-3 container\">\n          <div className=\"my-auto\">\n            <h4 className=\"fw-bolder d-flex text-dark gap-0\">\n              Employees\n              <span className=\"text-primary my-auto fs-6 mx-2\">\n                ({rowData.length})\n              </span>\n            </h4>\n          </div>\n          <div className=\"d-flex my-auto gap-2\">\n            <button\n              style={{\n                outline: \"none\",\n                border: \"none\",\n                backgroundColor: \"transparent\"\n              }}\n              className=\"d-flex btn justify-center shadow-sm text-danger aline-center gap-2\"\n              onClick={exportToPDF}\n            >\n              <FaFilePdf />\n              <p className=\"my-auto text-muted fw-bold \">Export PDF</p>\n            </button>\n            <div style={{ position: \"relative\" }}>\n              <span\n                onMouseEnter={() => setActiveProfile(\"name\")}\n                onMouseLeave={() => setActiveProfile(null)}\n                className=\"btn shadow-sm text-primary\"\n              >\n                <FaFilter />\n                <div\n                  style={{\n                    position: \"absolute\",\n                    zIndex: \"1\",\n                    right: \"0\",\n                    top: \"95%\",\n                    width: \"130px\",\n                    display: activeProfile === \"name\" ? \"flex\" : \"none\"\n                  }}\n                  className=\"bg-white fw-bold rounded-3 px-2 shadow flex-column\"\n                >\n                  <div\n                    onClick={() => setSelectedFilter(\"\")}\n                    style={{ cursor: \"pointer\" }}\n                    className=\"d-flex  flex-nowrap justify-content-between\"\n                  >\n                    ALL <span>({rowData.length})</span>\n                  </div>\n                  <div\n                    onClick={() => setSelectedFilter(\"Admin\")}\n                    style={{ cursor: \"pointer\" }}\n                    className=\"d-flex flex-nowrap justify-content-between\"\n                  >\n                    ADMIN <span>({adminCount})</span>\n                  </div>\n                  <div\n                    onClick={() => setSelectedFilter(\"HR\")}\n                    style={{ cursor: \"pointer\" }}\n                    className=\"d-flex flex-nowrap justify-content-between\"\n                  >\n                    HR <span>({hrCount})</span>\n                  </div>\n                  <div\n                    onClick={() => setSelectedFilter(\"Manager\")}\n                    style={{ cursor: \"pointer\" }}\n                    className=\"d-flex flex-nowrap justify-content-between\"\n                  >\n                    MANAGER <span>({managerCount})</span>\n                  </div>\n                  <div\n                    onClick={() => setSelectedFilter(\"Employee\")}\n                    style={{ cursor: \"pointer\" }}\n                    className=\"d-flex flex-nowrap justify-content-between\"\n                  >\n                    EMPLOYEE <span>({employeeCount})</span>\n                  </div>\n                </div>\n              </span>\n            </div>\n            <button\n              onClick={handleToggleIdSort}\n              className=\"btn shadow-sm py-0 fs-5 fw-bold\"\n            >\n              {isIdSortAscending ? (\n                <FcNumericalSorting21 />\n              ) : (\n                <FcNumericalSorting12 />\n              )}\n            </button>\n            <button\n              className=\"btn btn-success m-auto fw-bold py-1 d-flex\"\n              onClick={props.onAddEmployee}\n            >\n              +Add Employee\n            </button>\n          </div>\n        </div>\n        <div className=\"d-flex gap-2 justify-content-between py-3 container\">\n          <div className=\"searchholder p-0 d-flex border-0 position-relative\">\n            <input\n              style={{\n                height: \"100%\",\n                width: \"100%\",\n                paddingLeft: \"15%\"\n              }}\n              className=\"form-control border border-primary border-2\"\n              type=\"text\"\n              placeholder=\"Search by name\"\n              value={searchInput}\n              onChange={handleSearchInputChange}\n            />\n            <LuSearch\n              style={{ position: \"absolute\", top: \"30%\", left: \"5%\" }}\n            />\n          </div>\n        </div>\n      </div>\n      <div id=\"clear-both\" />\n      {!loading ? (\n        <div className=\"d-flex flex-wrap  gap-3 container\">\n          {filteredData\n            .filter((items) =>\n              selectedFilter ? items.Account === selectedFilter : true\n            )\n\n            .map((items, index) => {\n              return (\n                <div\n                  style={{\n                    width: \"fit-content\",\n                    minWidth: \"245px\",\n                    maxWidth: \"270px\"\n                  }}\n                >\n                  <div className=\" p-3 shadow rounded-4 d-flex flex-column gap-2\">\n                    <div\n                      className=\"rounded-4  d-flex flex-column py-2 text-center jusctify-content-center\"\n                      style={{\n                        backgroundColor: \"rgba(0, 0, 92, .1)\",\n                        boxShadow: \"0 0 20px 1px #F1EAFF inset\",\n                        position: \"relative\"\n                      }}\n                    >\n                      <button\n                        style={{\n                          position: \"absolute\",\n                          top: \"5%\",\n                          right: \"5% \"\n                        }}\n                        onClick={() => props.onEmpInfo(items.data)}\n                        className=\" btn p-0 text-primary cursor-pointer\"\n                        to=\"\"\n                        title=\"Info\"\n                      >\n                        <IoMdInformationCircleOutline className=\"fs-4\" />\n                      </button>\n                      <div\n                        style={{\n                          height: \"80px\",\n                          width: \"80px\",\n                          overflow: \"hidden\",\n                          borderRadius: \"50%\",\n                          border: \"3px solid #4477CE\"\n                        }}\n                        className=\"profile-image bg-white  mx-auto\"\n                      >\n                        <img\n                          style={{\n                            height: \"100%\",\n                            width: \"100%\",\n                            overflow: \"hidden\",\n                            borderRadius: \"50%\",\n                            objectFit: \"cover\",\n                            padding: \".2rem\"\n                          }}\n                          className=\"\"\n                          src={\n                            items?.data?.profile?.image_url\n                              ? items?.data?.profile?.image_url\n                              : \"https://a.storyblok.com/f/191576/1200x800/215e59568f/round_profil_picture_after_.webp\"\n                          }\n                          alt=\"\"\n                        />\n                      </div>\n                      <p className=\"m-0 text-capitalize fw-bold\">\n                        {items.FirstName} {items.LastName}\n                      </p>\n                      <p className=\"m-0 text-capitalize\">\n                        {items.PositionName}\n                      </p>\n                      <p\n                        style={{ width: \"fit-content \" }}\n                        className=\"btn btn-outline-success my-1 mx-auto p-0 px-2 fw-bold rounded-5\"\n                      >\n                        {items.Account}\n                      </p>\n                    </div>\n                    <a\n                      target=\"_blank\"\n                      href={`mailto:${items.Email}`}\n                      style={{\n                        color: \"#00005C\",\n                        textDecoration: \"none\",\n                        cursor: \"pointer\"\n                      }}\n                      className=\"m-0\"\n                    >\n                      <MdOutlineEmail /> {items.Email}\n                    </a>\n                    <a\n                      target=\"_blank\"\n                      href={`tel:${items.ContactNo}`}\n                      style={{\n                        color: \"#00005C\",\n                        textDecoration: \"none\",\n                        cursor: \"pointer\"\n                      }}\n                      className=\"m-0\"\n                    >\n                      <LiaPhoneSolid /> {items.ContactNo}\n                    </a>\n                  </div>\n                </div>\n              );\n            })}\n        </div>\n      ) : (\n        <div id=\"loading-bar\">\n          <RingLoader\n            css={override}\n            sizeUnit={\"px\"}\n            size={50}\n            color={\"#0000ff\"}\n            loading={true}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdminEmployeeTable;\n\n\n\n// import React, { useState, useEffect } from \"react\";\n\n// import axios from \"axios\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import {\n//   faTrash,\n//   faEdit,\n//   faInfoCircle\n// } from \"@fortawesome/free-solid-svg-icons\";\n// import { RingLoader } from \"react-spinners\";\n// import { css } from \"@emotion/core\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import { BsFillFileEarmarkPdfFill } from \"react-icons/bs\";\n// import { IoMdInformationCircleOutline } from \"react-icons/io\";\n// import { FaRegEdit } from \"react-icons/fa\";\n// import { MdDeleteForever } from \"react-icons/md\";\n// import { SiMinutemailer } from \"react-icons/si\";\n// import { TbPhoneCalling } from \"react-icons/tb\";\n// import { FcNumericalSorting12 } from \"react-icons/fc\";\n// import { FcNumericalSorting21 } from \"react-icons/fc\";\n// import { Form, Button, Col, Row } from \"react-bootstrap\";\n// import { Link } from \"react-router-dom\";\n\n// // *************csv & pdf **************//\n// import jsPDF from \"jspdf\";\n// import \"jspdf-autotable\";\n// // import { Link } from \"react-router-dom/cjs/react-router-dom.min\";\n// import { FiSearch } from \"react-icons/fi\";\n// // *************csv & pdf **************//\n\n// const override = css`\n//   display: block;\n//   margin: 0 auto;\n//   margin-top: 45px;\n//   border-color: red;\n// `;\n\n// const AdminEmployeeTable = (props) => {\n//   const [employeeData, setEmployeeData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [rowData, setRowData] = useState([]);\n//   const [searchInput, setSearchInput] = useState(\"\");\n//   const [isIdFilterActive, setIsIdFilterActive] = useState(false);\n//   const [isIdSortAscending, setIsIdSortAscending] = useState(true);\n//   const [upcomingBirthdays, setUpcomingBirthdays] = useState([]);\n//   const [selectedFilter, setSelectedFilter] = useState(\"\");\n\n//   const loadEmployeeData = () => {\n//     axios\n//       .get(\"http://localhost:4000/api/employee\", {\n//         headers: {\n//           authorization: localStorage.getItem(\"token\") || \"\"\n//         }\n//       })\n//       .then((response) => {\n//         // Ensure that response.data is an array\n//         if (Array.isArray(response.data)) {\n//           setEmployeeData(response.data);\n//           setLoading(false);\n\n//           // Clear the state arrays\n//           setRowData([]);\n\n//           response.data.forEach((data) => {\n//             let temp = {\n//               data,\n//               Email: data[\"Email\"],\n//               Password: data[\"Password\"],\n//               Account:\n//                 data[\"Account\"] === 1\n//                   ? \"Admin\"\n//                   : data[\"Account\"] === 2\n//                   ? \"HR\"\n//                   : data[\"Account\"] === 3\n//                   ? \"Employee\"\n//                   : data[\"Account\"] === 4\n//                   ? \"Manager\"\n//                   : \"\",\n\n//               RoleName: data[\"role\"][0] ? data[\"role\"][0][\"RoleName\"] : \"\",\n//               FirstName: data[\"FirstName\"],\n//               MiddleName: data[\"MiddleName\"],\n//               LastName: data[\"LastName\"],\n//               DOB: data[\"DOB\"].slice(0, 10),\n//               ContactNo: data[\"ContactNo\"],\n//               // EmployeeCode: data[\"EmployeeCode\"],\n//               empID: data[\"empID\"],\n//               DepartmentName: data[\"department\"][0]\n//                 ? data[\"department\"][0][\"DepartmentName\"]\n//                 : \"\",\n//               PositionName: data[\"position\"][0]\n//                 ? data[\"position\"][0][\"PositionName\"]\n//                 : \"\",\n//               DateOfJoining: data[\"DateOfJoining\"].slice(0, 10)\n//             };\n\n//             // Use set function to update state\n//             setRowData((prevData) => [...prevData, temp]);\n//           });\n//         } else {\n//           console.error(\"Data received is not an array:\", response.data);\n//         }\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n//   };\n\n//   const onEmployeeDelete = (e) => {\n//     if (window.confirm(\"Are you sure to delete this record? \")) {\n//       axios\n//         .delete(`http://localhost:4000/api/employee/${e}`, {\n//           headers: {\n//             authorization: localStorage.getItem(\"token\") || \"\"\n//           }\n//         })\n//         .then(() => {\n//           loadEmployeeData();\n//         })\n//         .catch((err) => {\n//           console.log(err);\n//         });\n//     }\n//   };\n\n//   const exportToPDF = () => {\n//     window.confirm(\"Are you sure to download Employee record? \");\n//     const doc = new jsPDF({\n//       orientation: \"landscape\",\n//       unit: \"mm\",\n//       format: [297, 210]\n//     });\n\n//     doc.setFontSize(18);\n//     doc.text(\"Employee Details\", 297 / 2, 15, \"center\");\n//     const headers = [\n//       \"Emp Id\",\n//       \"Email\",\n//       \"Account Access\",\n//       \"First Name\",\n//       \"Last Name\",\n//       \"DOB\",\n//       \"ContactNo\",\n//       \"Role\",\n//       \"Position\",\n//       \"Department\",\n//       \"D.O.J\"\n//     ];\n//     const data = rowData.map((row) => [\n//       row.empID,\n//       row.Email,\n//       row.Account,\n//       row.FirstName,\n//       row.LastName,\n//       row.DOB,\n//       row.ContactNo,\n//       row.RoleName,\n//       row.PositionName,\n//       row.DepartmentName,\n//       row.DateOfJoining,\n//       \"\"\n//     ]);\n//     doc.setFontSize(12);\n//     doc.autoTable({\n//       head: [headers],\n//       body: data,\n//       startY: 25\n//     });\n\n//     doc.save(\"employee_data.pdf \");\n//   };\n\n//   const renderInfoButton = (params) => {\n//     if (params.data && params.data.data) {\n//       return (\n//         <div>\n//           <FontAwesomeIcon\n//             icon={faInfoCircle}\n//             onClick={() => props.onEmpInfo(params.data.data)}\n//           />\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   const renderButton = (params) => {\n//     if (params.data && params.data.data && params.data.data[\"_id\"]) {\n//       return (\n//         <FontAwesomeIcon\n//           icon={faTrash}\n//           onClick={() => onEmployeeDelete(params.data.data[\"_id\"])}\n//         />\n//       );\n//     }\n//     return null;\n//   };\n\n//   const renderEditButton = (params) => {\n//     if (params.data && params.data.data) {\n//       return (\n//         <FontAwesomeIcon\n//           icon={faEdit}\n//           onClick={() => props.onEditEmployee(params.data.data)}\n//         />\n//       );\n//     }\n//     return null;\n//   };\n\n//   const getBackgroundColor = (accountType) => {\n//     switch (accountType) {\n//       case \"Admin\":\n//         return \"#8EAC50\";\n//       case \"HR\":\n//         return \"#0079FF\";\n//       case \"Employee\":\n//         return \"purple\";\n//       case \"Manager\":\n//         return \"red\";\n//       default:\n//         return \"#FF9B50\";\n//     }\n//   };\n\n//   const handleSearchInputChange = (event) => {\n//     setSearchInput(event.target.value);\n//   };\n\n//   const handleToggleIdSort = () => {\n//     setIsIdSortAscending(!isIdSortAscending);\n//   };\n\n//   const sortById = (a, b) => {\n//     const idA = a.empID.toLowerCase();\n//     const idB = b.empID.toLowerCase();\n\n//     if (isIdSortAscending) {\n//       return idA.localeCompare(idB);\n//     } else {\n//       return idB.localeCompare(idA);\n//     }\n//   };\n\n//   useEffect(() => {\n//     loadEmployeeData();\n//   }, []);\n\n//   const calculateUpcomingBirthdays = () => {\n//     const today = new Date();\n//     const upcomingBirthdaysData = rowData.filter((employee) => {\n//       const dob = new Date(employee.DOB);\n//       dob.setFullYear(today.getFullYear());\n\n//       // Check if the upcoming birthday is within the next 7 days\n//       const timeDiff = dob - today;\n//       const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));\n//       return daysDiff >= 0 && daysDiff <= 7;\n//     });\n\n//     setUpcomingBirthdays(upcomingBirthdaysData);\n//   };\n\n//   useEffect(() => {\n//     calculateUpcomingBirthdays();\n//   }, [rowData]);\n\n//   let filteredData = rowData.filter((item) => {\n//     const isMatchingId = isIdFilterActive\n//       ? item.empID.toLowerCase() === searchInput.toLowerCase()\n//       : true;\n\n//     const isMatchingFirstName = item.FirstName.toLowerCase().includes(\n//       searchInput.toLowerCase()\n//     );\n\n//     return isMatchingId && isMatchingFirstName;\n//   });\n\n//   filteredData = filteredData.sort(sortById);\n\n//   // Calculate the total length for each status\n//   const allCount = filteredData.filter((data) => data.Account === \"\").length;\n//   const adminCount = filteredData.filter(\n//     (data) => data.Account === \"Admin\"\n//   ).length;\n//   const hrCount = filteredData.filter((data) => data.Account === \"HR\").length;\n//   const managerCount = filteredData.filter(\n//     (data) => data.Account === \"Manager\"\n//   ).length;\n//   const employeeCount = filteredData.filter(\n//     (data) => data.Account === \"Employee\"\n//   ).length;\n\n//   return (\n//     <div className=\"p-4\">\n//       <div className=\"row my-auto\">\n//         <div className=\"d-flex justify-between p-2\">\n//           <div>\n//             <h4 className=\"fw-bolder d-flex text-muted gap-0\">\n//               Employees{\" \"}\n//               <span className=\"text-primary mx-2\">({rowData.length})</span>\n//               <button\n//                 style={{\n//                   outline: \"none\",\n//                   border: \"none\",\n//                   backgroundColor: \"transparent\",\n//                   scale: \".7\"\n//                 }}\n//                 className=\"d-flex justify-center  aline-center gap-2\"\n//                 onClick={exportToPDF}\n//               >\n//                 <BsFillFileEarmarkPdfFill className=\"text-danger m-auto\" />\n//                 <p className=\"my-auto text-muted fw-bold \">export pdf</p>\n//               </button>\n//             </h4>\n//             <p style={{ opacity: \"60%\" }} className=\"text-muted\">\n//               All the employees of the company are listed here\n//             </p>\n//           </div>\n//           <div className=\"d-flex my-auto gap-2\">\n//             <button\n//               className=\"btn rounded-5 btn-success m-auto fw-bold py-1 d-flex\"\n//               onClick={props.onAddEmployee}\n//             >\n//               + Add new employees\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//       <div className=\"d-flex my-auto gap-2 justify-content-between\">\n//         <div className=\"searchholder border-0 col-3 position-relative\">\n//           <input\n//             style={{\n//               height: \"100%\",\n//               width: \"100%\",\n//               padding: \".5rem 1rem\",\n//               boxShadow: \"-2px 2px 5px rgba(211, 205, 205, 0.692)\"\n//             }}\n//             className=\"form-control rounded-5\"\n//             type=\"text\"\n//             placeholder=\"Search by name\"\n//             value={searchInput}\n//             onChange={handleSearchInputChange}\n//           />\n//         </div>\n//         <div\n//           onClick={() => setSelectedFilter(\"\")}\n//           className=\"btn fw-bold text-muted my-auto shadow rounded-5\"\n//         >\n//           ALL ({rowData.length})\n//         </div>\n//         <div\n//           onClick={() => setSelectedFilter(\"Admin\")}\n//           style={{ backgroundColor: \"#8EAC50\" }}\n//           className=\"btn fw-bold text-white my-auto shadow rounded-5\"\n//         >\n//           ADMIN ({adminCount})\n//         </div>\n//         <div\n//           onClick={() => setSelectedFilter(\"HR\")}\n//           style={{ backgroundColor: \"#0079FF\" }}\n//           className=\"btn fw-bold text-white my-auto shadow rounded-5\"\n//         >\n//           HR ({hrCount})\n//         </div>\n//         <div\n//           onClick={() => setSelectedFilter(\"Manager\")}\n//           style={{ backgroundColor: \"red\" }}\n//           className=\"btn fw-bold text-white my-auto shadow rounded-5\"\n//         >\n//           MANAGER ({managerCount})\n//         </div>\n//         <div\n//           onClick={() => setSelectedFilter(\"Employee\")}\n//           style={{ backgroundColor: \"purple\" }}\n//           className=\"btn fw-bold text-white my-auto shadow rounded-5\"\n//         >\n//           EMPLOYEE ({employeeCount})\n//         </div>\n//         <span\n//           style={{ boxShadow: \"-1px 1px 5px rgba(211, 205, 205, 0.692)\" }}\n//           className=\"d-flex gap-4 px-3 rounded-5 d-flex aline-center justify-center\"\n//         >\n//           <b>Sort</b>\n//           <button\n//             className=\"btn fw-bold fs-5 p-0 m-auto\"\n//             onClick={handleToggleIdSort}\n//           >\n//             {isIdSortAscending ? (\n//               <FcNumericalSorting21 />\n//             ) : (\n//               <FcNumericalSorting12 />\n//             )}\n//           </button>\n//         </span>\n//       </div>\n\n//       <div id=\"clear-both\" />\n//       {!loading ? (\n//         <div className=\"employee-card-holder\">\n//           {filteredData\n//             .filter((items) =>\n//               selectedFilter ? items.Account === selectedFilter : true\n//             )\n\n//             .map((items, index) => {\n//               return (\n//                 <div\n//                   key={index}\n//                   style={{\n//                     boxShadow: \"4px 4px 3px rgba(226, 223, 223, 0.608)\",\n//                     border: \"1px solid rgba(226, 223, 223, 0.608) \",\n//                     overflow: \"hidden\",\n//                     maxWidth: \"250px\"\n//                   }}\n//                   className=\"card-top-upper position-relative bg-light text-center px-2 py-3  rounded-3  my-3\"\n//                 >\n//                   <div>\n//                     <div\n//                       style={{\n//                         width: \"fit-content\",\n//                         right: \"7%\",\n//                         top: \"3%\",\n//                         position: \"absolute\",\n//                         color: \"white\",\n//                         zIndex: \"1\",\n//                         cursor: \"pointer\"\n//                       }}\n//                     >\n//                       <button\n//                         onClick={() => props.onEmpInfo(items.data)}\n//                         className=\" btn p-0 text-white\"\n//                         to=\"\"\n//                       >\n//                         <IoMdInformationCircleOutline className=\"fs-4\" />\n//                       </button>\n//                     </div>\n//                   </div>\n//                   <div\n//                     className=\"card-top-upper\"\n//                     style={{\n//                       position: \"absolute\",\n//                       height: \"30%\",\n//                       width: \"100%\",\n//                       background: getBackgroundColor(items.Account),\n//                       top: \"0%\",\n//                       right: \"0\",\n//                       borderRadius: \"0% 0% 50% 50%\",\n//                       opacity: \"80%\"\n//                     }}\n//                   ></div>\n//                   <div\n//                     style={{\n//                       position: \"absolute\",\n//                       bottom: \"0%\",\n//                       display: \"flex\",\n//                       width: \"94%\",\n//                       justifyContent: \"space-between\"\n//                     }}\n//                     className=\"div m-auto\"\n//                   >\n//                     <button\n//                       onClick={() => props.onEditEmployee(items.data)}\n//                       style={{ zIndex: \"1\", cursor: \"pointer\" }}\n//                       className=\"btn\"\n//                     >\n//                       <FaRegEdit className=\"fs-4 text-primary bg-white p-1 rounded-5\" />\n//                     </button>\n//                     <button\n//                       onClick={() => onEmployeeDelete(items.data[\"_id\"])}\n//                       style={{ zIndex: \"1\", cursor: \"pointer\" }}\n//                       className=\"btn\"\n//                     >\n//                       <MdDeleteForever className=\"fs-4 text-danger bg-white p-1 rounded-5\" />\n//                     </button>\n//                   </div>\n//                   <div\n//                     className=\"card-top-lower\"\n//                     style={{\n//                       position: \"absolute\",\n//                       height: \"30%\",\n//                       width: \"100%\",\n//                       background: getBackgroundColor(items.Account),\n//                       bottom: \"0%\",\n//                       right: \"0\",\n//                       borderRadius: \"50% 50% 0% 0% \",\n//                       opacity: \"30%\"\n//                     }}\n//                   ></div>\n//                   <div className=\"row mb-3\">\n//                     <div className=\"col-12 d-flex justify-center aline-center\">\n//                       <div\n//                         style={{\n//                           height: \"90px\",\n//                           width: \"90px\",\n//                           overflow: \"hidden\",\n//                           borderRadius: \"50%\",\n//                           padding: \"2px\"\n//                         }}\n//                         className=\"profile-image bg-white \"\n//                       >\n//                         <img\n//                           style={{\n//                             height: \"100%\",\n//                             width: \"100%\",\n//                             objectFit: \"cover\"\n//                           }}\n//                           className=\"m-auto\"\n//                           src={\n//                             items?.data?.profile?.image_url\n//                               ? items?.data?.profile?.image_url\n//                               : \"https://a.storyblok.com/f/191576/1200x800/215e59568f/round_profil_picture_after_.webp\"\n//                           }\n//                           alt=\"\"\n//                         />\n//                       </div>\n//                     </div>\n//                     <div className=\"col-12 text-start d-flex flex-column gap-0 text-center position-relative\">\n//                       <p\n//                         style={{\n//                           fontSize: \".9rem\",\n//                           width: \"fit-content\"\n//                         }}\n//                         className=\"m-auto my-2 text-uppercase  bg-warning px-2 rounded-5 text-white fw-bold\"\n//                       >\n//                         {items.empID}\n//                       </p>\n//                       <p className=\" w-100 fs-5 m-auto fw-bolder text-uppercase text-primary\">\n//                         {items.FirstName} {items.LastName}\n//                       </p>\n//                       <p className=\" text-uppercase w-100 text-muted m-auto  fw-bold mb-3\">\n//                         {items.PositionName}\n//                       </p>\n//                     </div>\n//                     <div className=\"details d-flex flex-column gap-0\">\n//                       <a\n//                         href={`mailto:${items.Email}`}\n//                         style={{\n//                           textShadow: \"2px 2px 3px gray\",\n//                           cursor: \"pointer\",\n//                           zIndex: \"1\",\n//                           opacity: \"60%\"\n//                         }}\n//                         className=\"m-auto bg-primary px-1 text-decoration-none my-auto d-flex text-white justify-center aline-center rounded-5 d-flex gap-2 aline-center\"\n//                       >\n//                         <SiMinutemailer style={{ height: \"100%\" }} />\n//                         <p\n//                           style={{ transition: \"1s ease\" }}\n//                           className=\"hover_number rounded-5 m-auto\"\n//                         >\n//                           {items.Email}\n//                         </p>\n//                       </a>\n//                       <a\n//                         href={`tel:${items.ContactNo}`}\n//                         style={{\n//                           cursor: \"pointer\",\n//                           zIndex: \"1\",\n//                           opacity: \"100%\"\n//                         }}\n//                         className=\"m-auto mt-1 px-1 bg-white text-decoration-none my-auto d-flex text-muted justify-center aline-center rounded-5 d-flex gap-2 aline-center\"\n//                       >\n//                         <TbPhoneCalling />\n//                         {items.ContactNo}\n//                       </a>\n//                     </div>\n//                   </div>\n//                 </div>\n//               );\n//             })}\n//         </div>\n//       ) : (\n//         <div id=\"loading-bar\">\n//           <RingLoader\n//             css={override}\n//             sizeUnit={\"px\"}\n//             size={50}\n//             color={\"#0000ff\"}\n//             loading={true}\n//           />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AdminEmployeeTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\TaskManagement\\AdminAsignTask.jsx",["857","858","859"],"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { Button, Container, Form } from \"react-bootstrap\";\n// // import { toast } from \"react-toastify\";\n// // import \"react-toastify/dist/ReactToastify.css\";\n\n// const TaskAssign = () => {\n//   const [departmentData, setDepartmentData] = useState([]);\n//   const [endDateError, setEndDateError] = useState(false);\n//   const [newTask, setNewTask] = useState({\n//     Taskname: \"\",\n//     description: \"\",\n//     startDate: \"\",\n//     endDate: \"\",\n//     attachments: null,\n//     managerEmail: \"\",\n//     department: \"\",\n//     comment: \"\"\n//   });\n\n//   const isFormValid = () => {\n//     const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n//     return (\n//       newTask.Taskname.trim() !== \"\" &&\n//       newTask.description.trim() !== \"\" &&\n//       newTask.startDate.trim() !== \"\" &&\n//       newTask.endDate.trim() !== \"\" &&\n//       newTask.managerEmail.trim() !== \"\" &&\n//       emailPattern.test(newTask.managerEmail) &&\n//       newTask.department.trim() !== \"\"\n//     );\n//   };\n\n//   const addTask = async () => {\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:4000/api/tasks\",\n//         newTask\n//       );\n\n//       if (response.status === 201) {\n//         // Reset the form and show a success toast\n//         setNewTask({\n//           Taskname: \"\",\n//           description: \"\",\n//           startDate: \"\",\n//           endDate: \"\",\n//           attachments: null,\n//           managerEmail: \"\",\n//           department: \"\",\n//           comment: \"\"\n//         });\n//         alert(\"Task added successfully!\");\n//       } else {\n//         // Handle the case where the request fails\n//         alert(\"Failed to add task. Please try again.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error adding task:\", error);\n//       alert(\"An unexpected error occurred. Please try again later.\");\n//     }\n//   };\n\n//   // Fetch all tasks on component mount\n//   useEffect(() => {\n//     const fetchTasks = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:4000/api/tasks\");\n//         // Handle the response data as needed (e.g., set it in the component state)\n//         console.log(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching tasks:\", error);\n//         // Handle the error\n//       }\n//     };\n\n//     fetchTasks();\n//   }, []); // Empty dependency array means this effect runs only once on mount\n\n//   const loadDepartmentInfo = () => {\n//     axios\n//       .get(\"http://localhost:4000/api/department\", {\n//         headers: {\n//           authorization: localStorage.getItem(\"token\") || \"\"\n//         }\n//       })\n//       .then((response) => {\n//         setDepartmentData(response.data);\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n//   };\n\n//   useEffect(() => {\n//     loadDepartmentInfo();\n//   }, []); // Empty dependency array means this effect runs only once on mount\n\n//   return (\n//     <div style={{ zIndex: \"1\" }} className=\"p-4 d-flex flex-column \">\n//       <form className=\"row p-0 p-md-3 m-auto\">\n//         <h2 className=\"fw-bold text-muted \"> 🖋️Create New Task</h2>\n//         <p className=\"text-muted\">\n//           You can Create New task and Assign to the manager for the process.\n//         </p>\n//         <div className=\"col-12 mt-5 d-flex flex-column\">\n//           <Form.Group controlId=\"Taskname\">\n//             <Form.Label className=\"fw-bold\">Task Name</Form.Label>\n//             <input\n//               className=\"form-control\"\n//               type=\"text\"\n//               required\n//               placeholder=\"Enter task name\"\n//               value={newTask.Taskname}\n//               onChange={(e) =>\n//                 setNewTask({ ...newTask, Taskname: e.target.value })\n//               }\n//             />\n//           </Form.Group>\n//         </div>\n//         <div className=\"col-12 mt-2 d-flex flex-column\">\n//           <Form.Group controlId=\"description\">\n//             <Form.Label className=\"fw-bold\">Task Description</Form.Label>\n//             <textarea\n//               className=\"form-control\"\n//               required\n//               placeholder=\"Enter task description\"\n//               value={newTask.description}\n//               onChange={(e) =>\n//                 setNewTask({ ...newTask, description: e.target.value })\n//               }\n//             />\n//           </Form.Group>\n//         </div>\n//         <div className=\"col-12 col-md-6 mt-3 d-flex flex-column\">\n//           <Form.Group controlId=\"startDate\">\n//             <Form.Label className=\"fw-bold\">Start Date</Form.Label>\n//             <input\n//               className=\"form-control\"\n//               type=\"date\"\n//               required\n//               value={newTask.startDate}\n//               onChange={(e) => {\n//                 setNewTask({ ...newTask, startDate: e.target.value });\n//                 // Reset the endDateError when StartDate changes\n//                 setEndDateError(false);\n//               }}\n//             />\n//           </Form.Group>\n//         </div>\n//         <div className=\"col-12 col-md-6 mt-3 d-flex flex-column\">\n//           <Form.Group controlId=\"endDate\">\n//             <Form.Label className=\"fw-bold\">End Date</Form.Label>\n//             <input\n//               className=\"form-control\"\n//               type=\"date\"\n//               required\n//               value={newTask.endDate}\n//               onChange={(e) => {\n//                 const selectedEndDate = e.target.value;\n//                 // Check if selectedEndDate is less than StartDate\n//                 if (selectedEndDate < newTask.startDate) {\n//                   setEndDateError(true);\n//                 } else {\n//                   setEndDateError(false);\n//                   setNewTask({ ...newTask, endDate: selectedEndDate });\n//                 }\n//               }}\n//             />\n//           </Form.Group>\n//         </div>\n//         <div className=\"col-12 col-md-3 mt-3 d-flex flex-column\">\n//           <Form.Group className=\"fw-bold\" controlId=\"department\">\n//             <Form.Label>Department</Form.Label>\n//             <Form.Control\n//               as=\"select\"\n//               name=\"department\"\n//               required\n//               value={newTask.department}\n//               onChange={(e) =>\n//                 setNewTask({ ...newTask, department: e.target.value })\n//               }\n//             >\n//               <option value=\"\">Select your option</option>\n//               {departmentData.map((data, index) => (\n//                 <option key={index} value={data.DepartmentName}>\n//                   {data.DepartmentName}\n//                 </option>\n//               ))}\n//             </Form.Control>\n//           </Form.Group>\n//         </div>\n//         <div className=\"col-12 col-md-9 mt-3 d-flex flex-column\">\n//           <Form.Group controlId=\"managerEmail\">\n//             <Form.Label className=\"fw-bold\"> Manager's Email</Form.Label>\n//             <input\n//               className=\"form-control\"\n//               type=\"email\"\n//               required\n//               placeholder=\"Enter manager's email\"\n//               value={newTask.managerEmail}\n//               onChange={(e) =>\n//                 setNewTask({ ...newTask, managerEmail: e.target.value })\n//               }\n//             />\n//           </Form.Group>\n//         </div>\n//         <div>\n//           <Form.Group controlId=\"Attachments\">\n//             <Form.Label className=\"fw-bold mt-3\">Attachments</Form.Label>\n//             <input\n//               className=\"form-control\"\n//               type=\"file\"\n//               multiple\n//               required\n//               onChange={(e) =>\n//                 setNewTask({ ...newTask, attachments: e.target.files })\n//               }\n//             />\n//           </Form.Group>\n//         </div>\n//         <Button\n//           className=\"mt-4 w-100 fw-bold text-white\"\n//           variant=\"info\"\n//           onClick={addTask}\n//           disabled={!isFormValid()}\n//         >\n//           Add Task\n//         </Button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default TaskAssign;\n\n// final filter based department\nimport React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { Button, Container, Form } from \"react-bootstrap\";\nimport { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\nimport { v4 as uuidv4 } from 'uuid';\n// import { toast } from \"react-toastify\";\n// import \"react-toastify/dist/ReactToastify.css\";\n\nconst TaskAssign = () => {\n  const [departmentData, setDepartmentData] = useState([]);\n  const [endDateError, setEndDateError] = useState(false);\n  const [managerData, setManagerData] = useState(null);\n  const {socket} = useContext(AttendanceContext);\nconst email = localStorage.getItem(\"Email\");\nconst taskId = uuidv4();\n  const [newTask, setNewTask] = useState({\n    Taskname: \"\",\n    description: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    attachments: null,\n    managerEmail: \"\",\n    department: \"\",\n    comment: \"\"\n  });\n\n  const isFormValid = () => {\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n    return (\n      newTask.Taskname.trim() !== \"\" &&\n      newTask.description.trim() !== \"\" &&\n      newTask.startDate.trim() !== \"\" &&\n      newTask.endDate.trim() !== \"\" &&\n      newTask.managerEmail.trim() !== \"\" &&\n      emailPattern.test(newTask.managerEmail) &&\n      newTask.department.trim() !== \"\"\n    );\n  };\n  const ManagerDataHandler = () => {\n    if (newTask.department === \"\") return;\n    axios\n      .get(\"http://localhost:4000/api/employee\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((val) => {\n        let mana = val.data.filter((val) => {\n          return (\n            val.Account === 4 &&\n            val.department[0].DepartmentName === newTask.department\n          );\n        });\n        setManagerData(mana);\n      })\n      .catch(console.log(\"hello\"));\n  };\n\n  // const addTask = async () => {\n  //   try {\n  //     const response = await axios.post(\n  //       \"http://localhost:4000/api/tasks\",\n  //       newTask\n  //     );\n\n  //     if (response.status === 201) {\n  //       // Reset the form and show a success toast\n  //       setNewTask({\n  //         Taskname: \"\",\n  //         description: \"\",\n  //         startDate: \"\",\n  //         endDate: \"\",\n  //         attachments: null,\n  //         managerEmail: \"\",\n  //         department: \"\",\n  //         comment: \"\"\n  //       });\n  //       alert(\"Task added successfully!\");\n  //     } else {\n  //       // Handle the case where the request fails\n  //       alert(\"Failed to add task. Please try again.\");\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Error adding task:\", error);\n  //     alert(\"An unexpected error occurred. Please try again later.\");\n  //   }\n  // };\n  const addTask = async () => {\n    let formData = new FormData();\n    formData.append(\"Taskname\", newTask.Taskname);\n    formData.append(\"description\", newTask.description);\n    formData.append(\"startDate\", newTask.startDate);\n    formData.append(\"endDate\", newTask.endDate);\n    formData.append(\"file\", newTask.attachments);\n    formData.append(\"managerEmail\", newTask.managerEmail);\n    formData.append(\"department\", newTask.department);\n    formData.append(\"comment\", newTask.comment);\n    formData.append(\"adminMail\", email);\n    // console.log();\n    const id = localStorage.getItem(\"_id\");\n    axios\n      .post(\"http://localhost:4000/api/tasks\", formData)\n      .then((res) => {\n        console.log(res);\n        const taskNotificationData = {\n          taskId,\n          taskName: newTask.Taskname,\n          senderMail: email,\n          managerEmail: newTask.managerEmail,\n          Account: 4,\n          message: `New task assigned by ${email}`,\n          status: \"unseen\",\n          path: \"newTask\"\n        }\n  \n    socket.emit(\"managerTaskNotification\", taskNotificationData);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  // Fetch all tasks on component mount\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:4000/api/tasks\");\n        // Handle the response data as needed (e.g., set it in the component state)\n        console.log(response.data);\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n        // Handle the error\n      }\n    };\n\n    fetchTasks();\n  }, []); // Empty dependency array means this effect runs only once on mount\n\n  const loadDepartmentInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/department\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        setDepartmentData(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    loadDepartmentInfo();\n  }, []); // Empty dependency array means this effect runs only once on mount\n\n  return (\n    <div style={{ zIndex: \"1\" }} className=\"p-4 d-flex flex-column \">\n      <form className=\"row p-0 p-md-3 m-auto\">\n        <h2 className=\"fw-bold text-muted \"> 🖋️Create New Task</h2>\n        <p className=\"text-muted\">\n          You can Create New task and Assign to the manager for the process.\n        </p>\n        <div className=\"col-12 mt-5 d-flex flex-column\">\n          <Form.Group controlId=\"Taskname\">\n            <Form.Label className=\"fw-bold\">Task Name</Form.Label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              required\n              placeholder=\"Enter task name\"\n              value={newTask.Taskname}\n              onChange={(e) =>\n                setNewTask({ ...newTask, Taskname: e.target.value })\n              }\n            />\n          </Form.Group>\n        </div>\n        <div className=\"col-12 mt-2 d-flex flex-column\">\n          <Form.Group controlId=\"description\">\n            <Form.Label className=\"fw-bold\">Task Description</Form.Label>\n            <textarea\n              className=\"form-control\"\n              required\n              placeholder=\"Enter task description\"\n              value={newTask.description}\n              onChange={(e) =>\n                setNewTask({ ...newTask, description: e.target.value })\n              }\n            />\n          </Form.Group>\n        </div>\n        <div className=\"col-12 col-md-6 mt-3 d-flex flex-column\">\n          <Form.Group controlId=\"startDate\">\n            <Form.Label className=\"fw-bold\">Start Date</Form.Label>\n            <input\n              className=\"form-control\"\n              type=\"date\"\n              required\n              value={newTask.startDate}\n              onChange={(e) => {\n                setNewTask({ ...newTask, startDate: e.target.value });\n                // Reset the endDateError when StartDate changes\n                setEndDateError(false);\n              }}\n            />\n          </Form.Group>\n        </div>\n        <div className=\"col-12 col-md-6 mt-3 d-flex flex-column\">\n          <Form.Group controlId=\"endDate\">\n            <Form.Label className=\"fw-bold\">End Date</Form.Label>\n            <input\n              className=\"form-control\"\n              type=\"date\"\n              required\n              value={newTask.endDate}\n              onChange={(e) => {\n                const selectedEndDate = e.target.value;\n                // Check if selectedEndDate is less than StartDate\n                if (selectedEndDate < newTask.startDate) {\n                  setEndDateError(true);\n                } else {\n                  setEndDateError(false);\n                  setNewTask({ ...newTask, endDate: selectedEndDate });\n                }\n              }}\n            />\n          </Form.Group>\n        </div>\n        <div className=\"col-12 col-md-3 mt-3 d-flex flex-column\">\n          <Form.Group className=\"fw-bold\" controlId=\"department\">\n            <Form.Label>Department</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name=\"department\"\n              required\n              value={newTask.department}\n              onChange={(e) =>\n                setNewTask({ ...newTask, department: e.target.value })\n              }\n              onBlur={ManagerDataHandler}\n            >\n              <option value=\"\">Select your option</option>\n              {departmentData.map((data, index) => (\n                <option key={index} value={data.DepartmentName}>\n                  {data.DepartmentName}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n        </div>\n        <div className=\"col-12 col-md-9 mt-3 d-flex flex-column\">\n          <Form.Group className=\"fw-bold\" controlId=\"department\">\n            <Form.Label>managerEmail</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name=\"department\"\n              required\n              value={newTask.managerEmail}\n              onChange={(e) =>\n                setNewTask({ ...newTask, managerEmail: e.target.value })\n              }\n            >\n              <option value=\"\">Select your option</option>\n              {managerData &&\n                managerData.map((data, index) => (\n                  <option key={index} value={data.Email}>\n                    {data.Email}\n                  </option>\n                ))}\n            </Form.Control>\n          </Form.Group>\n        </div>\n        <div>\n          <Form.Group controlId=\"Attachments\">\n            <Form.Label className=\"fw-bold mt-3\">Attachments</Form.Label>\n            <input\n              className=\"form-control\"\n              type=\"file\"\n              multiple\n              required\n              onChange={(e) =>\n                setNewTask({ ...newTask, attachments: e.target.files[0] })\n              }\n            />\n          </Form.Group>\n        </div>\n        <Button\n          className=\"mt-4 w-100 fw-bold text-white\"\n          variant=\"info\"\n          onClick={addTask}\n          disabled={!isFormValid()}\n        >\n          Add Task\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default TaskAssign;\n\n// import React, { useState, useEffect, useContext } from \"react\";\n// import axios from \"axios\";\n// import { Button, Container, Form } from \"react-bootstrap\";\n// import { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\n// // import { toast } from \"react-toastify\";\n// // import \"react-toastify/dist/ReactToastify.css\";\n// const TaskAssign = () => {\n//   const [departmentData, setDepartmentData] = useState([]);\n//   const [endDateError, setEndDateError] = useState(false);\n//   const [allImage, setAllImage] = useState(null);\n//   const [pdfFile, setPdfFile] = useState(null);\n\n//   const [newTask, setNewTask] = useState({\n//     Taskname: \"\",\n//     description: \"\",\n//     startDate: \"\",\n//     endDate: \"\",\n//     attachments: \"\",\n//     managerEmail: \"\",\n//     department: \"\",\n//     comment: \"\"\n//   });\n\n//   const { socket } = useContext(AttendanceContext);\n\n//   const [curentDate, setCurentDate] = useState();\n//   useEffect(() => {\n//     const day = new Date();\n//     const date = day.getDate();\n//     const month = day.getMonth() + 1; // Add 1 to get correct month\n//     const year = day.getFullYear();\n\n//     const completeDate = `${year}-${month.toString().padStart(2, \"0\")}-${date\n//       .toString()\n//       .padStart(2, \"0\")}`;\n//     setCurentDate(completeDate);\n//   });\n\n//   // let completeDate = `${year}-${month}-${date}`;\n//   // completeDate = completeDate.toString();\n//   // console.log(typeof completeDate);\n\n//   // useEffect(() => {\n//   //   getPdf();\n//   // }, []);\n//   // const getPdf = async () => {\n//   //   const result = await axios.get(\"http://localhost:4000/api/getTask\");\n//   //   console.log(result.data.data);\n//   //   setAllImage(result.data.data);\n//   // };\n//   // const showPdf = (pdf) => {\n//   //   window.open(`http://localhost:4000/${pdf}`, \"_blank\", \"noreferrer\");\n//   // };\n//   const isFormValid = () => {\n//     const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n//     return (\n//       newTask.Taskname.trim() !== \"\" &&\n//       newTask.description.trim() !== \"\" &&\n//       newTask.startDate.trim() !== \"\" &&\n//       newTask.endDate.trim() !== \"\" &&\n//       newTask.managerEmail.trim() !== \"\" &&\n//       emailPattern.test(newTask.managerEmail) &&\n//       newTask.department.trim() !== \"\"\n//     );\n//   };\n\n//   const addTask = async () => {\n//     let formData = new FormData();\n//     formData.append(\"Taskname\", newTask.Taskname);\n//     formData.append(\"description\", newTask.description);\n//     formData.append(\"startDate\", newTask.startDate);\n//     formData.append(\"endDate\", newTask.endDate);\n//     formData.append(\"file\", newTask.attachments);\n//     formData.append(\"managerEmail\", newTask.managerEmail);\n//     formData.append(\"department\", newTask.department);\n//     formData.append(\"comment\", newTask.comment);\n\n//     // console.log();\n//     const id = localStorage.getItem(\"_id\");\n//     axios\n//       .post(\"http://localhost:4000/api/tasks\", formData)\n//       .then((res) => {\n//         console.log(res);\n//         socket.emit(\"new_notification\", { id });\n//       })\n//       .catch((err) => {\n//         console.log(err);\n//       });\n//   };\n\n//   const loadDepartmentInfo = () => {\n//     axios\n//       .get(\"http://localhost:4000/api/department\", {\n//         headers: {\n//           authorization: localStorage.getItem(\"token\") || \"\"\n//         }\n//       })\n//       .then((response) => {\n//         setDepartmentData(response.data);\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n//   };\n\n//   useEffect(() => {\n//     loadDepartmentInfo();\n//   }, []); // Empty dependency array means this effect runs only once on mount\n\n//   return (\n//     <div style={{ zIndex: \"1\" }} className=\"p-4 d-flex flex-column \">\n//       <form className=\"row p-0 p-md-3 m-auto\">\n//         <h2 className=\"fw-bold text-muted \"> 🖋️Create New Task</h2>\n//         <p className=\"text-muted\">\n//           You can Create New task and Assign to the manager for the process.\n//         </p>\n//         <div className=\"col-12 mt-5 d-flex flex-column\">\n//           <Form.Group controlId=\"Taskname\">\n//             <Form.Label className=\"fw-bold\">Task Name</Form.Label>\n//             <input\n//               className=\"form-control\"\n//               type=\"text\"\n//               required\n//               placeholder=\"Enter task name\"\n//               value={newTask.Taskname}\n//               onChange={(e) =>\n//                 setNewTask({ ...newTask, Taskname: e.target.value })\n//               }\n//             />\n//           </Form.Group>\n//         </div>\n//         <div className=\"col-12 mt-2 d-flex flex-column\">\n//           <Form.Group controlId=\"description\">\n//             <Form.Label className=\"fw-bold\">Task Description</Form.Label>\n//             <textarea\n//               className=\"form-control\"\n//               required\n//               placeholder=\"Enter task description\"\n//               value={newTask.description}\n//               onChange={(e) =>\n//                 setNewTask({ ...newTask, description: e.target.value })\n//               }\n//             />\n//           </Form.Group>\n//         </div>\n//         <div className=\"col-12 col-md-6 mt-3 d-flex flex-column\">\n//           <Form.Group controlId=\"startDate\">\n//             <Form.Label className=\"fw-bold\">Start Date</Form.Label>\n//             <input\n//               className=\"form-control\"\n//               type=\"date\"\n//               required\n//               value={newTask.startDate}\n//               min={curentDate}\n//               onChange={(e) => {\n//                 setNewTask({ ...newTask, startDate: e.target.value });\n//                 // Reset the endDateError when StartDate changes\n//                 setEndDateError(false);\n//               }}\n//             />\n//           </Form.Group>\n//         </div>\n//         <div className=\"col-12 col-md-6 mt-3 d-flex flex-column\">\n//           <Form.Group controlId=\"endDate\">\n//             <Form.Label className=\"fw-bold\">End Date</Form.Label>\n//             <input\n//               className=\"form-control\"\n//               type=\"date\"\n//               required\n//               value={newTask.endDate}\n//               onChange={(e) => {\n//                 const selectedEndDate = e.target.value;\n//                 // Check if selectedEndDate is less than StartDate\n//                 if (selectedEndDate < newTask.startDate) {\n//                   setEndDateError(true);\n//                 } else {\n//                   setEndDateError(false);\n//                   setNewTask({ ...newTask, endDate: selectedEndDate });\n//                 }\n//               }}\n//             />\n//           </Form.Group>\n//         </div>\n//         <div className=\"col-12 col-md-3 mt-3 d-flex flex-column\">\n//           <Form.Group className=\"fw-bold\" controlId=\"department\">\n//             <Form.Label>Department</Form.Label>\n//             <Form.Control\n//               as=\"select\"\n//               name=\"department\"\n//               required\n//               value={newTask.department}\n//               onChange={(e) =>\n//                 setNewTask({ ...newTask, department: e.target.value })\n//               }\n//             >\n//               <option value=\"\">Select your option</option>\n//               {departmentData.map((data, index) => (\n//                 <option key={index} value={data.DepartmentName}>\n//                   {data.DepartmentName}\n//                 </option>\n//               ))}\n//             </Form.Control>\n//           </Form.Group>\n//         </div>\n//         <div className=\"col-12 col-md-9 mt-3 d-flex flex-column\">\n//           <Form.Group controlId=\"managerEmail\">\n//             <Form.Label className=\"fw-bold\"> Manager's Email</Form.Label>\n//             <input\n//               className=\"form-control\"\n//               type=\"email\"\n//               required\n//               placeholder=\"Enter manager's email\"\n//               value={newTask.managerEmail}\n//               onChange={(e) =>\n//                 setNewTask({ ...newTask, managerEmail: e.target.value })\n//               }\n//             />\n//           </Form.Group>\n//         </div>\n//         <div>\n//           <Form.Group controlId=\"Attachments\">\n//             <Form.Label className=\"fw-bold mt-3\">Attachments</Form.Label>\n//             <input\n//               className=\"form-control\"\n//               type=\"file\"\n//               multiple\n//               required\n//               onChange={(e) =>\n//                 setNewTask({ ...newTask, attachments: e.target.files[0] })\n//               }\n//             />\n//           </Form.Group>\n//         </div>\n//         <Button\n//           className=\"mt-4 w-100 fw-bold text-white\"\n//           variant=\"info\"\n//           onClick={addTask}\n//           disabled={!isFormValid()}\n//         >\n//           Add Task\n//         </Button>\n//       </form>\n//       {/* <div className=\"output-div\">\n//         {allImage && allImage.length > 0 && (\n//           <div className=\"inner-div\">\n//             <button\n//               className=\"btn btn-primary\"\n//               onClick={() => showPdf(allImage[0].pdf)}\n//             >\n//               Show Pdf\n//             </button>\n//           </div>\n//         )}\n//       </div> */}\n//     </div>\n//   );\n// };\n\n// export default TaskAssign;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\TaskManagement\\AdminTaskStatus.jsx",["860","861","862","863","864"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PiInfoFill } from \"react-icons/pi\";\nimport { FaCheck } from \"react-icons/fa6\";\nimport { MdCancel, MdEdit } from \"react-icons/md\";\n// import { toast } from \"react-toastify\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { BsFiletypeDoc } from \"react-icons/bs\";\n\nconst AdminTaskStatus = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isCanceling, setIsCanceling] = useState(false);\n  const [showUpdateModal, setShowUpdateModal] = useState(false);\n  const [allImage, setAllImage] = useState(null);\n\n  const [updatedTask, setUpdatedTask] = useState({\n    id: \"\",\n    Taskname: \"\",\n    description: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    managerEmail: \"\",\n    duration: 0\n  });\n\n  const calculateRemainingTime = (endDate) => {\n    const now = new Date();\n    const endDateTime = new Date(endDate);\n    let remainingTime = endDateTime - now;\n\n    if (remainingTime < 0) {\n      // If remaining time is negative, consider it as delay\n      remainingTime = Math.abs(remainingTime);\n      return { delay: true, days: 0, hours: 0, minutes: 0 };\n    } else {\n      // Calculate remaining days, hours, minutes, and seconds\n      const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(\n        (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const minutes = Math.floor(\n        (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\n      );\n      return { delay: false, days, hours, minutes };\n    }\n  };\n\n  useEffect(() => {\n    getPdf();\n  }, []);\n  const getPdf = async () => {\n    const result = await axios.get(\"http://localhost:4000/api/getTask\");\n    console.log(result.data.data);\n    setAllImage(result.data.data);\n  };\n  const showPdf = (id) => {\n    let require =\n      allImage &&\n      allImage.filter((val) => {\n        return val._id === id;\n      });\n    console.log(require[0].pdf);\n    window.open(\n      `http://localhost:4000/${require[0].pdf}`,\n      \"_blank\",\n      \"noreferrer\"\n    );\n  };\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\");\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error.message);\n      setError(\"Error fetching tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n      // Schedule the next update after 1 minute (adjust as needed)\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n\n    return () => clearTimeout();\n  }, []);\n\n  const cancelTask = async (taskId) => {\n    try {\n      setIsCanceling(true);\n\n      // Prompt the user for cancellation remarks\n      const cancellationRemarks = prompt(\n        \"Enter remarks for task cancellation:\"\n      );\n\n      if (cancellationRemarks === null) {\n        // If the user clicks Cancel in the prompt, do nothing\n        setIsCanceling(false);\n        return;\n      }\n\n      // Update the task status to \"Cancelled\" in the database\n      await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n        status: \"Cancelled\",\n        comment: cancellationRemarks\n      });\n\n      // Display success notification\n      // toast.success(\"Task canceled successfully!\");\n\n      // Update the UI by fetching the latest tasks\n      fetchData();\n    } catch (error) {\n      console.error(\"Error canceling task:\", error.message);\n      // toast.error(\"Failed to cancel task. Please try again.\");\n    } finally {\n      setIsCanceling(false);\n    }\n  };\n\n  const updateTask = (taskId) => {\n    const taskToUpdate = tasks.find((task) => task._id === taskId);\n\n    if (taskToUpdate) {\n      setUpdatedTask({\n        id: taskToUpdate._id,\n        Taskname: taskToUpdate.Taskname,\n        description: taskToUpdate.description,\n        startDate: taskToUpdate.startDate,\n        endDate: taskToUpdate.endDate,\n        managerEmail: taskToUpdate.managerEmail,\n        duration: taskToUpdate.duration\n      });\n\n      setShowUpdateModal(true);\n    }\n\n    console.log();\n  };\n\n  const handleCloseUpdateModal = () => {\n    setShowUpdateModal(false);\n  };\n\n  const handleUpdate = async () => {\n    try {\n      await axios.put(`http://localhost:4000/api/tasks/${updatedTask.id}`, {\n        Taskname: updatedTask.Taskname,\n        description: updatedTask.description,\n        startDate: updatedTask.startDate,\n        endDate: updatedTask.endDate,\n        managerEmail: updatedTask.managerEmail,\n        duration: updatedTask.duration\n      });\n\n      // Display success notification\n      // toast.success(\"Task updated successfully!\");\n\n      // Close the update modal\n      handleCloseUpdateModal();\n\n      // Update the UI by fetching the latest tasks\n      fetchData();\n    } catch (error) {\n      console.error(\"Error updating task:\", error.message);\n      // toast.error(\"Failed to update task. Please try again.\");\n    }\n  };\n\n  const askStatus = async (taskId) => {\n    // Implement the logic to ask for task status (e.g., open a modal or show a notification)\n  };\n\n  const completeTask = async (taskId) => {\n    try {\n      const CompleteMassage = prompt(\"Enter remarks for task cancellation:\");\n\n      await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n        status: \"Completed\",\n        comment: CompleteMassage\n      });\n      // toast.success(\"Task completed successfully!\");\n      fetchData();\n    } catch (error) {\n      console.error(\"Error completing task:\", error.message);\n      // toast.error(\"Failed to complete task. Please try again.\");\n    }\n  };\n\n  const totalActiveTask = tasks.filter(\n    (task) => task.status === \"Assigned\"\n  ).length;\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\n        🟢 Active Task Status ({totalActiveTask})\n      </h1>\n      <p className=\"text-muted mb-2\">\n        You can view all accepted task by manager here!\n      </p>{\" \"}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n      >\n        {tasks\n          .filter(\n            (task) => task.status === \"Pending\" || task.status === \"Assigned\"\n          )\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.DepartmentName}\n            >\n              <summary\n                style={{\n                  color: \"black\",\n                  height: \"fit-content\",\n                  background: \"linear-gradient(#1D267D, #2F58CD)\"\n                }}\n                className=\"d-flex text-white justify-content-between aline-center form-control\"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-primary fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div className=\"d-flex gap-2 RemainingTimeHandel justify-content-between \">\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div>\n                      <div className=\"text-center d-none\">\n                        <div className=\"form-control  fw-bold p-0\">\n                          {calculateRemainingTime(task.endDate).days}{\" \"}\n                        </div>{\" \"}\n                        <div>Day</div>\n                      </div>\n                      <h5 className=\"btn btn-danger p-1 px-3 fw-bold\">Late</h5>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).days}{\" \"}\n                      </div>{\" \"}\n                      <div>Day</div>\n                    </div>\n                  )}\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div className=\"text-center d-none\">\n                      <div className=\"form-control  fw-bold p-0\">\n                        {calculateRemainingTime(task.endDate).hours}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{\n                          boxShadow: \"0 0 5px 2px gray inset\",\n                          color: \"black\"\n                        }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).hours}{\" \"}\n                      </div>{\" \"}\n                      <div>Hrs</div>\n                    </div>\n                  )}\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div className=\"text-center d-none\">\n                      <div className=\"form-control fw-bold p-0\">\n                        {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  )}\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <p\n                    style={{ height: \"fit-content\" }}\n                    className=\"text-start fs-6 form-control\"\n                  >\n                    <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                    {task.description}\n                  </p>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Manager's Email <br /> <span>{task.managerEmail}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Start Date <br />{\" \"}\n                      <span>\n                        {new Date(task.startDate).toLocaleDateString()}\n                      </span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      End Date <br />{\" \"}\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <span>\n                        Task Status <br /> {task.status}\n                      </span>\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p>\n                      <span className=\"fw-bold\">Remarks : </span> {task.comment}\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <button\n                      className=\"btn btn-danger col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() => cancelTask(task._id)}\n                    >\n                      <MdCancel />\n                      Cancel Task\n                    </button>\n                    <button\n                      className=\"btn btn-primary col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() => updateTask(task._id)}\n                    >\n                      <MdEdit />\n                      Update Task\n                    </button>\n                    {allImage && allImage.length > 0 && (\n                      <button\n                        className=\"btn btn-warning col-2 d-flex justify-center aline-center gap-2\"\n                        onClick={() => showPdf(task._id)}\n                      >\n                        <BsFiletypeDoc /> View Docs\n                      </button>\n                    )}\n                    <button\n                      className=\"btn btn-success col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() => completeTask(task._id)}\n                    >\n                      <FaCheck />\n                      Complete Task\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n      {/* Update Task Modal */}\n      <Modal\n        show={showUpdateModal}\n        fullscreen={false}\n        onHide={handleCloseUpdateModal}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title className=\"fw-bold text-uppercase\">\n            Update Task\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form className=\"d-flex flex-column gap-3\">\n            <Form.Group controlId=\"formTaskName\">\n              <Form.Label>Task Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                value={updatedTask.Taskname}\n                onChange={(e) =>\n                  setUpdatedTask({ ...updatedTask, Taskname: e.target.value })\n                }\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"formDescription\">\n              <Form.Label>Description</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                value={updatedTask.description}\n                onChange={(e) =>\n                  setUpdatedTask({\n                    ...updatedTask,\n                    description: e.target.value\n                  })\n                }\n              />\n            </Form.Group>\n            <div className=\"row\">\n              <Form.Group className=\"col-12 col-md-6\" controlId=\"startDate\">\n                <Form.Label>Start Date </Form.Label>\n                <Form.Control\n                  type=\"date\"\n                  value={updatedTask.startDate}\n                  onChange={(e) =>\n                    setUpdatedTask({\n                      ...updatedTask,\n                      startDate: e.target.value\n                    })\n                  }\n                />\n              </Form.Group>\n              <Form.Group className=\"col-12 col-md-6\" controlId=\"endDate\">\n                <Form.Label>End Date</Form.Label>\n                <Form.Control\n                  type=\"date\"\n                  value={updatedTask.endDate}\n                  onChange={(e) =>\n                    setUpdatedTask({ ...updatedTask, endDate: e.target.value })\n                  }\n                />\n              </Form.Group>\n            </div>\n\n            {/* ... (similarly update other fields) */}\n\n            <Button variant=\"primary\" onClick={handleUpdate}>\n              Update\n            </Button>\n          </Form>\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n};\n\nexport default AdminTaskStatus;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\TaskManagement\\AdminCancleTask.jsx",["865"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst AdminCancleTask = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\", {\n        params: { status: \"Cancelled\" }\n      });\n\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching cancelled tasks:\", error.message);\n      setError(\"Error fetching cancelled tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const fetchDataWithTimeout = async () => {\n      await fetchData();\n    };\n\n    fetchDataWithTimeout();\n  }, []);\n  const canceledTaskCount = tasks.filter(\n    (task) => task.status === \"Cancelled\"\n  ).length;\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\n        ❌ Cancelled Task ({canceledTaskCount})\n      </h1>\n      <p className=\"text-muted\">You can view all Cancelled task here!</p>{\" \"}\n      {loading && (\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          className=\"d-flex aline-center gap-2\"\n        >\n          <div\n            className=\"spinner-grow bg-primary\"\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            role=\"status\"\n          ></div>\n\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n      >\n        {tasks\n          .filter((task) => task.status === \"Cancelled\")\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{\n                  height: \"fit-content\",\n                  background: \"linear-gradient(#1D267D, #2F58CD)\"\n                }}\n                className=\"d-flex justify-content-between aline-center form-control text-white\"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-danger fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div className=\"\">\n                  <p className=\"btn btn-danger m-auto fw-bold\">Cancelled</p>\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div\n                  style={{\n                    width: \"99.4%\",\n                    height: \"100%\",\n                    zIndex: \"5\",\n                    backgroundColor: \"rgba(128, 128, 128, 0.422)\",\n                    textShadow: \"-5px 5px 5px rgba(128, 128, 128, 0.422)\"\n                  }}\n                  className=\"watermark form-control position-absolute d-flex justify-content-center aline-center\"\n                >\n                  <h1 className=\"text-uppercase text-light fw-bolder\">\n                    c a n c e l l e d\n                  </h1>\n                </div>\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <div\n                    style={{ position: \"relative\" }}\n                    className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n                  >\n                    <div\n                      style={{\n                        width: \"99.4%\",\n                        height: \"100%\",\n                        zIndex: \"5\",\n                        backgroundColor: \"rgba(128, 128, 128, 0.422)\",\n                        textShadow: \"-5px 5px 5px rgba(128, 128, 128, 0.422)\"\n                      }}\n                      className=\"watermark form-control   position-absolute d-flex justify-content-center aline-center\"\n                    >\n                      <h1 className=\"text-uppercase text-light fw-bolder\">\n                        c a n c e l l e d\n                      </h1>\n                    </div>\n                    <div\n                      style={{ height: \"fit-content\" }}\n                      className=\"form-control\"\n                    >\n                      <p\n                        style={{ height: \"fit-content\" }}\n                        className=\"text-start fs-6 form-control\"\n                      >\n                        <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                        {task.description}\n                      </p>\n                      <div\n                        style={{ height: \"fit-content\" }}\n                        className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                      >\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          Task Durations <br />{\" \"}\n                          <span>{task.duration} days</span>{\" \"}\n                        </p>\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          Manager's Email <br />{\" \"}\n                          <span>{task.managerEmail}</span>\n                        </p>\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          Start Date <br />{\" \"}\n                          <span>\n                            {new Date(task.startDate).toLocaleDateString()}\n                          </span>\n                        </p>\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          End Date <br />{\" \"}\n                          <span>\n                            {new Date(task.endDate).toLocaleDateString()}\n                          </span>\n                        </p>\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          <span>\n                            Task Status <br /> {task.status}\n                          </span>\n                        </p>\n                      </div>\n                      <div className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\">\n                        <p>\n                          <span className=\"fw-bold\">Remarks : </span>{\" \"}\n                          {task.comment}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AdminCancleTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\TaskManagement\\AdminCompleteTask.jsx",["866"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst AdminCompleteTask = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\", {\n        params: { status: \"Completed\" } // Filter by status \"Completed\"\n      });\n\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching completed tasks:\", error.message);\n      setError(\"Error fetching completed tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n      // Schedule the next update after 1 minute (adjust as needed)\n    }\n  };\n  useEffect(() => {\n    fetchData();\n\n    return () => clearTimeout();\n  });\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\n        ✅ Completed Tasks\n      </h1>\n      <p className=\"text-muted\">You can view all Completed task here!</p>{\" \"}\n      {loading && (\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          className=\"d-flex aline-center gap-2\"\n        >\n          <div\n            className=\"spinner-grow bg-primary\"\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            role=\"status\"\n          ></div>\n\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n        className=\"d-flex flex-column gap-3\"\n      >\n        {tasks\n          .filter((task) => task.status === \"Completed\")\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{\n                  height: \"fit-content\",\n                  background: \"linear-gradient(#1D267D, #2F58CD)\"\n                }}\n                className=\"d-flex justify-content-between aline-center form-control text-white\"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-success fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div className=\"\">\n                  <p className=\"btn btn-success m-auto  fw-bold\">Completed</p>\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div\n                  style={{\n                    width: \"99.4%\",\n                    height: \"100%\",\n                    zIndex: \"5\",\n                    backgroundColor: \"rgba(0, 128, 0, 0.384)\",\n                    textShadow: \"-5px 5px 5px rgba(128, 128, 128, 0.422)\"\n                  }}\n                  className=\"watermark form-control   position-absolute d-flex justify-content-center aline-center\"\n                >\n                  <h1 className=\"text-uppercase text-light fw-bolder\">\n                    C O M P L E T E D\n                  </h1>\n                </div>\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <p\n                    style={{ height: \"fit-content\" }}\n                    className=\"text-start fs-6 form-control\"\n                  >\n                    <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                    {task.description}\n                  </p>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Manager's Email <br /> <span>{task.managerEmail}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Start Date <br />{\" \"}\n                      <span>\n                        {new Date(task.startDate).toLocaleDateString()}\n                      </span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      End Date <br />{\" \"}\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <span>\n                        Task Status <br /> {task.status}\n                      </span>\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p>\n                      <span className=\"fw-bold\">Remarks : </span> {task.comment}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AdminCompleteTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\PageNot\\NotFound404.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\TaskManagement\\RejectedTask.jsx",["867"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst RejectedTask = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\", {\n        params: { status: \"Completed\" } // Filter by status \"Completed\"\n      });\n\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching completed tasks:\", error.message);\n      setError(\"Error fetching completed tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n      // Schedule the next update after 1 minute (adjust as needed)\n    }\n  };\n  useEffect(() => {\n    fetchData();\n\n    return () => clearTimeout();\n  }, []);\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\n        ❌ Rejected Tasks\n      </h1>\n      <p className=\"text-muted\">You can view all rejected task here!</p>{\" \"}\n      {loading && (\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          className=\"d-flex aline-center gap-2\"\n        >\n          <div\n            className=\"spinner-grow bg-primary\"\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            role=\"status\"\n          ></div>\n\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n        className=\"d-flex flex-column gap-3\"\n      >\n        {tasks\n          .filter((task) => task.status === \"Rejected\")\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{\n                  height: \"fit-content\",\n                  background: \"linear-gradient(#1D267D, #2F58CD)\"\n                }}\n                className=\"d-flex justify-content-between aline-center form-control text-white\"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-success fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div>\n                  <p className=\"btn btn-light m-auto py-1 px-3 fw-bold\">\n                    Rejected\n                  </p>\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div\n                  style={{\n                    width: \"99.4%\",\n                    height: \"100%\",\n                    zIndex: \"5\",\n                    backgroundColor: \"rgba(5, 128, 8, 0.384)\",\n                    textShadow: \"-5px 5px 5px rgba(128, 128, 128, 0.422)\"\n                  }}\n                  className=\"watermark form-control   position-absolute d-flex justify-content-center aline-center\"\n                >\n                  <h1 className=\"text-uppercase text-light fw-bolder\">\n                    R E J E C T E D\n                  </h1>\n                </div>\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <p\n                    style={{ height: \"fit-content\" }}\n                    className=\"text-start fs-6 form-control\"\n                  >\n                    <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                    {task.description}\n                  </p>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Manager's Email <br /> <span>{task.managerEmail}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Start Date <br />{\" \"}\n                      <span>\n                        {new Date(task.startDate).toLocaleDateString()}\n                      </span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      End Date <br />{\" \"}\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <span>\n                        Task Status <br /> {task.status}\n                      </span>\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p>\n                      <span className=\"fw-bold\">Remarks : </span> {task.comment}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default RejectedTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\attendance\\Attendance.jsx",["868","869","870","871","872"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\r\nimport SelfAttendance from \"./SelfAttendance\";\r\n\r\nfunction SetLog(props) {\r\n  // const [employees, setEmployees] = useState([]);\r\n  // const [selectedEmployee, setSelectedEmployee] = useState(\"\");\r\n  // const [attencenceID, setAttencenceID] = useState(\"\");\r\n  // const [message, setMessage] = useState(\"\");\r\n  const [empName, setEmpName] = useState(null);\r\n\r\n  const {\r\n    employees,\r\n    setEmployees,\r\n    selectedEmployee,\r\n    setSelectedEmployee,\r\n    attencenceID,\r\n    setAttencenceID,\r\n    message,\r\n    setMessage\r\n  } = useContext(AttendanceContext);\r\n\r\n  useEffect(() => {\r\n    const loadEmployeeData = async (email) => {\r\n      await axios\r\n        .get(\"http://localhost:4000/api/employee\", {\r\n          headers: {\r\n            authorization: localStorage.getItem(\"token\") || \"\"\r\n          }\r\n        })\r\n        .then((response) => {\r\n          // Ensure that response.data is an array\r\n          let admin = response.data.filter((val) => {\r\n            return val.Account === 1;\r\n          });\r\n          setEmployees(admin);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n    loadEmployeeData();\r\n  }, []);\r\n  // hello\r\n\r\n  useEffect(() => {\r\n    const loadPersonalInfoData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          \"http://localhost:4000/api/personal-info/\" + props.data[\"_id\"],\r\n          {\r\n            headers: {\r\n              authorization: localStorage.getItem(\"token\") || \"\"\r\n            }\r\n          }\r\n        );\r\n        console.log(response.data.FirstName);\r\n        setEmpName(response.data.FirstName);\r\n      } catch (error) {\r\n        console.error(\"Error fetching employees:\", error);\r\n      }\r\n    };\r\n\r\n    loadPersonalInfoData();\r\n  }, []);\r\n\r\n  // hello\r\n  const handleUserChange = (employeeID) => {\r\n    const selectedEmployee = employees.find(\r\n      (employee) => employee._id === employeeID\r\n    );\r\n\r\n    if (selectedEmployee) {\r\n      setAttencenceID(selectedEmployee.attendanceObjID);\r\n      setSelectedEmployee(employeeID);\r\n      getMessage(employeeID);\r\n    }\r\n  };\r\n\r\n  const getMessage = async (employeeID) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:4000/api/attendance/${employeeID}`\r\n      );\r\n      const lastEntry = response.data[response.data.length - 1];\r\n\r\n      if (lastEntry) {\r\n        setMessage(`Status: ${lastEntry.years[0].months[0].dates[0].status}`);\r\n      } else {\r\n        setMessage(\"\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching attendance data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleLogin = async () => {\r\n    let data = employees.filter((val) => {\r\n      return val.FirstName === empName;\r\n    });\r\n    console.log(data);\r\n    let attencenceID = data[0].attendanceObjID;\r\n    let selectedEmployee = data[0]._id;\r\n\r\n    try {\r\n      if (!empName) {\r\n        setMessage(\"Please select a user\");\r\n        return;\r\n      }\r\n\r\n      const currentTime = new Date().toLocaleTimeString();\r\n      await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n        employeeId: selectedEmployee,\r\n        year: new Date().getFullYear(),\r\n        month: new Date().getMonth() + 1,\r\n        date: new Date().getDate(),\r\n        loginTime: [currentTime],\r\n        status: \"login\"\r\n      });\r\n      setMessage(\"Login time recorded successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error recording login time:\", error);\r\n      setMessage(\"Error recording login time\");\r\n    }\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    let data = employees.filter((val) => {\r\n      return val.FirstName === empName;\r\n    });\r\n    let attencenceID = data[0].attendanceObjID;\r\n    let selectedEmployee = data[0]._id;\r\n    try {\r\n      if (!empName) {\r\n        setMessage(\"Please select an employee\");\r\n        return;\r\n      }\r\n\r\n      const currentTime = new Date().toLocaleTimeString();\r\n      await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n        employeeId: selectedEmployee,\r\n        year: new Date().getFullYear(),\r\n        month: new Date().getMonth() + 1,\r\n        date: new Date().getDate(),\r\n        logoutTime: [currentTime],\r\n        status: \"logout\"\r\n      });\r\n      setMessage(\"Logout time recorded successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error recording logout time:\", error);\r\n      setMessage(\"Error recording logout time\");\r\n    }\r\n  };\r\n\r\n  const handleResume = async () => {\r\n    let email = localStorage.getItem(\"Email\");\r\n    if (employees) {\r\n      let data = employees.filter((val) => {\r\n        return val.Email === email;\r\n      });\r\n      let attencenceID = data[0].attendanceObjID;\r\n      let selectedEmployee = data[0]._id;\r\n      try {\r\n        if (!data) {\r\n          setMessage(\"Please select an employee\");\r\n          return;\r\n        }\r\n\r\n        const currentTime = new Date().toLocaleTimeString();\r\n        const currentTimeMs = Math.round(new Date().getTime() / 1000 / 60);\r\n\r\n        await axios.post(\r\n          `http://localhost:4000/api/attendance/${attencenceID}`,\r\n          {\r\n            employeeId: selectedEmployee,\r\n            year: new Date().getFullYear(),\r\n            month: new Date().getMonth() + 1,\r\n            date: new Date().getDate(),\r\n            ResumeTime: [currentTime],\r\n            resumeTimeMS: [currentTimeMs],\r\n            status: \"resume\"\r\n          }\r\n        );\r\n\r\n        setMessage(\"Resumed time recorded successfully\");\r\n      } catch (error) {\r\n        console.error(\"Error recording resume time:\", error);\r\n        setMessage(\"Error recording resume time\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleBreak = async () => {\r\n    let email = localStorage.getItem(\"Email\");\r\n    if (employees) {\r\n      let data = employees.filter((val) => {\r\n        return val.Email === email;\r\n      });\r\n      console.log(email);\r\n      let attencenceID = data[0].attendanceObjID;\r\n      let selectedEmployee = data[0]._id;\r\n      try {\r\n        if (!data) {\r\n          setMessage(\"Please select an employee\");\r\n          return;\r\n        }\r\n\r\n        const currentTime = new Date().toLocaleTimeString();\r\n        const currentTimeMs = Math.round(new Date().getTime() / 1000 / 60);\r\n\r\n        await axios.post(\r\n          `http://localhost:4000/api/attendance/${attencenceID}`,\r\n          {\r\n            employeeId: selectedEmployee,\r\n            year: new Date().getFullYear(),\r\n            month: new Date().getMonth() + 1,\r\n            date: new Date().getDate(),\r\n            breakTime: [currentTime],\r\n            breakTimeMs: [currentTimeMs],\r\n            status: \"break\"\r\n          }\r\n        );\r\n        setMessage(\"Break time recorded successfully\");\r\n      } catch (error) {\r\n        console.error(\"Error recording break time:\", error);\r\n        setMessage(\"Error recording break time\");\r\n      }\r\n    }\r\n  };\r\n\r\n  console.log(employees);\r\n\r\n  return (\r\n    <div className=\"App row\">\r\n      <h1 className=\"text-center text-uppercase my-3\">Attendance System</h1>\r\n      <div\r\n        className=\"form-control d-flex  gap-3 p-3 m-3\"\r\n        style={{ height: \"fit-content\" }}\r\n      >\r\n        {/* <select\r\n          className=\"form-select mx-2 w-25 \"\r\n          onChange={(e) => handleUserChange(e.target.value)}\r\n        >\r\n          <option value=\"\">-- Select User --</option>\r\n          {employees.map((employee) => (\r\n            <option key={employee._id} value={employee._id}>\r\n              {employee.FirstName}\r\n            </option>\r\n          ))}\r\n        </select> */}\r\n        <input value={empName} style={{ display: \"none\" }} />\r\n\r\n        <div className=\"d-flex gap-3\">\r\n          <button className=\"btn btn-success\" onClick={handleLogin}>\r\n            Mark Attendance\r\n          </button>\r\n          <button className=\"btn btn-danger\" onClick={handleLogout}>\r\n            Logout\r\n          </button>\r\n          <div className=\"d-flex gap-3\">\r\n            <button className=\"btn btn-warning\" onClick={handleBreak}>\r\n              Break\r\n            </button>\r\n            <button className=\"btn btn-primary\" onClick={handleResume}>\r\n              Resume\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {message && <p>{message}</p>}\r\n\r\n      <div className=\"view\">\r\n        <SelfAttendance />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SetLog;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\TaskManagement\\AdminAssignedTask.jsx",["873","874","875","876","877","878"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PiInfoFill } from \"react-icons/pi\";\nimport { FaCheck } from \"react-icons/fa6\";\nimport { MdCancel, MdEdit } from \"react-icons/md\";\n// import { toast } from \"react-toastify\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { BsFiletypeDoc } from \"react-icons/bs\";\n\nconst AdminAssignedTask = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isCanceling, setIsCanceling] = useState(false);\n  const [isCompleting, setIsCompleting] = useState(false);\n  const [showUpdateModal, setShowUpdateModal] = useState(false);\n  const [allImage, setAllImage] = useState(null);\n\n  const [updatedTask, setUpdatedTask] = useState({\n    id: \"\",\n    Taskname: \"\",\n    description: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    managerEmail: \"\",\n    duration: 0\n  });\n  const [totalAssignedTasks, setTotalAssignedTasks] = useState(0);\n\n  const calculateRemainingTime = (endDate) => {\n    const now = new Date();\n    const endDateTime = new Date(endDate);\n    let remainingTime = endDateTime - now;\n\n    if (remainingTime < 0) {\n      // If remaining time is negative, consider it as delay\n      remainingTime = Math.abs(remainingTime);\n      return { delay: true, days: 0, hours: 0, minutes: 0 };\n    } else {\n      // Calculate remaining days, hours, minutes, and seconds\n      const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(\n        (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const minutes = Math.floor(\n        (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\n      );\n      return { delay: false, days, hours, minutes };\n    }\n  };\n  useEffect(() => {\n    getPdf();\n  }, []);\n  const getPdf = async () => {\n    const result = await axios.get(\"http://localhost:4000/api/getTask\");\n    console.log(result.data.data);\n    setAllImage(result.data.data);\n  };\n  const showPdf = (id) => {\n    let require =\n      allImage &&\n      allImage.filter((val) => {\n        return val._id === id;\n      });\n    console.log(require[0].pdf);\n    window.open(\n      `http://localhost:4000/${require[0].pdf}`,\n      \"_blank\",\n      \"noreferrer\"\n    );\n  };\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\");\n      setTasks(response.data);\n\n      // Update the totalAssignedTasks state with the count of assigned tasks\n      const assignedTasksCount = response.data.filter(\n        (task) => task.status === \"Assigned\"\n      ).length;\n      setTotalAssignedTasks(assignedTasksCount);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error.message);\n      setError(\"Error fetching tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n      // Schedule the next update after 1 minute (adjust as needed)\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n\n    return () => clearTimeout();\n  }, []);\n\n  const cancelTask = async (taskId) => {\n    try {\n      setIsCanceling(true);\n\n      // Prompt the user for cancellation remarks\n      const cancellationRemarks = prompt(\n        \"Enter remarks for task cancellation:\"\n      );\n\n      if (cancellationRemarks === null) {\n        // If the user clicks Cancel in the prompt, do nothing\n        setIsCanceling(false);\n        return;\n      }\n\n      // Update the task status to \"Cancelled\" in the database\n      await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n        status: \"Cancelled\",\n        comment: cancellationRemarks\n      });\n\n      // Display success notification\n      alert(\"Task canceled successfully!\");\n\n      // Update the UI by fetching the latest tasks\n      fetchData();\n    } catch (error) {\n      console.error(\"Error canceling task:\", error.message);\n      alert(\"Failed to cancel task. Please try again.\");\n    } finally {\n      setIsCanceling(false);\n    }\n  };\n\n  const updateTask = (taskId) => {\n    const taskToUpdate = tasks.find((task) => task._id === taskId);\n\n    if (taskToUpdate) {\n      setUpdatedTask({\n        id: taskToUpdate._id,\n        Taskname: taskToUpdate.Taskname,\n        description: taskToUpdate.description,\n        startDate: taskToUpdate.startDate,\n        endDate: taskToUpdate.endDate,\n        managerEmail: taskToUpdate.managerEmail,\n        duration: taskToUpdate.duration\n      });\n\n      setShowUpdateModal(true);\n    }\n\n    console.log();\n  };\n\n  const handleCloseUpdateModal = () => {\n    setShowUpdateModal(false);\n  };\n\n  const handleUpdate = async () => {\n    try {\n      await axios.put(`http://localhost:4000/api/tasks/${updatedTask.id}`, {\n        Taskname: updatedTask.Taskname,\n        description: updatedTask.description,\n        startDate: updatedTask.startDate,\n        endDate: updatedTask.endDate,\n        managerEmail: updatedTask.managerEmail,\n        duration: updatedTask.duration\n      });\n\n      // Display success notification\n      alert(\"Task updated successfully!\");\n\n      // Close the update modal\n      handleCloseUpdateModal();\n\n      // Update the UI by fetching the latest tasks\n      fetchData();\n    } catch (error) {\n      console.error(\"Error updating task:\", error.message);\n      alert(\"Failed to update task. Please try again.\");\n    }\n  };\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\n        🟡 Task Status ({totalAssignedTasks})\n      </h1>\n      <p className=\"text-muted\">You can view all Task Status here!</p>{\" \"}\n      {loading && (\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          className=\"d-flex aline-center gap-2\"\n        >\n          <div\n            className=\"spinner-grow bg-primary\"\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            role=\"status\"\n          ></div>\n\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n      >\n        {tasks\n          .filter((task) => task.status === \"Assigned\")\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{\n                  height: \"fit-content\",\n                  background: \"linear-gradient(#1D267D, #2F58CD)\"\n                }}\n                className=\"d-flex justify-content-between aline-center form-control  text-white\"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-primary fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div className=\"d-flex gap-2 RemainingTimeHandel justify-content-between \">\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div>\n                      <div className=\"text-center d-none\">\n                        <div className=\"form-control  fw-bold p-0\">\n                          {calculateRemainingTime(task.endDate).days}{\" \"}\n                        </div>{\" \"}\n                        <div>Day</div>\n                      </div>\n                      <h5 className=\"btn btn-danger p-1 px-3 fw-bold\">Late</h5>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).days}{\" \"}\n                      </div>{\" \"}\n                      <div>Day</div>\n                    </div>\n                  )}\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div className=\"text-center d-none\">\n                      <div className=\"form-control  fw-bold p-0\">\n                        {calculateRemainingTime(task.endDate).hours}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).hours}{\" \"}\n                      </div>{\" \"}\n                      <div>Hrs</div>\n                    </div>\n                  )}\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div className=\"text-center d-none\">\n                      <div className=\"form-control fw-bold p-0\">\n                        {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  )}\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <p\n                    style={{ height: \"fit-content\" }}\n                    className=\"text-start fs-6 form-control\"\n                  >\n                    <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                    {task.description}\n                  </p>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Manager's Email <br /> <span>{task.managerEmail}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Start Date <br />{\" \"}\n                      <span>\n                        {new Date(task.startDate).toLocaleDateString()}\n                      </span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      End Date <br />{\" \"}\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <span>\n                        Task Status <br /> {task.status}\n                      </span>\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p>\n                      <span className=\"fw-bold\">Remarks : </span> {task.comment}\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <button\n                      className=\"btn btn-danger col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() => cancelTask(task._id)}\n                    >\n                      <MdCancel />\n                      Cancel Task\n                    </button>\n                    {allImage && allImage.length > 0 && (\n                      <button\n                        className=\"btn btn-primary col-2 d-flex justify-center aline-center gap-2\"\n                        onClick={() => showPdf(task._id)}\n                      >\n                        <BsFiletypeDoc />\n                        View Docs\n                      </button>\n                    )}\n                    <button\n                      className=\"btn btn-primary col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() => updateTask(task._id)}\n                    >\n                      <MdEdit />\n                      Update Task\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n      {/* Update Task Modal */}\n      <Modal\n        show={showUpdateModal}\n        fullscreen={false}\n        onHide={handleCloseUpdateModal}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title className=\"fw-bold text-uppercase\">\n            Update Task\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form className=\"d-flex flex-column gap-3\">\n            <Form.Group controlId=\"formTaskName\">\n              <Form.Label>Task Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                value={updatedTask.Taskname}\n                onChange={(e) =>\n                  setUpdatedTask({ ...updatedTask, Taskname: e.target.value })\n                }\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"formDescription\">\n              <Form.Label>Description</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                value={updatedTask.description}\n                onChange={(e) =>\n                  setUpdatedTask({\n                    ...updatedTask,\n                    description: e.target.value\n                  })\n                }\n              />\n            </Form.Group>\n            <div className=\"row\">\n              <Form.Group className=\"col-12 col-md-6\" controlId=\"startDate\">\n                <Form.Label>Start Date </Form.Label>\n                <Form.Control\n                  type=\"date\"\n                  value={updatedTask.startDate}\n                  onChange={(e) =>\n                    setUpdatedTask({\n                      ...updatedTask,\n                      startDate: e.target.value\n                    })\n                  }\n                />\n              </Form.Group>\n              <Form.Group className=\"col-12 col-md-6\" controlId=\"endDate\">\n                <Form.Label>End Date</Form.Label>\n                <Form.Control\n                  type=\"date\"\n                  value={updatedTask.endDate}\n                  onChange={(e) =>\n                    setUpdatedTask({\n                      ...updatedTask,\n                      endDate: e.target.value\n                    })\n                  }\n                />\n              </Form.Group>\n            </div>\n\n            <Button variant=\"primary\" onClick={handleUpdate}>\n              Update\n            </Button>\n          </Form>\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n};\n\nexport default AdminAssignedTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\LeaveCalendar\\LeaveCalendar.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\attendance\\ViewAttendance.jsx",["879"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { TfiReload } from \"react-icons/tfi\";\r\nimport { FaCircleInfo } from \"react-icons/fa6\";\r\nimport { MdOutlineRefresh } from \"react-icons/md\";\r\n\r\nconst AttendanceDetails = () => {\r\n  const [employeeId, setEmployeeId] = useState(\"\");\r\n  const [employees, setEmployees] = useState([]);\r\n  const [attendanceData, setAttendanceData] = useState(null);\r\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\r\n  const [isButtonClicked, setIsButtonClicked] = useState(false);\r\n  const [hoveredDate, setHoveredDate] = useState(null);\r\n  const [isInfoHovering, setIsInfoHovering] = useState(false);\r\n\r\n  const handleMouseEnter = (date) => {\r\n    setHoveredDate(date);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoveredDate(null);\r\n  };\r\n\r\n  const handleInfoMouseEnter = () => {\r\n    setIsInfoHovering(true);\r\n  };\r\n\r\n  const handleInfoMouseLeave = () => {\r\n    setIsInfoHovering(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEmployees();\r\n  }, []);\r\n\r\n  const fetchEmployees = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:4000/api/employee\", {\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      });\r\n      setEmployees(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching employees:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEmployeeChange = (event) => {\r\n    setEmployeeId(event.target.value);\r\n  };\r\n\r\n  // const handleFetchAttendance = async () => {\r\n  //   try {\r\n  //     const response = await axios.get(\r\n  //       `http://localhost:4000/api/attendance/${employeeId}`,\r\n  //       {\r\n  //         headers: {\r\n  //           Authorization: `Bearer ${localStorage.getItem(\"token\") || \"\"}`\r\n  //         }\r\n  //       }\r\n  //     );\r\n  //     let singleUser = response.data.filter((val) => {\r\n  //       return val.employeeObjID._id === employeeId;\r\n  //     });\r\n  //     setAttendanceData(singleUser.length > 0 ? singleUser[0] : null);\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching attendance data:\", error);\r\n  //   }\r\n  // };\r\n\r\n  const handleFetchAttendance = async () => {\r\n    setIsButtonClicked(true);\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:4000/api/attendance/${employeeId}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\") || \"\"}`\r\n          }\r\n        }\r\n      );\r\n\r\n      let singleUser = response.data.filter((val) => {\r\n        return val.employeeObjID && val.employeeObjID._id === employeeId;\r\n      });\r\n\r\n      setAttendanceData(singleUser.length > 0 ? singleUser[0] : null);\r\n    } catch (error) {\r\n      console.error(\"Error fetching attendance data:\", error);\r\n    } finally {\r\n      // Reset the isButtonClicked state after a delay to allow the animation to play\r\n      setTimeout(() => {\r\n        setIsButtonClicked(false);\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  const getTotalHolidays = () => {\r\n    if (\r\n      attendanceData &&\r\n      attendanceData.user &&\r\n      attendanceData.user.holidayObjID\r\n    ) {\r\n      return attendanceData.user.holidayObjID.holidays.length;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  const getMonthName = (monthNumber) => {\r\n    switch (monthNumber) {\r\n      case 1:\r\n        return \"January\";\r\n      case 2:\r\n        return \"February\";\r\n      case 3:\r\n        return \"March\";\r\n      case 4:\r\n        return \"April\";\r\n      case 5:\r\n        return \"May\";\r\n      case 6:\r\n        return \"June\";\r\n      case 7:\r\n        return \"July\";\r\n      case 8:\r\n        return \"August\";\r\n      case 9:\r\n        return \"September\";\r\n      case 10:\r\n        return \"October\";\r\n      case 11:\r\n        return \"November\";\r\n      case 12:\r\n        return \"December\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const getMonthsForYear = (year) => {\r\n    if (year === new Date().getFullYear()) {\r\n      return Array.from({ length: new Date().getMonth() + 1 }, (_, i) => i + 1);\r\n    }\r\n    return Array.from({ length: 12 }, (_, i) => i + 1);\r\n  };\r\n\r\n  const getYears = () => {\r\n    if (attendanceData && attendanceData.years) {\r\n      const currentYear = new Date().getFullYear();\r\n      return attendanceData.years.filter((year) => year.year <= currentYear);\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const millisecondsToTime = (milliseconds) => {\r\n    const millisecond = Math.floor(milliseconds);\r\n    const seconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n\r\n    const formattedHours = String(hours).padStart(2, \"0\");\r\n    const formattedMinutes = String(minutes % 60).padStart(2, \"0\");\r\n    const formattedSeconds = String(seconds % 60).padStart(2, \"0\");\r\n    const formattedMillisecond = String(millisecond % 60).padStart(2, \"0\");\r\n\r\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}:${formattedMillisecond}`;\r\n  };\r\n\r\n  const getAttendanceMark = (date) => {\r\n    const loginTime = date && date.loginTime[0];\r\n    if (loginTime) {\r\n      const [loginHour, loginMinute] = loginTime.split(\":\").map(Number);\r\n      if (loginHour > 9 || (loginHour === 9 && loginMinute > 45)) {\r\n        return \"H\";\r\n      } else if (loginHour > 9 || (loginHour === 9 && loginMinute > 30)) {\r\n        return \"L\";\r\n      }\r\n    }\r\n    return loginTime ? \"P\" : \"A\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column p-5 gap-3\">\r\n      {/* <div className=\"d-flex gap-3 \">\r\n        <div>\r\n          <select\r\n            className=\"form-select w-100 shadow-sm text-muted\"\r\n            id=\"employeeId\"\r\n            value={employeeId}\r\n            onChange={handleEmployeeChange}\r\n          >\r\n            <option value=\"\" disabled>\r\n              --Select an employee--\r\n            </option>\r\n\r\n            {employees\r\n              .sort((a, b) => a.empID - b.empID)\r\n              .map((employee) => (\r\n                <option\r\n                  className=\"text-uppercase\"\r\n                  key={employee._id}\r\n                  value={employee._id}\r\n                >\r\n                  🪪 ({employee.empID}) {employee.FirstName}-{employee.LastName}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n\r\n        <button\r\n          className=\"btn shadow btn-dark fw-bolder\"\r\n          style={{ width: \"fit-content\" }}\r\n          onClick={handleFetchAttendance}\r\n        >\r\n          Fetch Attendance\r\n        </button>\r\n      </div> */}\r\n      <div className=\"d-flex gap-3 justify-content-between\">\r\n        <div>\r\n          <select\r\n            className=\"form-select w-100 shadow-sm text-muted\"\r\n            id=\"employeeId\"\r\n            value={employeeId}\r\n            onChange={handleEmployeeChange}\r\n          >\r\n            <option value=\"\" disabled>\r\n              --Select an employee--\r\n            </option>\r\n            {employees\r\n              .sort((a, b) => a.empID - b.empID)\r\n              .map((employee) => (\r\n                <option\r\n                  className=\"text-uppercase\"\r\n                  key={employee._id}\r\n                  value={employee._id}\r\n                >\r\n                  <p>\r\n                    🪪 ({employee.empID}) {employee.FirstName}\r\n                  </p>\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n        <button\r\n          disabled={!employeeId}\r\n          style={{ display: \"flex\", alignItems: \"center\", gap: \".5rem\" }}\r\n          className=\"btn shadow btn-dark fw-bolder\"\r\n          onClick={handleFetchAttendance}\r\n        >\r\n          <MdOutlineRefresh\r\n            className={`fs-4 ${isButtonClicked ? \"rotate\" : \"\"}`}\r\n          />{\" \"}\r\n          Get\r\n        </button>\r\n      </div>\r\n\r\n      {attendanceData && (\r\n        <div className=\"d-flex gap-3\">\r\n          <div>\r\n            <label htmlFor=\"year\">Select a year:</label>\r\n            <select\r\n              className=\"form-select shadow\"\r\n              id=\"year\"\r\n              value={selectedYear}\r\n              onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n            >\r\n              {getYears().map((year) => (\r\n                <option key={year.year} value={year.year}>\r\n                  {year.year}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"month\">Select a month:</label>\r\n            <select\r\n              className=\"form-select shadow\"\r\n              id=\"month\"\r\n              value={selectedMonth}\r\n              onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\r\n            >\r\n              {getMonthsForYear(selectedYear).map((month) => (\r\n                <option key={month} value={month}>\r\n                  {getMonthName(month)}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {attendanceData && (\r\n        <div style={{ overflow: \"auto\", height: \"80vh\" }}>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr className=\"shadow-sm\">\r\n                <th className=\"bg-dark text-white text-center\">Date</th>\r\n                <th className=\"bg-dark text-white text-center\">Status</th>\r\n                <th className=\"bg-dark text-white\">Login Time</th>\r\n                <th className=\"bg-dark text-white\">Logout Time</th>\r\n                <th className=\"bg-dark text-white\">Break</th>\r\n                <th className=\"bg-dark text-white\">Total Login</th>\r\n                <th className=\"bg-dark text-white\">Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {getYears().map((year) =>\r\n                year.months\r\n                  .filter((month) => month.month === selectedMonth)\r\n                  .map((month) =>\r\n                    month.dates\r\n                      .sort((a, b) => a.date - b.date)\r\n                      .map((date) => (\r\n                        <tr\r\n                          className=\"shadow-sm\"\r\n                          key={date.date}\r\n                          id={`attendance-row-${date.date}`} // Assign unique ID to each row\r\n                          onMouseEnter={() => handleMouseEnter(date.date)}\r\n                          onMouseLeave={() => handleMouseLeave()}\r\n                        >\r\n                          <td className=\"text-center\">\r\n                            <span className=\"fw-bold bg-info py-1 px-2  shadow-sm text-white\">\r\n                              {date.date}\r\n                            </span>\r\n                          </td>\r\n                          <td\r\n                            style={{ whiteSpace: \"pre\", textAlign: \"center\" }}\r\n                          >\r\n                            {getAttendanceMark(date)}\r\n                          </td>\r\n                          <td className=\"text-uppercase\">\r\n                            {date.loginTime[0]}\r\n                          </td>\r\n                          <td className=\"text-uppercase\">\r\n                            {date.logoutTime[date.logoutTime.length - 1]}\r\n                          </td>\r\n                          <td className=\"position-relative bg-white\">\r\n                            <div\r\n                              style={{\r\n                                display: \"flex \",\r\n                                justifyContent: \"start\",\r\n                                alignItems: \"center\"\r\n                              }}\r\n                              className=\"fs-6 gap-2 \"\r\n                              onMouseEnter={handleInfoMouseEnter}\r\n                              onMouseLeave={handleInfoMouseLeave}\r\n                            >\r\n                              <span\r\n                                style={{ scale: \"0.7\" }}\r\n                                className=\"bg-warning py-0  text-white  px-2 rounded-5 my-auto\"\r\n                              >\r\n                                {date.breakTime.length}\r\n                              </span>\r\n                              <span className=\"fw-bold text-dark fs-6\">\r\n                                {millisecondsToTime(date.totalBrake)}\r\n                              </span>{\" \"}\r\n                              <FaCircleInfo\r\n                                style={{ fontSize: \".9rem\" }}\r\n                                className=\"text-info \"\r\n                              />\r\n                            </div>\r\n\r\n                            <div\r\n                              style={{ zIndex: \"5\", right: \"0%\" }}\r\n                              className=\"position-absolute\"\r\n                            >\r\n                              {isInfoHovering &&\r\n                                hoveredDate === date.date && ( // Check if info button is hovered and the date is the hovered date\r\n                                  <table className=\"table table-bordered table-striped\">\r\n                                    <thead>\r\n                                      <tr className=\"shadow-sm p-0\">\r\n                                        <th className=\"bg-info  py-0 text-white\">\r\n                                          Break\r\n                                        </th>\r\n                                        <th className=\"bg-info  py-0 text-white\">\r\n                                          Resume\r\n                                        </th>\r\n                                        <th\r\n                                          className=\"text-end  py-0 bg-info text-white\"\r\n                                          style={{ whiteSpace: \"pre\" }}\r\n                                        >\r\n                                          Total Break\r\n                                        </th>\r\n                                      </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                      {date.breakTime.map(\r\n                                        (breakTime, index) => (\r\n                                          <tr className=\"shadow-sm\" key={index}>\r\n                                            <td\r\n                                              className=\"text-uppercase  py-1 text-center\"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {breakTime}\r\n                                            </td>\r\n                                            <td\r\n                                              className=\"text-uppercase  py-1 text-center\"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {date.ResumeTime[index]}\r\n                                            </td>\r\n                                            <td\r\n                                              className=\"text-end py-1 \"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {millisecondsToTime(\r\n                                                date.BreakData[index]\r\n                                              )}\r\n                                            </td>\r\n                                          </tr>\r\n                                        )\r\n                                      )}\r\n                                    </tbody>\r\n                                  </table>\r\n                                )}\r\n                            </div>\r\n                          </td>\r\n                          <td>{millisecondsToTime(date.totalLogAfterBreak)}</td>\r\n                          <td>{date.status}</td>\r\n                        </tr>\r\n                      ))\r\n                  )\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n      {attendanceData === null && (\r\n        <div\r\n          style={{\r\n            height: \"80vh\",\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            wordSpacing: \"5px\",\r\n            flexDirection: \"column\",\r\n            gap: \"1rem\"\r\n          }}\r\n        >\r\n          <div className=\"fs-2 fw-bolder\">\r\n            <TfiReload className=\"spinner-border text-info\" />\r\n          </div>\r\n          <p className=\"text-muted\">\r\n            User not selected. To view data, please select a user.\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AttendanceDetails;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\Country.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\State.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Company\\Company.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\City.jsx",["880"],"import React, { useState, useEffect } from \"react\";\nimport \"./City.css\";\n\nimport axios from \"axios\";\nimport CityTable from \"./CityTable.jsx\";\nimport CityForm from \"./CityForm.jsx\";\nimport CityFormEdit from \"./CityFormEdit.jsx\";\n\nconst City = () => {\n  const [table, setTable] = useState(true);\n  const [editForm, setEditForm] = useState(false);\n  const [editData, setEditData] = useState({});\n\n  const handleCitySubmit = (event) => {\n    event.preventDefault();\n    console.log(\"id\", event.target[0].value, event.target[1].value);\n    setTable(true);\n\n    const body = {\n      StateID: event.target[1].value,\n      CityName: event.target[2].value\n    };\n\n    axios\n      .post(\"http://localhost:4000/api/city\", body, {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((res) => {\n        setTable(false);\n        setTable(true);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const handleAddCity = () => {\n    console.log(\"clicked1\");\n    setTable(false);\n  };\n\n  const handleEditCity = (e) => {\n    console.log(e);\n    console.log(\"clicked6\");\n    setEditForm(true);\n    setEditData(e);\n  };\n\n  const handleFormClose = () => {\n    console.log(\"clicked1\");\n    setTable(true);\n  };\n\n  const handleEditFormClose = () => {\n    console.log(\"clicked5\");\n    setEditForm(false);\n  };\n\n  const handleCityEditUpdate = (info, newInfo) => {\n    newInfo.preventDefault();\n    setTable(true);\n\n    const body = {\n      StateID: newInfo.target[1].value,\n      CityName: newInfo.target[2].value\n    };\n\n    axios\n      .put(`http://localhost:4000/api/city/${info[\"_id\"]}`, body, {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((res) => {\n        console.log(\n          \"uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu\"\n        );\n        setEditForm(false);\n        setTable(true);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      {table ? (\n        editForm ? (\n          <CityFormEdit\n            onCityEditUpdate={handleCityEditUpdate}\n            onFormEditClose={handleEditFormClose}\n            editData={editData}\n          />\n        ) : (\n          <CityTable onAddCity={handleAddCity} onEditCity={handleEditCity} />\n        )\n      ) : (\n        <CityForm\n          onCitySubmit={handleCitySubmit}\n          onFormClose={handleFormClose}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default City;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\ApplyLeave\\LeaveApplication.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\LeaveStatus\\LeaveApplicationHRReject.jsx",["881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900","901"],"import React, { useState, useEffect } from \"react\";\n// import \"./LeaveApplicationHRTable.css\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport {\n  Form,\n  Button,\n  Col,\n  Row,\n  Table,\n  Dropdown,\n  DropdownButton\n} from \"react-bootstrap\";\n\n// *************csv & pdf **************//\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { BsFillFileEarmarkPdfFill } from \"react-icons/bs\";\n// *************csv & pdf **************//\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nconst LeaveApplicationHRTable = (props) => {\n  const [leaveApplicationHRData, setLeaveApplicationHRData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchData, setSearchData] = useState(\"\");\n  const [totalLeaves, setTotalLeaves] = useState(0);\n  const [sortColumn, setSortColumn] = useState(null);\n  const [sortDirection, setSortDirection] = useState(\"asc\");\n  const [rowData, setRowData] = useState([]);\n\n  // ...\n\n  let leaveApplicationHRObj = [];\n  let rowDataT = [];\n\n  const loadLeaveApplicationHRData = () => {\n    axios\n      .get(\"http://localhost:4000/api/leave-application-hr/\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        leaveApplicationHRObj = response.data;\n        console.log(\"response\", response.data);\n        setLeaveApplicationHRData(response.data);\n        setLoading(false);\n\n        rowDataT = [];\n\n        leaveApplicationHRObj.map((data) => {\n          let temp = {\n            data,\n            empID:\n              data[\"employee\"] &&\n              data[\"employee\"][0] &&\n              data[\"employee\"][0][\"empID\"],\n            Name:\n              data[\"employee\"] &&\n              data[\"employee\"][0] &&\n              data[\"employee\"][0][\"FirstName\"] +\n                \" \" +\n                data[\"employee\"][0][\"LastName\"],\n            Leavetype: data[\"Leavetype\"],\n            FromDate: data[\"FromDate\"].slice(0, 10),\n            ToDate: data[\"ToDate\"].slice(0, 10),\n            Reasonforleave: data[\"Reasonforleave\"],\n            Status: status(data[\"Status\"])\n          };\n\n          rowDataT.push(temp);\n        });\n\n        setRowData(rowDataT);\n\n        setTotalLeaves(response.data.length);\n        props.updateTotalLeaves(response.data.length);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  // ...\n\n  const onLeaveApplicationHRDelete = (e1, e2) => {\n    console.log(e1, e2);\n    if (window.confirm(\"Are you sure to delete this record? \") == true) {\n      axios\n        .delete(\n          \"http://localhost:4000/api/leave-application-hr/\" + e1 + \"/\" + e2,\n          {\n            headers: {\n              authorization: localStorage.getItem(\"token\") || \"\"\n            }\n          }\n        )\n        .then((res) => {\n          loadLeaveApplicationHRData();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const exportToPDF = () => {\n    window.confirm(\"Are you sure to download Leave record? \");\n    const { rowData } = this.state;\n    // Set A4 landscape dimensions\n    const pdfWidth = 297; // A4 width in mm\n    const pdfHeight = 210; // A4 height in mm\n    const doc = new jsPDF({\n      orientation: \"landscape\",\n      unit: \"mm\",\n      format: [pdfWidth, pdfHeight]\n    });\n\n    doc.setFontSize(18);\n    doc.text(\"Employee Leave Details\", pdfWidth / 2, 15, \"center\");\n    const headers = [\n      \"Emp Id\",\n      \"Leave Type\",\n      \"Start Date\",\n      \"End Date\",\n      \"Remarks\",\n      \"Status\"\n    ];\n    const data = rowData.map((row) => [\n      row.empID,\n      row.Leavetype,\n      row.FromDate,\n      row.ToDate,\n      row.Reasonforleave,\n      row.Status,\n\n      \"\" // Action column - you can customize this based on your requirements\n    ]);\n    doc.setFontSize(12);\n    doc.autoTable({\n      head: [headers],\n      body: data,\n      startY: 25\n    });\n\n    doc.save(\"leaveApplication_data.pdf\");\n  };\n\n  useEffect(() => {\n    loadLeaveApplicationHRData();\n  }, []);\n\n  const renderButton = (params) => {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() =>\n          onLeaveApplicationHRDelete(\n            params.data.data[\"employee\"][0][\"_id\"],\n            params.data.data[\"_id\"]\n          )\n        }\n      />\n    );\n  };\n\n  const renderEditButton = (params) => {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => props.onEditLeaveApplicationHR(params.data.data)}\n      />\n    );\n  };\n\n  const status = (s) => {\n    if (s == 1) {\n      return \"Pending\";\n    }\n    if (s == 2) {\n      return \"Approved\";\n    }\n    if (s == 3) {\n      return \"Rejected\";\n    }\n  };\n\n  const renderSortIcon = (field) => {\n    if (sortColumn === field) {\n      return sortDirection === \"asc\" ? \"▴\" : \"▾\";\n    }\n    return null;\n  };\n\n  const sortData = (columnName) => {\n    const { rowData, sortColumn, sortDirection } = this.state;\n    let newSortDirection = \"asc\";\n\n    if (sortColumn === columnName && sortDirection === \"asc\") {\n      newSortDirection = \"desc\";\n    }\n\n    const sortedData = [...rowData];\n\n    sortedData.sort((a, b) => {\n      const valueA = a[columnName];\n      const valueB = b[columnName];\n\n      let comparison = 0;\n\n      if (valueA > valueB) {\n        comparison = 1;\n      } else if (valueA < valueB) {\n        comparison = -1;\n      }\n\n      return sortDirection === \"desc\" ? comparison * -1 : comparison;\n    });\n\n    setRowData(sortedData);\n    setSortColumn(columnName);\n    setSortDirection(newSortDirection);\n  };\n  const rejectedLeaves = rowData.filter(\n    (data) => data.Status === \"Rejected\"\n  ).length;\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"d-flex justify-between\">\n        <h3 className=\"fw-bold text-muted\">\n          Rejected Leaves ({rejectedLeaves})\n        </h3>\n\n        <button\n          className=\"btn px-3 d-flex justify-center  aline-center gap-2\"\n          onClick={exportToPDF}\n        >\n          <BsFillFileEarmarkPdfFill className=\"text-danger fs-4\" />\n          <p className=\"my-auto fs-5 fw-bold\">PDF</p>\n        </button>\n      </div>\n\n      <div id=\"clear-both\" />\n      {!loading ? (\n        <div\n          className=\"mt-3\"\n          style={{\n            overflow: \"auto\",\n            height: \"85vh\",\n            width: \"100%\",\n            scrollbarWidth: \"thin\"\n          }}\n        >\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"empID\")}\n                >\n                  Employee ID {renderSortIcon(\"empID\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Name\")}\n                >\n                  Emp Name {renderSortIcon(\"Name\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Leavetype\")}\n                >\n                  Leave Type {renderSortIcon(\"Leavetype\")}\n                </th>\n                <th\n                  s\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"FromDate\")}\n                >\n                  Start Date {renderSortIcon(\"FromDate\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"ToDate\")}\n                >\n                  End Date {renderSortIcon(\"ToDate\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Status\")}\n                >\n                  Status {renderSortIcon(\"Status\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Reasonforleave\")}\n                >\n                  Remarks {renderSortIcon(\"Reasonforleave\")}\n                </th>\n                <th\n                  style={{\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\",\n                    textAlign: \"center\"\n                  }}\n                >\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {rowData\n                .filter((e) => e.Status == \"Rejected\")\n                .map((data, index) => (\n                  <tr key={index}>\n                    <td className=\"text-uppercase py-1\">{data.empID}</td>\n                    <td className=\"py-1\">{data.Name}</td>\n                    <td className=\"py-1\">{data.Leavetype}</td>\n                    <td className=\"py-1\">{data.FromDate}</td>\n                    <td className=\"py-1\">{data.ToDate}</td>\n                    <td className=\"py-1\">{data.Status}</td>\n                    <td className=\"py-1\">{data.Reasonforleave}</td>\n                    <td className=\"py-1\">\n                      <div\n                        className=\"d-flex gap-3 py-2\"\n                        style={{ cursor: \"pointer\" }}\n                      >\n                        <p title=\"Update\" className=\"m-auto text-primary\">\n                          <FontAwesomeIcon\n                            className=\"m-auto\"\n                            icon={faEdit}\n                            onClick={() =>\n                              props.onEditLeaveApplicationHR(data.data)\n                            }\n                          />\n                        </p>\n                        <p title=\"Delete\" className=\"m-auto text-danger\">\n                          <FontAwesomeIcon\n                            className=\"m-auto\"\n                            icon={faTrash}\n                            onClick={() =>\n                              onLeaveApplicationHRDelete(\n                                data.data[\"employee\"][0][\"_id\"],\n                                data.data[\"_id\"]\n                              )\n                            }\n                          />\n                        </p>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <div id=\"loading-bar\">\n          <RingLoader\n            css={override}\n            sizeUnit={\"px\"}\n            size={50}\n            color={\"#0000ff\"}\n            loading={true}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LeaveApplicationHRTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\LeaveStatus\\LeaveApplicationHRAccept.jsx",["902","903","904","905","906","907","908","909","910","911","912","913","914","915","916","917","918","919","920","921","922"],"import React, { useState, useEffect } from \"react\";\n// import \"./LeaveApplicationHRTable.css\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport {\n  Form,\n  Button,\n  Col,\n  Row,\n  Table,\n  Dropdown,\n  DropdownButton\n} from \"react-bootstrap\";\n\n// *************csv & pdf **************//\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { BsFillFileEarmarkPdfFill } from \"react-icons/bs\";\n// *************csv & pdf **************//\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nconst LeaveApplicationHRTable = (props) => {\n  const [leaveApplicationHRData, setLeaveApplicationHRData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchData, setSearchData] = useState(\"\");\n  const [totalLeaves, setTotalLeaves] = useState(0);\n  const [sortColumn, setSortColumn] = useState(null);\n  const [sortDirection, setSortDirection] = useState(\"asc\");\n  const [rowData, setRowData] = useState([]);\n\n  // ...\n\n  let leaveApplicationHRObj = [];\n  let rowDataT = [];\n\n  const loadLeaveApplicationHRData = () => {\n    axios\n      .get(\"http://localhost:4000/api/leave-application-hr/\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        leaveApplicationHRObj = response.data;\n        console.log(\"response\", response.data);\n        setLeaveApplicationHRData(response.data);\n        setLoading(false);\n\n        rowDataT = [];\n\n        leaveApplicationHRObj.map((data) => {\n          let temp = {\n            data,\n            empID:\n              data[\"employee\"] &&\n              data[\"employee\"][0] &&\n              data[\"employee\"][0][\"empID\"],\n            Name:\n              data[\"employee\"] &&\n              data[\"employee\"][0] &&\n              data[\"employee\"][0][\"FirstName\"] +\n                \" \" +\n                data[\"employee\"][0][\"LastName\"],\n            Leavetype: data[\"Leavetype\"],\n            FromDate: data[\"FromDate\"].slice(0, 10),\n            ToDate: data[\"ToDate\"].slice(0, 10),\n            Reasonforleave: data[\"Reasonforleave\"],\n            Status: status(data[\"Status\"])\n          };\n\n          rowDataT.push(temp);\n        });\n\n        setRowData(rowDataT);\n\n        setTotalLeaves(response.data.length);\n        props.updateTotalLeaves(response.data.length);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  // ...\n\n  const onLeaveApplicationHRDelete = (e1, e2) => {\n    console.log(e1, e2);\n    if (window.confirm(\"Are you sure to delete this record? \") == true) {\n      axios\n        .delete(\n          \"http://localhost:4000/api/leave-application-hr/\" + e1 + \"/\" + e2,\n          {\n            headers: {\n              authorization: localStorage.getItem(\"token\") || \"\"\n            }\n          }\n        )\n        .then((res) => {\n          loadLeaveApplicationHRData();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const exportToPDF = () => {\n    window.confirm(\"Are you sure to download Leave record? \");\n    const { rowData } = this.state;\n    // Set A4 landscape dimensions\n    const pdfWidth = 297; // A4 width in mm\n    const pdfHeight = 210; // A4 height in mm\n    const doc = new jsPDF({\n      orientation: \"landscape\",\n      unit: \"mm\",\n      format: [pdfWidth, pdfHeight]\n    });\n\n    doc.setFontSize(18);\n    doc.text(\"Employee Leave Details\", pdfWidth / 2, 15, \"center\");\n    const headers = [\n      \"Emp Id\",\n      \"Leave Type\",\n      \"Start Date\",\n      \"End Date\",\n      \"Remarks\",\n      \"Status\"\n    ];\n    const data = rowData.map((row) => [\n      row.empID,\n      row.Leavetype,\n      row.FromDate,\n      row.ToDate,\n      row.Reasonforleave,\n      row.Status,\n\n      \"\" // Action column - you can customize this based on your requirements\n    ]);\n    doc.setFontSize(12);\n    doc.autoTable({\n      head: [headers],\n      body: data,\n      startY: 25\n    });\n\n    doc.save(\"leaveApplication_data.pdf\");\n  };\n\n  useEffect(() => {\n    loadLeaveApplicationHRData();\n  }, []);\n\n  const renderButton = (params) => {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() =>\n          onLeaveApplicationHRDelete(\n            params.data.data[\"employee\"][0][\"_id\"],\n            params.data.data[\"_id\"]\n          )\n        }\n      />\n    );\n  };\n\n  const renderEditButton = (params) => {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => props.onEditLeaveApplicationHR(params.data.data)}\n      />\n    );\n  };\n\n  const status = (s) => {\n    if (s == 1) {\n      return \"Pending\";\n    }\n    if (s == 2) {\n      return \"Approved\";\n    }\n    if (s == 3) {\n      return \"Rejected\";\n    }\n  };\n\n  const renderSortIcon = (field) => {\n    if (sortColumn === field) {\n      return sortDirection === \"asc\" ? \"▴\" : \"▾\";\n    }\n    return null;\n  };\n\n  const sortData = (columnName) => {\n    const { rowData, sortColumn, sortDirection } = this.state;\n    let newSortDirection = \"asc\";\n\n    if (sortColumn === columnName && sortDirection === \"asc\") {\n      newSortDirection = \"desc\";\n    }\n\n    const sortedData = [...rowData];\n\n    sortedData.sort((a, b) => {\n      const valueA = a[columnName];\n      const valueB = b[columnName];\n\n      let comparison = 0;\n\n      if (valueA > valueB) {\n        comparison = 1;\n      } else if (valueA < valueB) {\n        comparison = -1;\n      }\n\n      return sortDirection === \"desc\" ? comparison * -1 : comparison;\n    });\n\n    setRowData(sortedData);\n    setSortColumn(columnName);\n    setSortDirection(newSortDirection);\n  };\n  const approvedLeaves = rowData.filter(\n    (data) => data.Status === \"Approved\"\n  ).length;\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"d-flex justify-between\">\n        <h3 className=\"fw-bold text-muted\">\n          Approved Leaves ({approvedLeaves})\n        </h3>\n\n        <button\n          className=\"btn px-3 d-flex justify-center  aline-center gap-2\"\n          onClick={exportToPDF}\n        >\n          <BsFillFileEarmarkPdfFill className=\"text-danger fs-4\" />\n          <p className=\"my-auto fs-5 fw-bold\">PDF</p>\n        </button>\n      </div>\n\n      <div id=\"clear-both\" />\n      {!loading ? (\n        <div\n          className=\"mt-3\"\n          style={{\n            overflow: \"auto\",\n            height: \"85vh\",\n            width: \"100%\",\n            scrollbarWidth: \"thin\"\n          }}\n        >\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"empID\")}\n                >\n                  Employee ID {renderSortIcon(\"empID\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Name\")}\n                >\n                  Emp Name {renderSortIcon(\"Name\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Leavetype\")}\n                >\n                  Leave Type {renderSortIcon(\"Leavetype\")}\n                </th>\n                <th\n                  s\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"FromDate\")}\n                >\n                  Start Date {renderSortIcon(\"FromDate\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"ToDate\")}\n                >\n                  End Date {renderSortIcon(\"ToDate\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Status\")}\n                >\n                  Status {renderSortIcon(\"Status\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Reasonforleave\")}\n                >\n                  Remarks {renderSortIcon(\"Reasonforleave\")}\n                </th>\n                <th\n                  style={{\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\",\n                    textAlign: \"center\"\n                  }}\n                >\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {rowData\n                .filter((e) => e.Status == \"Approved\")\n                .map((data, index) => (\n                  <tr key={index}>\n                    <td className=\"text-uppercase py-1\">{data.empID}</td>\n                    <td className=\"py-1\">{data.Name}</td>\n                    <td className=\"py-1\">{data.Leavetype}</td>\n                    <td className=\"py-1\">{data.FromDate}</td>\n                    <td className=\"py-1\">{data.ToDate}</td>\n                    <td className=\"py-1\">{data.Status}</td>\n                    <td className=\"py-1\">{data.Reasonforleave}</td>\n                    <td className=\"py-1\">\n                      <div\n                        className=\"d-flex gap-3 py-2\"\n                        style={{ cursor: \"pointer\" }}\n                      >\n                        <p title=\"Update\" className=\"m-auto text-primary\">\n                          <FontAwesomeIcon\n                            className=\"m-auto\"\n                            icon={faEdit}\n                            onClick={() =>\n                              props.onEditLeaveApplicationHR(data.data)\n                            }\n                          />\n                        </p>\n                        <p title=\"Delete\" className=\"m-auto text-danger\">\n                          <FontAwesomeIcon\n                            className=\"m-auto\"\n                            icon={faTrash}\n                            onClick={() =>\n                              onLeaveApplicationHRDelete(\n                                data.data[\"employee\"][0][\"_id\"],\n                                data.data[\"_id\"]\n                              )\n                            }\n                          />\n                        </p>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <div id=\"loading-bar\">\n          <RingLoader\n            css={override}\n            sizeUnit={\"px\"}\n            size={50}\n            color={\"#0000ff\"}\n            loading={true}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LeaveApplicationHRTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Dashboard\\ManagerDash.jsx",["923","924"],"// import React from \"react\";\n// import DashContent from \"./DashContent\";\n// import UpcomingBirthdays from \"../../../Pages/AddEmployee/UpcomingBirthdays\";\n// import HrCharts from \"../Chart/TaskChart\";\n// import DepartmentChart from \"../Chart/DepartmentChart\";\n// import HolidayList from \"../../../Pages/LeaveCalendar/HolidayList\";\n// import TodatAttendance from \"../attendance/TodaysAttendance\";\n\n// const HRDash = () => {\n//   return (\n//     // <div className=\"conatiner\">\n//     //   <div className=\"row\">\n//     //     <div className=\"col-md-9\">\n//     //       <DashContent />\n//     //     </div>\n\n//     //     <div className=\"col-md-3 m-0 pt-5\">\n//     //       <UpcomingBirthdays />\n//     //       <HrCharts />\n//     //       <UpcomingBirthdays />\n//     //     </div>\n//     //   </div>\n//     //   <div className=\"row\">\n//     //     <div className=\"col-md-4\">\n//     //       <HrCharts />\n//     //     </div>\n//     //     <div className=\"col-md-5\">\n//     //       <UpcomingBirthdays />\n//     //     </div>\n//     //   </div>\n//     // </div>\n//     <div className=\"main-container\">\n//       <h2 className=\"text-muted fw-bolder mb-4\">🪟 HRD DASHBOARD</h2>\n//       <div className=\"row gap-0 mx-0\">\n//         <div className=\"col-lg-9\">\n//           <DashContent />\n//           <div className=\"row row_flex\">\n//             <div className=\"col-lg-6\">\n//               <HrCharts />\n//             </div>\n//             <div className=\"col-lg-6\">\n//               <DepartmentChart />\n//             </div>\n//           </div>\n//           <div className=\"row row_flex\">\n//             {/* <div className=\"col-lg-12\">\n//               <TodatAttendance />\n//             </div> */}\n//           </div>\n//         </div>\n//         <div className=\"col-lg-3 \">\n//           <UpcomingBirthdays />\n//           <div className=\"holiday mt-3\">\n//             <HolidayList />\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default HRDash;\n\nimport React from \"react\";\nimport TaskChart from \"./Chart/TaskChart\";\nimport LeaveCount from \"./CountData/LeavesCount\";\nimport EmplolyeeCount from \"./CountData/EmployeeCount\";\nimport InnerDashContainer from \"../../InnerDashContainer\";\nimport UpcomingBirthdays from \"../../../Pages/AddEmployee/UpcomingBirthdays\";\nimport DepartmentChart from \"./Chart/DepartmentChart\";\nimport HolidayList from \"../../../Pages/LeaveCalendar/HolidayList\";\nimport TodatAttendance from \"../attendance/TodaysAttendance\";\nimport NoticeBoard from \"../Notification/NoticeBoard\";\nconst ManagerDash = () => {\n  return (\n    <InnerDashContainer>\n      <div className=\"row gap-0 mx-0\">\n        <div className=\"col-lg-9\">\n          <EmplolyeeCount />\n          <LeaveCount />\n\n          <div className=\"row row_flex mt-5\">\n            <div className=\"col-lg-6\">\n              <TaskChart />\n            </div>\n            <div className=\"col-lg-6\">\n              <DepartmentChart />\n            </div>\n          </div>\n          <div className=\"row row_flex\">\n            <div className=\"col-lg-12\">{/* <TodatAttendance /> */}</div>\n          </div>\n        </div>\n        <div className=\"col-lg-3\">\n          <UpcomingBirthdays />\n          <NoticeBoard/>\n          {/* <div className=\"holiday mt-3\">\n            <HolidayList />\n          </div> */}\n          <div className=\"col-md-9\"></div>\n        </div>\n      </div>\n    </InnerDashContainer>\n  );\n};\n\nexport default ManagerDash;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\attendance\\ViewAttendance.jsx",["925"],"\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { TfiReload } from \"react-icons/tfi\";\r\nimport { FaCircleInfo } from \"react-icons/fa6\";\r\nimport { MdOutlineRefresh } from \"react-icons/md\";\r\n\r\nconst AttendanceDetails = () => {\r\n  const [employeeId, setEmployeeId] = useState(\"\");\r\n  const [employees, setEmployees] = useState([]);\r\n  const [attendanceData, setAttendanceData] = useState(null);\r\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\r\n  const [isButtonClicked, setIsButtonClicked] = useState(false);\r\n  const [hoveredDate, setHoveredDate] = useState(null);\r\n  const [isInfoHovering, setIsInfoHovering] = useState(false);\r\n\r\n  const handleMouseEnter = (date) => {\r\n    setHoveredDate(date);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoveredDate(null);\r\n  };\r\n\r\n  const handleInfoMouseEnter = () => {\r\n    setIsInfoHovering(true);\r\n  };\r\n\r\n  const handleInfoMouseLeave = () => {\r\n    setIsInfoHovering(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEmployees();\r\n  }, []);\r\n\r\n  const fetchEmployees = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:4000/api/employee\", {\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      });\r\n      setEmployees(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching employees:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEmployeeChange = (event) => {\r\n    setEmployeeId(event.target.value);\r\n  };\r\n\r\n  // const handleFetchAttendance = async () => {\r\n  //   try {\r\n  //     const response = await axios.get(\r\n  //       `http://localhost:4000/api/attendance/${employeeId}`,\r\n  //       {\r\n  //         headers: {\r\n  //           Authorization: `Bearer ${localStorage.getItem(\"token\") || \"\"}`\r\n  //         }\r\n  //       }\r\n  //     );\r\n  //     let singleUser = response.data.filter((val) => {\r\n  //       return val.employeeObjID._id === employeeId;\r\n  //     });\r\n  //     setAttendanceData(singleUser.length > 0 ? singleUser[0] : null);\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching attendance data:\", error);\r\n  //   }\r\n  // };\r\n\r\n  const handleFetchAttendance = async () => {\r\n    setIsButtonClicked(true);\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:4000/api/attendance/${employeeId}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\") || \"\"}`\r\n          }\r\n        }\r\n      );\r\n\r\n      let singleUser = response.data.filter((val) => {\r\n        return val.employeeObjID && val.employeeObjID._id === employeeId;\r\n      });\r\n\r\n      setAttendanceData(singleUser.length > 0 ? singleUser[0] : null);\r\n    } catch (error) {\r\n      console.error(\"Error fetching attendance data:\", error);\r\n    } finally {\r\n      // Reset the isButtonClicked state after a delay to allow the animation to play\r\n      setTimeout(() => {\r\n        setIsButtonClicked(false);\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  const getTotalHolidays = () => {\r\n    if (\r\n      attendanceData &&\r\n      attendanceData.user &&\r\n      attendanceData.user.holidayObjID\r\n    ) {\r\n      return attendanceData.user.holidayObjID.holidays.length;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  const getMonthName = (monthNumber) => {\r\n    switch (monthNumber) {\r\n      case 1:\r\n        return \"January\";\r\n      case 2:\r\n        return \"February\";\r\n      case 3:\r\n        return \"March\";\r\n      case 4:\r\n        return \"April\";\r\n      case 5:\r\n        return \"May\";\r\n      case 6:\r\n        return \"June\";\r\n      case 7:\r\n        return \"July\";\r\n      case 8:\r\n        return \"August\";\r\n      case 9:\r\n        return \"September\";\r\n      case 10:\r\n        return \"October\";\r\n      case 11:\r\n        return \"November\";\r\n      case 12:\r\n        return \"December\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const getMonthsForYear = (year) => {\r\n    if (year === new Date().getFullYear()) {\r\n      return Array.from({ length: new Date().getMonth() + 1 }, (_, i) => i + 1);\r\n    }\r\n    return Array.from({ length: 12 }, (_, i) => i + 1);\r\n  };\r\n\r\n  const getYears = () => {\r\n    if (attendanceData && attendanceData.years) {\r\n      const currentYear = new Date().getFullYear();\r\n      return attendanceData.years.filter((year) => year.year <= currentYear);\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const millisecondsToTime = (milliseconds) => {\r\n    const millisecond = Math.floor(milliseconds);\r\n    const seconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n\r\n    const formattedHours = String(hours).padStart(2, \"0\");\r\n    const formattedMinutes = String(minutes % 60).padStart(2, \"0\");\r\n    const formattedSeconds = String(seconds % 60).padStart(2, \"0\");\r\n    const formattedMillisecond = String(millisecond % 60).padStart(2, \"0\");\r\n\r\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}:${formattedMillisecond}`;\r\n  };\r\n\r\n  const getAttendanceMark = (date) => {\r\n    const loginTime = date && date.loginTime[0];\r\n    if (loginTime) {\r\n      const [loginHour, loginMinute] = loginTime.split(\":\").map(Number);\r\n      if (loginHour > 9 || (loginHour === 9 && loginMinute > 45)) {\r\n        return \"H\";\r\n      } else if (loginHour > 9 || (loginHour === 9 && loginMinute > 30)) {\r\n        return \"L\";\r\n      }\r\n    }\r\n    return loginTime ? \"P\" : \"A\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column p-5 gap-3\">\r\n      {/* <div className=\"d-flex gap-3 \">\r\n        <div>\r\n          <select\r\n            className=\"form-select w-100 shadow-sm text-muted\"\r\n            id=\"employeeId\"\r\n            value={employeeId}\r\n            onChange={handleEmployeeChange}\r\n          >\r\n            <option value=\"\" disabled>\r\n              --Select an employee--\r\n            </option>\r\n\r\n            {employees\r\n              .sort((a, b) => a.empID - b.empID)\r\n              .map((employee) => (\r\n                <option\r\n                  className=\"text-uppercase\"\r\n                  key={employee._id}\r\n                  value={employee._id}\r\n                >\r\n                  🪪 ({employee.empID}) {employee.FirstName}-{employee.LastName}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n\r\n        <button\r\n          className=\"btn shadow btn-dark fw-bolder\"\r\n          style={{ width: \"fit-content\" }}\r\n          onClick={handleFetchAttendance}\r\n        >\r\n          Fetch Attendance\r\n        </button>\r\n      </div> */}\r\n      <div className=\"d-flex gap-3 justify-content-between\">\r\n        <div>\r\n          <select\r\n            className=\"form-select w-100 shadow-sm text-muted\"\r\n            id=\"employeeId\"\r\n            value={employeeId}\r\n            onChange={handleEmployeeChange}\r\n          >\r\n            <option value=\"\" disabled>\r\n              --Select an employee--\r\n            </option>\r\n            {employees\r\n              .sort((a, b) => a.empID - b.empID)\r\n              .map((employee) => (\r\n                <option\r\n                  className=\"text-uppercase\"\r\n                  key={employee._id}\r\n                  value={employee._id}\r\n                >\r\n                  <p>\r\n                    🪪 ({employee.empID}) {employee.FirstName}\r\n                  </p>\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n        <button\r\n          disabled={!employeeId}\r\n          style={{ display: \"flex\", alignItems: \"center\", gap: \".5rem\" }}\r\n          className=\"btn shadow btn-dark fw-bolder\"\r\n          onClick={handleFetchAttendance}\r\n        >\r\n          <MdOutlineRefresh\r\n            className={`fs-4 ${isButtonClicked ? \"rotate\" : \"\"}`}\r\n          />{\" \"}\r\n          Get\r\n        </button>\r\n      </div>\r\n\r\n      {attendanceData && (\r\n        <div className=\"d-flex gap-3\">\r\n          <div>\r\n            <label htmlFor=\"year\">Select a year:</label>\r\n            <select\r\n              className=\"form-select shadow\"\r\n              id=\"year\"\r\n              value={selectedYear}\r\n              onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n            >\r\n              {getYears().map((year) => (\r\n                <option key={year.year} value={year.year}>\r\n                  {year.year}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"month\">Select a month:</label>\r\n            <select\r\n              className=\"form-select shadow\"\r\n              id=\"month\"\r\n              value={selectedMonth}\r\n              onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\r\n            >\r\n              {getMonthsForYear(selectedYear).map((month) => (\r\n                <option key={month} value={month}>\r\n                  {getMonthName(month)}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {attendanceData && (\r\n        <div style={{ overflow: \"auto\", height: \"80vh\" }}>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr className=\"shadow-sm\">\r\n                <th className=\"bg-dark text-white text-center\">Date</th>\r\n                <th className=\"bg-dark text-white text-center\">Status</th>\r\n                <th className=\"bg-dark text-white\">Login Time</th>\r\n                <th className=\"bg-dark text-white\">Logout Time</th>\r\n                <th className=\"bg-dark text-white\">Break</th>\r\n                <th className=\"bg-dark text-white\">Total Login</th>\r\n                <th className=\"bg-dark text-white\">Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {getYears().map((year) =>\r\n                year.months\r\n                  .filter((month) => month.month === selectedMonth)\r\n                  .map((month) =>\r\n                    month.dates\r\n                      .sort((a, b) => a.date - b.date)\r\n                      .map((date) => (\r\n                        <tr\r\n                          className=\"shadow-sm\"\r\n                          key={date.date}\r\n                          id={`attendance-row-${date.date}`} // Assign unique ID to each row\r\n                          onMouseEnter={() => handleMouseEnter(date.date)}\r\n                          onMouseLeave={() => handleMouseLeave()}\r\n                        >\r\n                          <td className=\"text-center\">\r\n                            <span className=\"fw-bold bg-info py-1 px-2  shadow-sm text-white\">\r\n                              {date.date}\r\n                            </span>\r\n                          </td>\r\n                          <td\r\n                            style={{ whiteSpace: \"pre\", textAlign: \"center\" }}\r\n                          >\r\n                            {getAttendanceMark(date)}\r\n                          </td>\r\n                          <td className=\"text-uppercase\">\r\n                            {date.loginTime[0]}\r\n                          </td>\r\n                          <td className=\"text-uppercase\">\r\n                            {date.logoutTime[date.logoutTime.length - 1]}\r\n                          </td>\r\n                          <td className=\"position-relative bg-white\">\r\n                            <div\r\n                              style={{\r\n                                display: \"flex \",\r\n                                justifyContent: \"start\",\r\n                                alignItems: \"center\"\r\n                              }}\r\n                              className=\"fs-6 gap-2 \"\r\n                              onMouseEnter={handleInfoMouseEnter}\r\n                              onMouseLeave={handleInfoMouseLeave}\r\n                            >\r\n                              <span\r\n                                style={{ scale: \"0.7\" }}\r\n                                className=\"bg-warning py-0  text-white  px-2 rounded-5 my-auto\"\r\n                              >\r\n                                {date.breakTime.length}\r\n                              </span>\r\n                              <span className=\"fw-bold text-dark fs-6\">\r\n                                {millisecondsToTime(date.totalBrake)}\r\n                              </span>{\" \"}\r\n                              <FaCircleInfo\r\n                                style={{ fontSize: \".9rem\" }}\r\n                                className=\"text-info \"\r\n                              />\r\n                            </div>\r\n\r\n                            <div\r\n                              style={{ zIndex: \"5\", right: \"0%\" }}\r\n                              className=\"position-absolute\"\r\n                            >\r\n                              {isInfoHovering &&\r\n                                hoveredDate === date.date && ( // Check if info button is hovered and the date is the hovered date\r\n                                  <table className=\"table table-bordered table-striped\">\r\n                                    <thead>\r\n                                      <tr className=\"shadow-sm p-0\">\r\n                                        <th className=\"bg-info  py-0 text-white\">\r\n                                          Break\r\n                                        </th>\r\n                                        <th className=\"bg-info  py-0 text-white\">\r\n                                          Resume\r\n                                        </th>\r\n                                        <th\r\n                                          className=\"text-end  py-0 bg-info text-white\"\r\n                                          style={{ whiteSpace: \"pre\" }}\r\n                                        >\r\n                                          Total Break\r\n                                        </th>\r\n                                      </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                      {date.breakTime.map(\r\n                                        (breakTime, index) => (\r\n                                          <tr className=\"shadow-sm\" key={index}>\r\n                                            <td\r\n                                              className=\"text-uppercase  py-1 text-center\"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {breakTime}\r\n                                            </td>\r\n                                            <td\r\n                                              className=\"text-uppercase  py-1 text-center\"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {date.ResumeTime[index]}\r\n                                            </td>\r\n                                            <td\r\n                                              className=\"text-end py-1 \"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {millisecondsToTime(\r\n                                                date.BreakData[index]\r\n                                              )}\r\n                                            </td>\r\n                                          </tr>\r\n                                        )\r\n                                      )}\r\n                                    </tbody>\r\n                                  </table>\r\n                                )}\r\n                            </div>\r\n                          </td>\r\n                          <td>{millisecondsToTime(date.totalLogAfterBreak)}</td>\r\n                          <td>{date.status}</td>\r\n                        </tr>\r\n                      ))\r\n                  )\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n      {attendanceData === null && (\r\n        <div\r\n          style={{\r\n            height: \"80vh\",\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            wordSpacing: \"5px\",\r\n            flexDirection: \"column\",\r\n            gap: \"1rem\"\r\n          }}\r\n        >\r\n          <div className=\"fs-2 fw-bolder\">\r\n            <TfiReload className=\"spinner-border text-info\" />\r\n          </div>\r\n          <p className=\"text-muted\">\r\n            User not selected. To view data, please select a user.\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AttendanceDetails;\r\n\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\attendance\\TodaysAttendance.jsx",["926","927","928","929","930","931","932","933"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AiOutlineMore } from \"react-icons/ai\";\r\nimport { TbLogin } from \"react-icons/tb\";\r\nimport { TbLogin2 } from \"react-icons/tb\";\r\n\r\nconst TodaysAttendance = () => {\r\n  const [activeCategory, setActiveCategory] = useState(null);\r\n  const [attendanceData, setAttendanceData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAttendanceData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          \"http://localhost:4000/api/todays-attendance\"\r\n        );\r\n        setAttendanceData(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching today's attendance data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchAttendanceData();\r\n  }, []);\r\n\r\n  const Today = () => {\r\n    const options = { day: \"2-digit\", month: \"2-digit\", year: \"numeric\" };\r\n    return new Date()\r\n      .toLocaleDateString(undefined, options)\r\n      .split(\"/\")\r\n      .reverse()\r\n      .join(\"-\");\r\n  };\r\n\r\n  const today = new Date();\r\n  const yyyy = today.getFullYear();\r\n  let mm = today.getMonth() + 1;\r\n  let dd = today.getDate();\r\n  if (dd < 10) dd = \"0\" + dd;\r\n  if (mm < 10) mm = \"0\" + mm;\r\n  let dayCurrent = today.getDay();\r\n\r\n  console.log(\"Today's Date:\", `${dd}-${mm}-${yyyy}`);\r\n  console.log(\"Day of the Week:\", dayCurrent);\r\n\r\n  const getAttendanceMark = (user) => {\r\n    const loginTime = user.attendance && user.attendance.loginTime[0];\r\n    if (loginTime) {\r\n      const [loginHour, loginMinute] = loginTime.split(\":\").map(Number);\r\n      if (loginHour > 9 || (loginHour === 9 && loginMinute > 45)) {\r\n        return \"Half Day\";\r\n      } else if (loginHour > 9 || (loginHour === 9 && loginMinute > 30)) {\r\n        return \"Late\";\r\n      }\r\n    }\r\n    return loginTime ? \"Present\" : \"Absent\";\r\n  };\r\n\r\n  const calculateTotalLoginTime = (loginTimeMs, logoutTimeMs) => {\r\n    console.log(\"Login Time (ms):\", loginTimeMs);\r\n    console.log(\"Logout Time (ms):\", logoutTimeMs);\r\n\r\n    if (loginTimeMs && logoutTimeMs) {\r\n      const totalMilliseconds = logoutTimeMs - loginTimeMs;\r\n      console.log(\"Total Milliseconds:\", totalMilliseconds);\r\n\r\n      // Calculation logic...\r\n      const hours = Math.floor(totalMilliseconds / (60 * 60 * 1000));\r\n      const minutes = Math.floor(\r\n        (totalMilliseconds % (60 * 60 * 1000)) / (60 * 1000)\r\n      );\r\n      const seconds = Math.floor((totalMilliseconds % (60 * 1000)) / 1000);\r\n      return `${hours} H:${minutes} M:${seconds} S`;\r\n    }\r\n    return \"--\";\r\n  };\r\n\r\n  const calculatetotalBrake = (totalBrake) => {\r\n    console.log(\"Total Break Time:\", totalBrake);\r\n\r\n    if (totalBrake) {\r\n      const totalMilliseconds = totalBrake;\r\n      console.log(\"Total Milliseconds:\", totalMilliseconds);\r\n\r\n      // Calculation logic...\r\n      const hours = Math.floor(totalMilliseconds / (60 * 60 * 1000));\r\n      const minutes = Math.floor(\r\n        (totalMilliseconds % (60 * 60 * 1000)) / (60 * 1000)\r\n      );\r\n      const seconds = Math.floor((totalMilliseconds % (60 * 1000)) / 1000);\r\n      return `${hours} H:${minutes} M:${seconds} S`;\r\n    }\r\n    return \"--\";\r\n  };\r\n\r\n  const status = (s) => {\r\n    if (s == 0) {\r\n      return \"Sunday\";\r\n    }\r\n    if (s == 1) {\r\n      return \"Monday\";\r\n    }\r\n    if (s == 2) {\r\n      return \"Tuesday\";\r\n    }\r\n    if (s == 3) {\r\n      return \"Wednedsy\";\r\n    }\r\n    if (s == 4) {\r\n      return \"Thrusday\";\r\n    }\r\n    if (s == 5) {\r\n      return \"Friday\";\r\n    }\r\n    if (s == 6) {\r\n      return \"Saturday\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"d-flex justify-content-between py-3\">\r\n        <h4 className=\"fw-bolder my-auto text-success mb-2\">\r\n          Today's Attendance\r\n        </h4>\r\n        <span className=\"p-0 fw-bolder fs-6 text-muted d-flex flex-column \">\r\n          <span className=\"m-0 p-0 fs-6 text-center bg-white shadow-sm rounded-5 px-2\">\r\n            {\" \"}\r\n            <span className=\"fw-bold\">{dd}</span>-\r\n            <span className=\"fw-bold\">{mm}</span>-\r\n            <span className=\"fw-bold\">{yyyy}</span>\r\n          </span>\r\n          <span className=\"text-uppercase m-0 p-0 text-primary fs-4 text-center\">\r\n            {status(dayCurrent)}\r\n          </span>\r\n        </span>\r\n      </div>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th\r\n              style={{\r\n                background: \"var(--primaryDashColorDark)\",\r\n                color: \"var(--primaryDashMenuColor)\"\r\n              }}\r\n            >\r\n              Employee\r\n            </th>\r\n            <th\r\n              style={{\r\n                background: \"var(--primaryDashColorDark)\",\r\n                color: \"var(--primaryDashMenuColor)\"\r\n              }}\r\n            >\r\n              <TbLogin /> Login Time\r\n            </th>\r\n            <th\r\n              style={{\r\n                background: \"var(--primaryDashColorDark)\",\r\n                color: \"var(--primaryDashMenuColor)\"\r\n              }}\r\n            >\r\n              <TbLogin2 /> Logout Time\r\n            </th>\r\n            <th\r\n              style={{\r\n                background: \"var(--primaryDashColorDark)\",\r\n                color: \"var(--primaryDashMenuColor)\"\r\n              }}\r\n            >\r\n              Total Break\r\n            </th>\r\n            <th\r\n              style={{\r\n                background: \"var(--primaryDashColorDark)\",\r\n                color: \"var(--primaryDashMenuColor)\"\r\n              }}\r\n            >\r\n              Total Login\r\n            </th>\r\n            <th\r\n              style={{\r\n                background: \"var(--primaryDashColorDark)\",\r\n                color: \"var(--primaryDashMenuColor)\"\r\n              }}\r\n            >\r\n              Status\r\n            </th>\r\n            <th\r\n              style={{\r\n                background: \"var(--primaryDashColorDark)\",\r\n                color: \"var(--primaryDashMenuColor)\"\r\n              }}\r\n            >\r\n              Mark\r\n            </th>\r\n            <th\r\n              style={{\r\n                background: \"var(--primaryDashColorDark)\",\r\n                color: \"var(--primaryDashMenuColor)\"\r\n              }}\r\n            >\r\n              Break Count\r\n            </th>\r\n            <th\r\n              style={{\r\n                background: \"var(--primaryDashColorDark)\",\r\n                color: \"var(--primaryDashMenuColor)\"\r\n              }}\r\n            ></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {attendanceData.map((user) => {\r\n            const mark = getAttendanceMark(user);\r\n            return (\r\n              <tr key={user.userId}>\r\n                <td className=\"fw-bold\">\r\n                  <div className=\"d-flex w-100 align-items-center gap-2\">\r\n                    <div\r\n                      style={{\r\n                        height: \"43px\",\r\n                        width: \"43px\",\r\n                        overflow: \"hidden\"\r\n                      }}\r\n                    >\r\n                      <img\r\n                        style={{\r\n                          height: \"100%\",\r\n                          width: \"100%\",\r\n                          objectFit: \"cover\"\r\n                        }}\r\n                        src=\"https://tse3.mm.bing.net/th?id=OIP.-d8GY5axNJZYoXsNOUJ4iwAAAA&pid=Api&P=0&h=180\"\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <p\r\n                        style={{ fontSize: \".85rem\" }}\r\n                        className=\"p-0 m-0 w-100\"\r\n                      >\r\n                        {user.empID}\r\n                      </p>\r\n                      <p\r\n                        style={{ fontSize: \".95rem\" }}\r\n                        className=\"p-0 m-0 w-100 text-uppercase\"\r\n                      >\r\n                        {user.FirstName} {user.LastName}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </td>\r\n                <td\r\n                  style={{ verticalAlign: \"middle\" }}\r\n                  className=\"text-uppercase\"\r\n                >\r\n                  {user.attendance ? user.attendance.loginTime[0] : \"N/A\"}\r\n                </td>\r\n                <td\r\n                  style={{ verticalAlign: \"middle\" }}\r\n                  className=\"text-uppercase\"\r\n                >\r\n                  {user.attendance\r\n                    ? user.attendance.logoutTime[\r\n                        user.attendance.logoutTime.length - 1\r\n                      ]\r\n                    : \"N/A\"}\r\n                </td>\r\n                <td style={{ verticalAlign: \"middle\" }}>\r\n                  {calculatetotalBrake(\r\n                    user.attendance ? user.attendance.totalBrake : null\r\n                  )}\r\n                </td>\r\n                <td style={{ verticalAlign: \"middle\" }}>\r\n                  {calculateTotalLoginTime(\r\n                    user.attendance ? user.attendance.loginTimeMs[0] : null,\r\n                    user.attendance\r\n                      ? user.attendance.logoutTimeMs[\r\n                          user.attendance.logoutTimeMs.length - 1\r\n                        ]\r\n                      : null\r\n                  )}\r\n                </td>\r\n                <td\r\n                  className=\"text-capitalize\"\r\n                  style={{ verticalAlign: \"middle\" }}\r\n                >\r\n                  {user.attendance ? user.attendance.status : \"N/A\"}\r\n                </td>\r\n                <td style={{ verticalAlign: \"middle\" }} className=\"text-center\">\r\n                  <span\r\n                    style={{ fontSize: \".8rem\" }}\r\n                    className={`py-1 px-3 rounded-5 shadow-sm fw-bold ${\r\n                      mark === \"Present\"\r\n                        ? \"bg-success text-white\"\r\n                        : mark === \"Late\"\r\n                        ? \"bg-info text-white\"\r\n                        : mark === \"Half Day\"\r\n                        ? \"bg-warning text-white\"\r\n                        : \"bg-danger text-white\"\r\n                    }`}\r\n                  >\r\n                    {mark}\r\n                  </span>\r\n                </td>\r\n                <td style={{ verticalAlign: \"middle\" }} className=\"text-center\">\r\n                  {user.attendance ? user.attendance.breakTime.length : \"N/A\"}\r\n                </td>\r\n                <td\r\n                  style={{ zIndex: \"1\", verticalAlign: \"middle\" }}\r\n                  className=\"text-center\"\r\n                >\r\n                  <button\r\n                    onMouseEnter={() => setActiveCategory(user)}\r\n                    onMouseLeave={() => setActiveCategory(null)}\r\n                    className=\" btn p-0 fw-bold fs-5 position-relative\"\r\n                  >\r\n                    <AiOutlineMore />{\" \"}\r\n                    <span\r\n                      style={{\r\n                        display: activeCategory === user ? \"flex\" : \"none\"\r\n                      }}\r\n                    >\r\n                      <Link\r\n                        to=\"/hr/viewAttenDance\"\r\n                        style={{\r\n                          position: \"absolute\",\r\n                          whiteSpace: \"pre\",\r\n                          right: \"70%\",\r\n                          bottom: \"-100%\",\r\n                          zIndex: \"5\"\r\n                        }}\r\n                        className=\"shadow p-2 fs-6\"\r\n                      >\r\n                        Detailed\r\n                      </Link>\r\n                    </span>\r\n                  </button>{\" \"}\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodaysAttendance;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\ManagerTaskManagement\\ManagerNewTask.jsx",["934","935"],"import React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { MdCancel } from \"react-icons/md\";\nimport { IoCheckmarkDoneSharp } from \"react-icons/io5\";\nimport { BsFiletypeDoc } from \"react-icons/bs\";\nimport { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\nimport {v4 as uuid} from \"uuid\";\nconst ManagerNewTask = () => {\n\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [, setIsAccepted] = useState(false);\n  const [, setIsRejected] = useState(false);\n  \n  const {socket} = useContext(AttendanceContext);\n  const email = localStorage.getItem(\"Email\");\n  const calculateRemainingTime = (endDate) => {\n    const now = new Date();\n    const endDateTime = new Date(endDate);\n    let remainingTime = endDateTime - now;\n\n    if (remainingTime < 0) {\n      // If remaining time is negative, consider it as delay\n      remainingTime = Math.abs(remainingTime);\n      return { delay: true, days: 0, hours: 0, minutes: 0 };\n    } else {\n      // Calculate remaining days, hours, minutes, and seconds\n      const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(\n        (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const minutes = Math.floor(\n        (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\n      );\n      return { delay: false, days, hours, minutes };\n    }\n  };\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\");\n      console.log(response.data);\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error.message);\n      setError(\"Error fetching tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n      // Schedule the next update after 1 minute (adjust as needed)\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n\n    return () => clearTimeout();\n  }, []);\n\n  const AcceptTask = async (taskID, taskName, adminMail) => {\n    try {\n      setIsAccepted(true);\n\n      // Prompt the user for Accept remarks\n      const AcceptTaskRemark = prompt(\"Enter remarks for Accept Task:\");\n\n      if (AcceptTaskRemark === null) {\n        // If the user clicks Cancel in the prompt, do nothing\n        setIsAccepted(false);\n        return;\n      }\n\n      // Update the task status to \"Cancelled\" in the database\n      await axios.put(`http://localhost:4000/api/tasks/${taskID}`, {\n        status: \"Pending\",\n        comment: AcceptTaskRemark\n      });\n\n      // Display success notification\n      alert(\"Task Accepteed successfully!\");\n      const taskId = uuid();\n      const data = {\n        taskId,\n        status: \"unseen\",\n        path: \"taskstatus\",\n        senderMail: email,\n        taskName,\n        message: `Task Accepted by ${email}`,\n        adminMail,\n        Account: 1,\n        taskStatus: \"Accepted\",\n      \n      }\n            // Update the UI by fetching the latest tasks;\n            socket.emit(\"adminTaskNotification\", data);\n            console.log(data)\n      // Update the UI by fetching the latest tasks\n      fetchData();\n    } catch (error) {\n      console.error(\"Error canceling task:\", error.message);\n      alert(\"Failed to cancel task. Please try again.\");\n    } finally {\n      setIsAccepted(false);\n    }\n  };\n  const RejectTask = async (taskID, taskName, adminMail) => {\n    try {\n      setIsRejected(true);\n      const RejectRemarks = prompt(\"Enter remarks for Reject Task:\");\n\n      if (RejectRemarks === null) {\n        setIsRejected(false);\n        return;\n      }\n\n      await axios.put(`http://localhost:4000/api/tasks/${taskID}`, {\n        status: \"Rejected\",\n        comment: RejectRemarks\n      });\n\n      alert(\"Task Rejected\");\n      const taskId = uuid();\n      const data = {\n        taskId,\n        status: \"unseen\",\n        path: \"taskstatus\",\n        senderMail: email,\n        taskName,\n        message: `Task Rejected by ${email}`,\n        adminMail,\n        Account: 1,\n        taskStatus: \"Rejected\",\n      \n      }\n      socket.emit(\"adminTaskNotification\", data);\n      fetchData();\n    } catch (error) {\n      console.error(\"Error Rejecting task:\", error.message);\n      alert(\"Failed to Reject task. Please try again.\");\n    } finally {\n      setIsRejected(false);\n    }\n  };\n\n  const newTasks = tasks.filter(\n    (task) => task.status === \"Assigned\" && task.managerEmail === email\n  ).length;\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\n        ⭐ New Task ({newTasks})\n      </h1>\n      <p className=\"text-muted\">You can view all New task here!</p>{\" \"}\n      <h1 className=\"fs-3 fw-bolder text-uppercase \"></h1>\n      {loading && (\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          className=\"d-flex aline-center gap-2\"\n        >\n          <div\n            className=\"spinner-grow bg-primary\"\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            role=\"status\"\n          ></div>\n\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n      >\n        {tasks\n          .filter(\n            (task) => task.status === \"Assigned\" && task.managerEmail === email\n          )\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{\n                  height: \"fit-content\",\n                  background:\n                    \"linear-gradient(165deg,#11009E, #700B97, 90%, #C84B31)\"\n                }}\n                className=\"d-flex justify-content-between aline-center form-control text-white \"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-primary fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div className=\"d-flex gap-2 RemainingTimeHandel justify-content-between \">\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div>\n                      <div className=\"text-center d-none\">\n                        <div className=\"form-control  fw-bold p-0\">\n                          {calculateRemainingTime(task.endDate).days}{\" \"}\n                        </div>{\" \"}\n                        <div>Day</div>\n                      </div>\n                      <h5 className=\"btn btn-danger p-1 px-3 fw-bold\">Late</h5>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).days}{\" \"}\n                      </div>{\" \"}\n                      <div>Day</div>\n                    </div>\n                  )}\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div className=\"text-center d-none\">\n                      <div className=\"form-control  fw-bold p-0\">\n                        {calculateRemainingTime(task.endDate).hours}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).hours}{\" \"}\n                      </div>{\" \"}\n                      <div>Hrs</div>\n                    </div>\n                  )}\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div className=\"text-center d-none\">\n                      <div className=\"form-control fw-bold p-0\">\n                        {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  )}\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <p\n                    style={{ height: \"fit-content\" }}\n                    className=\"text-start fs-6 form-control\"\n                  >\n                    <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                    {task.description}\n                  </p>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Created By <br /> <span>{task.managerEmail}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Start Date <br />{\" \"}\n                      <span>\n                        {new Date(task.startDate).toLocaleDateString()}\n                      </span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      End Date <br />{\" \"}\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <span>\n                        Task Status <br /> {task.status}\n                      </span>\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p>\n                      <span className=\"fw-bold\">Remarks : </span> {task.comment}\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <button\n                      className=\"btn btn-info col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() => AcceptTask(task._id, task.Taskname, task.adminMail)}\n                    >\n                      <IoCheckmarkDoneSharp />\n                      Accept\n                    </button>\n                    <button className=\"btn btn-primary col-2 d-flex justify-center aline-center gap-2\">\n                      <BsFiletypeDoc />\n                      View Docs\n                    </button>\n                    <button\n                      className=\"btn btn-primary col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() => RejectTask(task._id)}\n                    >\n                      <MdCancel />\n                      Reject\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ManagerNewTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\ManagerTaskManagement\\ManagerCencelledTask.jsx",["936"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst ManagerCencelledTask = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\", {\n        params: { status: \"Cancelled\" }\n      });\n\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching cancelled tasks:\", error.message);\n      setError(\"Error fetching cancelled tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const fetchDataWithTimeout = async () => {\n      await fetchData();\n    };\n\n    fetchDataWithTimeout();\n  }, []);\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\n        ❌ Cancelled Task\n      </h1>\n      <p className=\"text-muted\">You can view all Cancelled task here!</p>{\" \"}\n      {loading && (\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          className=\"d-flex aline-center gap-2\"\n        >\n          <div\n            className=\"spinner-grow bg-primary\"\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            role=\"status\"\n          ></div>\n\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n      >\n        {tasks\n          .filter((task) => task.status === \"Cancelled\")\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{\n                  height: \"fit-content\",\n                  background:\n                    \"linear-gradient(165deg,#11009E, #700B97, 90%, #C84B31)\"\n                }}\n                className=\"d-flex justify-content-between aline-center form-control text-white\"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-danger fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div className=\"\">\n                  <p className=\"btn btn-danger m-auto fw-bold\">Cancelled</p>\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div\n                  style={{\n                    width: \"99.4%\",\n                    height: \"100%\",\n                    zIndex: \"5\",\n                    backgroundColor: \"rgba(128, 128, 128, 0.422)\",\n                    textShadow: \"-5px 5px 5px rgba(128, 128, 128, 0.422)\"\n                  }}\n                  className=\"watermark form-control position-absolute d-flex justify-content-center aline-center\"\n                >\n                  <h1 className=\"text-uppercase text-light fw-bolder\">\n                    c a n c e l l e d\n                  </h1>\n                </div>\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <div\n                    style={{ position: \"relative\" }}\n                    className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n                  >\n                    <div\n                      style={{\n                        width: \"99.4%\",\n                        height: \"100%\",\n                        zIndex: \"5\",\n                        backgroundColor: \"rgba(128, 128, 128, 0.422)\",\n                        textShadow: \"-5px 5px 5px rgba(128, 128, 128, 0.422)\"\n                      }}\n                      className=\"watermark form-control   position-absolute d-flex justify-content-center aline-center\"\n                    >\n                      <h1 className=\"text-uppercase text-light fw-bolder\">\n                        c a n c e l l e d\n                      </h1>\n                    </div>\n                    <div\n                      style={{ height: \"fit-content\" }}\n                      className=\"form-control\"\n                    >\n                      <p\n                        style={{ height: \"fit-content\" }}\n                        className=\"text-start fs-6 form-control\"\n                      >\n                        <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                        {task.description}\n                      </p>\n                      <div\n                        style={{ height: \"fit-content\" }}\n                        className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                      >\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          Task Durations <br />{\" \"}\n                          <span>{task.duration} days</span>{\" \"}\n                        </p>\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          Created By <br /> <span> {task.managerEmail}</span>\n                        </p>\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          Start Date <br />{\" \"}\n                          <span>\n                            {new Date(task.startDate).toLocaleDateString()}\n                          </span>\n                        </p>\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          End Date <br />{\" \"}\n                          <span>\n                            {new Date(task.endDate).toLocaleDateString()}\n                          </span>\n                        </p>\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          <span>\n                            Task Status <br /> {task.status}\n                          </span>\n                        </p>\n                      </div>\n                      <div\n                        style={{ height: \"fit-content\" }}\n                        className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                      >\n                        <p>\n                          <span className=\"fw-bold\">Remarks : </span>{\" \"}\n                          {task.comment}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ManagerCencelledTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\ManagerTaskManagement\\ManagerCompletedTask.jsx",["937"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst ManagerCompletedTask = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const email = localStorage.getItem(\"Email\");\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\", {\n        params: { status: \"Completed\" } // Filter by status \"Completed\"\n      });\n\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching completed tasks:\", error.message);\n      setError(\"Error fetching completed tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n      // Schedule the next update after 1 minute (adjust as needed)\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\n        ✅ Completed Tasks (\n        {tasks.filter((task) => task.status === \"Completed\").length})\n      </h1>\n      <p className=\"text-muted\">You can view all Completed task here!</p>{\" \"}\n      {loading && (\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          className=\"d-flex aline-center gap-2\"\n        >\n          <div\n            className=\"spinner-grow bg-primary\"\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            role=\"status\"\n          ></div>\n\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n        className=\"d-flex flex-column gap-3\"\n      >\n        {tasks\n          .filter((task) => task.status === \"Completed\" && task.managerEmail ===email)\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{\n                  height: \"fit-content\",\n                  background:\n                    \"linear-gradient(165deg,#11009E, #700B97, 90%, #C84B31)\"\n                }}\n                className=\"d-flex justify-content-between aline-center form-control text-white\"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-success fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div className=\"\">\n                  <p className=\"btn btn-success m-auto fw-bold\">Completed</p>\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div\n                  style={{\n                    width: \"99.4%\",\n                    height: \"100%\",\n                    zIndex: \"5\",\n                    backgroundColor: \"rgba(0, 128, 0, 0.384)\",\n                    textShadow: \"-5px 5px 5px rgba(128, 128, 128, 0.422)\"\n                  }}\n                  className=\"watermark form-control   position-absolute d-flex justify-content-center aline-center\"\n                >\n                  <h1 className=\"text-uppercase text-light fw-bolder\">\n                    C O M P L E T E D\n                  </h1>\n                </div>\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <p\n                    style={{ height: \"fit-content\" }}\n                    className=\"text-start fs-6 form-control\"\n                  >\n                    <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                    {task.description}\n                  </p>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Created By <br /> <span> {task.managerEmail}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Start Date <br />{\" \"}\n                      <span>\n                        {new Date(task.startDate).toLocaleDateString()}\n                      </span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      End Date <br />{\" \"}\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <span>\n                        Task Status <br /> {task.status}\n                      </span>\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p>\n                      <span className=\"fw-bold\">Remarks : </span> {task.comment}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ManagerCompletedTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\ManagerTaskManagement\\ManagerRejectedTask.jsx",["938","939"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst ManagerRejectedTask = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const email = localStorage.getItem(\"Email\")\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\", {\n        params: { status: \"Completed\" } // Filter by status \"Completed\"\n      });\n\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching completed tasks:\", error.message);\n      setError(\"Error fetching completed tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n      // Schedule the next update after 1 minute (adjust as needed\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\n        🔴 Rejected Tasks\n      </h1>\n      <p className=\"text-muted\">You can view all rejected task here!</p>{\" \"}\n      {loading && (\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          className=\"d-flex aline-center gap-2\"\n        >\n          <div\n            className=\"spinner-grow bg-primary\"\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            role=\"status\"\n          ></div>\n\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n        className=\"d-flex flex-column gap-3\"\n      >\n        {tasks\n          .filter((task) => task.status === \"Rejected\")\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{ height: \"fit-content\" }}\n                className=\"d-flex justify-content-between aline-center form-control bg-black text-white\"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-success fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div>\n                  <p className=\"btn btn-light m-auto py-1 px-3 fw-bold\">\n                    Rejected\n                  </p>\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div\n                  style={{\n                    width: \"99.4%\",\n                    height: \"100%\",\n                    zIndex: \"5\",\n                    backgroundColor: \"rgba(5, 128, 8, 0.384)\",\n                    textShadow: \"-5px 5px 5px rgba(128, 128, 128, 0.422)\"\n                  }}\n                  className=\"watermark form-control   position-absolute d-flex justify-content-center aline-center\"\n                >\n                  <h1 className=\"text-uppercase text-light fw-bolder\">\n                    R E J E C T E D\n                  </h1>\n                </div>\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <p\n                    style={{ height: \"fit-content\" }}\n                    className=\"text-start fs-6 form-control\"\n                  >\n                    <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                    {task.description}\n                  </p>\n                  <div className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\">\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Created By <br /> <span> {task.managerEmail}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Start Date <br />{\" \"}\n                      <span>\n                        {new Date(task.startDate).toLocaleDateString()}\n                      </span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      End Date <br />{\" \"}\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <span>\n                        Task Status <br /> {task.status}\n                      </span>\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p>\n                      <span className=\"fw-bold\">Remarks : </span> {task.comment}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ManagerRejectedTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\ManagerTaskManagement\\ManagerActiveTask.jsx",["940","941","942","943","944","945","946","947","948","949"],"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { PiInfoFill } from \"react-icons/pi\";\n// import { FaCheck } from \"react-icons/fa6\";\n// import { IoCheckmarkDoneSharp } from \"react-icons/io5\";\n// import { MdDeleteForever } from \"react-icons/md\";\n// // import { toast } from \"react-toastify\";\n// import Modal from \"react-bootstrap/Modal\";\n// import Table from \"react-bootstrap/esm/Table\";\n// import { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\n\n// const ManagerActiveTask = () => {\n//   const [modalShow, setModalShow] = React.useState(false);\n//   const [tasks, setTasks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [, setIsCompleting] = useState(false);\n//   const [getEmployee, setGetEmployee] = useState([]);\n//   const [selectedEmployees, setSelectedEmployees] = useState([]);\n//   const [inputEmail, setInputEmail] = useState(\"\");\n//   const [originalEmployeeData, setOriginalEmployeeData] = useState([]);\n//   const [selectedTaskId, setSelectedTaskId] = useState(null);\n//   const [selectAll, setSelectAll] = useState(false);\n//   const [isForwardButtonDisabled, setIsForwardButtonDisabled] = useState(true);\n\n//   const [employeeData, setEmployeeData] = useState([]);\n//   const [searchData, setSearchData] = useState(\"\");\n//   const [rowData, setRowData] = useState([]);\n//   const [rowIndex, setRowIndex] = useState(null);\n//   const [moreInfo, setMoreInfo] = useState(false);\n\n//   const loadEmployeeData = () => {\n//     axios\n//       .get(\"http://localhost:4000/api/employee\", {\n//         headers: {\n//           authorization: localStorage.getItem(\"token\") || \"\"\n//         }\n//       })\n//       .then((response) => {\n//         const employeeObj = response.data;\n//         console.log(\"response\", response.data);\n//         setEmployeeData(employeeObj);\n//         setLoading(false);\n//         const rowDataT = employeeObj.map((data) => {\n//           return {\n//             data,\n//             Email: data[\"Email\"],\n//             FirstName: data[\"FirstName\"] + \"\" + data[\"LastName\"],\n//             ContactNo: data[\"ContactNo\"],\n//             PositionName: data[\"position\"][0]\n//               ? data[\"position\"][0][\"PositionName\"]\n//               : \"\"\n//           };\n//         });\n//         setRowData(rowDataT);\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n//   };\n\n//   useEffect(() => {\n//     loadEmployeeData();\n//   }, []);\n\n//   const calculateRemainingTime = (endDate) => {\n//     const now = new Date();\n//     const endDateTime = new Date(endDate);\n//     let remainingTime = endDateTime - now;\n\n//     if (remainingTime < 0) {\n//       // If remaining time is negative, consider it as delay\n//       remainingTime = Math.abs(remainingTime);\n//       return { delay: true, days: 0, hours: 0, minutes: 0 };\n//     } else {\n//       // Calculate remaining days, hours, minutes, and seconds\n//       const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\n//       const hours = Math.floor(\n//         (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n//       );\n//       const minutes = Math.floor(\n//         (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\n//       );\n//       return { delay: false, days, hours, minutes };\n//     }\n//   };\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:4000/api/tasks\");\n//       setTasks(response.data);\n//       setError(null);\n//     } catch (error) {\n//       console.error(\"Error fetching tasks:\", error.message);\n//       setError(\"Error fetching tasks. Please try again later.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchData();\n//     return () => clearTimeout();\n//   }, []);\n\n//   useEffect(() => {\n//     console.log(\"getEmployee:\", getEmployee);\n//   }, [getEmployee]);\n\n//   const forwordTaskToEmployee = async (taskId) => {\n//     setSelectedTaskId(taskId);\n//     setModalShow(true);\n//   };\n\n//   const forwardTaskToEmployees = async (selectedTaskId) => {\n//     try {\n//       for (const employee of selectedEmployees) {\n//         try {\n//           const employeeData = {\n//             empname: employee.FirstName,\n//             empemail: employee.Email,\n//             empdesignation: employee.PositionName,\n//             emptaskStatus: \"Task Assigned\"\n//           };\n\n//           await axios.post(\n//             `http://localhost:4000/api/tasks/${selectedTaskId}/employees`,\n//             {\n//               employees: [employeeData]\n//             }\n//           );\n//         } catch (error) {\n//           console.error(\n//             `Error forwarding task to ${employee.FirstName}:`,\n//             error.message\n//           );\n//         }\n//       }\n\n//       fetchData();\n\n//       setSelectedEmployees([]);\n//       setModalShow(false);\n//     } catch (error) {\n//       console.error(\"Error forwarding task:\", error.message);\n//       alert(\"Failed to forward task. Please try again.\");\n//     }\n//   };\n\n//   const askStatus = async (taskId) => {};\n//   const completeTask = async (taskId) => {\n//     try {\n//       setIsCompleting(true);\n\n//       const CompleteRemarks = prompt(\"Enter remarks to Complete Task:\");\n\n//       if (CompleteRemarks === null) {\n//         setIsCompleting(false);\n//         return;\n//       }\n\n//       await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n//         status: \"Completed\",\n//         comment: CompleteRemarks\n//       });\n\n//       alert(\"Task completed successfully!\");\n\n//       fetchData();\n//     } catch (error) {\n//       console.error(\"Error completing task:\", error.message);\n//       alert(\"Failed to complete task. Please try again.\");\n//     } finally {\n//       setIsCompleting(false);\n//     }\n//   };\n\n//   const handleSearch = (e) => {\n//     const searchValue = e.target.value.toLowerCase();\n\n//     if (searchValue === \"\") {\n//       setGetEmployee(originalEmployeeData);\n//     } else {\n//       const filteredEmployees = originalEmployeeData.filter(\n//         (employee) =>\n//           employee.name.toLowerCase().includes(searchValue) ||\n//           employee.email.toLowerCase().includes(searchValue) ||\n//           employee.designation.toLowerCase().includes(searchValue)\n//       );\n\n//       setGetEmployee(filteredEmployees);\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     setInputEmail(e.target.value);\n//   };\n\n//   const removeSelectedEmployee = (email) => {\n//     setSelectedEmployees(\n//       selectedEmployees.filter((employee) => employee.email !== email)\n//     );\n//   };\n\n//   const addSelectedEmployee = (employee) => {\n//     const isChecked = selectedEmployees.some(\n//       (emp) => emp.email === employee.email\n//     );\n\n//     if (isChecked) {\n//       setSelectedEmployees((prevEmployees) =>\n//         prevEmployees.filter((emp) => emp.email !== employee.email)\n//       );\n//     } else {\n//       setSelectedEmployees([...selectedEmployees, employee]);\n//     }\n//     if (selectedEmployees.length < 0) {\n//       setIsForwardButtonDisabled(true);\n//     } else {\n//       setIsForwardButtonDisabled(false); // Disable the button when there is at least one selected employee\n//     }\n\n//     setInputEmail(\"\");\n//   };\n\n//   const toggleSelectAll = () => {\n//     setSelectAll(!selectAll);\n//     setSelectedEmployees(selectAll ? [] : [...getEmployee]);\n//   };\n\n//   const calculateProgress = (task) => {\n//     const totalEmployees =\n//       task.employees.length -\n//       task.employees.filter((emp) => emp.emptaskStatus === \"Rejected\").length;\n//     const completedTasks = task.employees.filter(\n//       (emp) => emp.emptaskStatus === \"Completed\"\n//     ).length;\n//     return (completedTasks / totalEmployees) * 100;\n//   };\n//   return (\n//     <div className=\"py-2\">\n//       <h1 className=\"fs-3 fw-bolder text-uppercase mb-4\">All Active Tasks</h1>\n\n//       {loading && (\n//         <div className=\"d-flex align-items-center gap-2\">\n//           <div className=\"spinner-grow text-primary\" role=\"status\"></div>\n//           <span className=\"text-primary fw-bold\">Loading...</span>\n//         </div>\n//       )}\n\n//       {error && <p className=\"text-danger\">{error}</p>}\n\n//       <div className=\"overflow-auto\" style={{ maxHeight: \"80vh\" }}>\n//         {tasks\n//           .filter((task) => task.status === \"Pending\")\n//           .map((task, index) => (\n//             <details\n//               style={{\n//                 boxShadow: \"-1px 1px 10px gray\"\n//               }}\n//               className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n//               key={task.id}\n//             >\n//               <summary\n//                 style={{ height: \"fit-content\" }}\n//                 className=\"d-flex justify-content-between aline-center form-control bg-dark  text-white\"\n//               >\n//                 <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n//                   # Task {index + 1} : {task.Taskname}\n//                 </div>\n//                 <div\n//                   style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n//                   className=\"fw-bold bg-white rounded-5 px-3 text-primary fs-6 d-flex justify-content-center aline-center flex-column\"\n//                 >\n//                   {task.department}\n//                 </div>\n//                 <div className=\"d-flex gap-2 RemainingTimeHandel justify-content-between \">\n//                   {calculateRemainingTime(task.endDate).delay ? (\n//                     <div>\n//                       <div className=\"text-center d-none\">\n//                         <div className=\"form-control  fw-bold p-0\">\n//                           {calculateRemainingTime(task.endDate).days}{\" \"}\n//                         </div>{\" \"}\n//                         <div>Day</div>\n//                       </div>\n//                       <h5 className=\"btn btn-danger p-1 px-3 fw-bold\">Late</h5>\n//                     </div>\n//                   ) : (\n//                     <div className=\"text-center\">\n//                       <div\n//                         style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                         className=\"form-control fw-bold px-1 py-0\"\n//                       >\n//                         {calculateRemainingTime(task.endDate).days}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Day</div>\n//                     </div>\n//                   )}\n//                   {calculateRemainingTime(task.endDate).delay ? (\n//                     <div className=\"text-center d-none\">\n//                       <div className=\"form-control  fw-bold p-0\">\n//                         {calculateRemainingTime(task.endDate).hours}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Min</div>\n//                     </div>\n//                   ) : (\n//                     <div className=\"text-center\">\n//                       <div\n//                         style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                         className=\"form-control fw-bold px-1 py-0\"\n//                       >\n//                         {calculateRemainingTime(task.endDate).hours}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Hrs</div>\n//                     </div>\n//                   )}\n//                   {calculateRemainingTime(task.endDate).delay ? (\n//                     <div className=\"text-center d-none\">\n//                       <div className=\"form-control fw-bold p-0\">\n//                         {calculateRemainingTime(task.endDate).minutes}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Min</div>\n//                     </div>\n//                   ) : (\n//                     <div className=\"text-center\">\n//                       <div\n//                         style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                         className=\"form-control fw-bold px-1 py-0\"\n//                       >\n//                         {calculateRemainingTime(task.endDate).minutes}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Min</div>\n//                     </div>\n//                   )}\n//                 </div>\n//               </summary>\n//               <div\n//                 style={{ position: \"relative\" }}\n//                 className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n//               >\n//                 <div style={{ height: \"fit-content\" }} className=\"form-control\">\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"text-start fs-6 form-control\"\n//                   >\n//                     <h6 className=\"fw-bold\">Task Discription</h6>\n//                     <div className=\"row justify-between\">\n//                       <div className=\"col-10\">{task.description}</div>\n//                       <div\n//                         className=\"col-2 d-flex\"\n//                         style={{ width: \"6rem\", borderRadius: \"50%\" }}\n//                       >\n//                         <CircularProgressbar\n//                           className=\"fw-bold\"\n//                           value={calculateProgress(task)}\n//                           text={`${calculateProgress(task).toFixed(2)}%`}\n//                           styles={buildStyles({\n//                             pathColor: \"#28a745\",\n//                             textColor: \"#28a745\"\n//                           })}\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                   >\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       Created By <br /> <span>{task.managerEmail}</span>\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       Start Date <br />{\" \"}\n//                       <span>\n//                         {new Date(task.startDate).toLocaleDateString()}\n//                       </span>\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       End Date <br />{\" \"}\n//                       <span>{new Date(task.endDate).toLocaleDateString()}</span>\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       <span>\n//                         Task Status <br /> {task.status}\n//                       </span>\n//                     </p>\n//                   </div>\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                   >\n//                     <p>\n//                       <span className=\"fw-bold\">Remarks : </span> {task.comment}\n//                     </p>\n//                   </div>\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                   >\n//                     <h6 className=\"fw-bold\">Forwarded Members Status</h6>\n//                     <Table striped bordered hover>\n//                       <thead>\n//                         <tr>\n//                           <th>S. No</th>\n//                           <th>Name</th>\n//                           <th>Email</th>\n//                           <th>Designation</th>\n//                           <th>Task Status</th>\n//                           <th>Remarks</th>\n//                         </tr>\n//                       </thead>\n//                       <tbody>\n//                         {task.employees.map((taskemp, i) => (\n//                           <tr key={i}>\n//                             <td\n//                               style={{\n//                                 backgroundColor:\n//                                   taskemp.emptaskStatus === \"Completed\"\n//                                     ? \"rgba(25, 201, 84, 0.436)\"\n//                                     : taskemp.emptaskStatus === \"Rejected\"\n//                                     ? \"rgba(214, 92, 44, 0.636)\"\n//                                     : \"inherit\"\n//                               }}\n//                             >\n//                               {i + 1}\n//                             </td>\n//                             <td\n//                               style={{\n//                                 backgroundColor:\n//                                   taskemp.emptaskStatus === \"Completed\"\n//                                     ? \"rgba(25, 201, 84, 0.436)\"\n//                                     : taskemp.emptaskStatus === \"Rejected\"\n//                                     ? \"rgba(214, 92, 44, 0.636)\"\n//                                     : \"inherit\"\n//                               }}\n//                             >\n//                               {taskemp.empname}\n//                             </td>\n//                             <td\n//                               style={{\n//                                 backgroundColor:\n//                                   taskemp.emptaskStatus === \"Completed\"\n//                                     ? \"rgba(25, 201, 84, 0.436)\"\n//                                     : taskemp.emptaskStatus === \"Rejected\"\n//                                     ? \"rgba(214, 92, 44, 0.636)\"\n//                                     : \"inherit\"\n//                               }}\n//                             >\n//                               {taskemp.empemail}\n//                             </td>\n//                             <td\n//                               style={{\n//                                 backgroundColor:\n//                                   taskemp.emptaskStatus === \"Completed\"\n//                                     ? \"rgba(25, 201, 84, 0.436)\"\n//                                     : taskemp.emptaskStatus === \"Rejected\"\n//                                     ? \"rgba(214, 92, 44, 0.636)\"\n//                                     : \"inherit\"\n//                               }}\n//                             >\n//                               {taskemp.empdesignation}\n//                             </td>\n//                             <td\n//                               style={{\n//                                 backgroundColor:\n//                                   taskemp.emptaskStatus === \"Completed\"\n//                                     ? \"rgba(25, 201, 84, 0.436)\"\n//                                     : taskemp.emptaskStatus === \"Rejected\"\n//                                     ? \"rgba(214, 92, 44, 0.636)\"\n//                                     : \"inherit\"\n//                               }}\n//                             >\n//                               {taskemp.emptaskStatus}\n//                             </td>\n//                             <td\n//                               style={{\n//                                 backgroundColor:\n//                                   taskemp.emptaskStatus === \"Completed\"\n//                                     ? \"rgba(25, 201, 84, 0.436)\"\n//                                     : taskemp.emptaskStatus === \"Rejected\"\n//                                     ? \"rgba(214, 92, 44, 0.636)\"\n//                                     : \"inherit\"\n//                               }}\n//                             >\n//                               {taskemp.empTaskComment}\n//                             </td>\n//                           </tr>\n//                         ))}\n//                       </tbody>\n//                     </Table>\n//                   </div>\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                   >\n//                     <button\n//                       className=\"btn btn-primary col-2 d-flex justify-center aline-center gap-2\"\n//                       onClick={() => forwordTaskToEmployee(task._id)}\n//                     >\n//                       <IoCheckmarkDoneSharp /> Forward Task\n//                     </button>\n//                     <button\n//                       className=\"btn btn-warning col-2 d-flex justify-center aline-center gap-2\"\n//                       onClick={() => askStatus(task._id)}\n//                     >\n//                       <PiInfoFill /> Ask Status\n//                     </button>\n//                     <button\n//                       className=\"btn btn-success col-2 d-flex justify-center aline-center gap-2\"\n//                       onClick={() => completeTask(task._id)}\n//                       disabled={calculateProgress(task) !== 100}\n//                     >\n//                       <FaCheck />\n//                       Complete Task\n//                     </button>\n//                   </div>\n//                 </div>\n//               </div>\n//             </details>\n//           ))}\n//       </div>\n\n//       <Modal\n//         fullscreen={true}\n//         show={modalShow}\n//         onHide={() => setModalShow(false)}\n//       >\n//         <Modal.Header closeButton>\n//           <Modal.Title>Forward Task to Employees</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <div className=\"row\">\n//             <form className=\"d-flex col-8 flex-column gap-3\">\n//               <input\n//                 className=\"w-100 py-1 px-2 rounded-5 border\"\n//                 type=\"search\"\n//                 name=\"\"\n//                 placeholder=\"Search...\"\n//                 id=\"\"\n//                 value={inputEmail}\n//                 onChange={(e) => {\n//                   handleInputChange(e);\n//                   handleSearch(e);\n//                 }}\n//               />\n//               <div>\n//                 <div className=\" p-2\">\n//                   {\" \"}\n//                   <input\n//                     type=\"checkbox\"\n//                     name=\"\"\n//                     id=\"\"\n//                     onChange={toggleSelectAll}\n//                     checked={selectAll}\n//                   />{\" \"}\n//                   <span>Select All</span>\n//                 </div>\n//                 <table class=\"table\">\n//                   <thead>\n//                     <tr>\n//                       <th scope=\"col\">Select</th>\n//                       <th scope=\"col\">Name</th>\n//                       <th scope=\"col\">Email</th>\n//                       <th scope=\"col\">Contact</th>\n//                       <th scope=\"col\">Designation</th>\n//                     </tr>\n//                   </thead>\n\n//                   <tbody>\n//                     {rowData.map((row, index) => (\n//                       <tr key={index}>\n//                         <th scope=\"row\">\n//                           <input\n//                             type=\"checkbox\"\n//                             name=\"\"\n//                             id=\"\"\n//                             onChange={() => addSelectedEmployee(row)}\n//                             checked={selectedEmployees.some(\n//                               (emp) => emp.email === row.email\n//                             )}\n//                           />\n//                         </th>\n//                         <td>{row.FirstName}</td>\n//                         <td>{row.Email}</td>\n//                         <td>{row.ContactNo}</td>\n//                         <td>{row.PositionName}</td>\n//                       </tr>\n//                     ))}\n//                   </tbody>\n//                 </table>\n//               </div>\n//             </form>\n//             <div className=\"d-flex flex-column col-4 gap-2\">\n//               <div className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\">\n//                 <div>\n//                   <span className=\"fw-bold\">Selected Employees:</span>\n//                   {selectedEmployees.map((employee, index) => (\n//                     <div key={index} className=\"d-flex\">\n//                       <span\n//                         style={{\n//                           boxShadow: \"-3px 3px 5px rgba(204, 201, 201, 0.767)\",\n//                           width: \"fit-content\"\n//                         }}\n//                         className=\"selected-employee-email d-flex btn gap-2 aline-center  btn-light py-1 px-2 m-1\"\n//                         onClick={() => removeSelectedEmployee(employee.Email)}\n//                       >\n//                         {employee.FirstName} - {employee.PositionName}\n//                         <span className=\"text-danger d-none\">\n//                           <MdDeleteForever />\n//                         </span>\n//                       </span>\n//                     </div>\n//                   ))}\n//                 </div>\n//               </div>\n//               <button\n//                 className=\"btn  btn-primary\"\n//                 onClick={() =>\n//                   forwardTaskToEmployees(selectedTaskId, selectedEmployees)\n//                 }\n//                 disabled={isForwardButtonDisabled}\n//               >\n//                 Forward Task to Employees\n//               </button>\n//               <button\n//                 className=\"btn btn-secondary\"\n//                 onClick={() => setModalShow(false)}\n//               >\n//                 Cancel\n//               </button>\n//             </div>\n//           </div>\n//         </Modal.Body>\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default ManagerActiveTask;\n\nimport React, { useState, useEffect,useContext } from \"react\";\nimport axios from \"axios\";\nimport { PiInfoFill } from \"react-icons/pi\";\nimport { FaCheck } from \"react-icons/fa6\";\nimport { IoCheckmarkDoneSharp } from \"react-icons/io5\";\nimport { MdDeleteForever } from \"react-icons/md\";\n// import { toast } from \"react-toastify\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Table from \"react-bootstrap/esm/Table\";\nimport { BsFiletypeDoc } from \"react-icons/bs\";\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\nimport { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\nimport {v4 as uuid} from \"uuid\";\nconst ManagerActiveTask = () => {\n  const [modalShow, setModalShow] = React.useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [, setIsCompleting] = useState(false);\n  const [getEmployee, setGetEmployee] = useState([]);\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\n  const [inputEmail, setInputEmail] = useState(\"\");\n  const [originalEmployeeData, setOriginalEmployeeData] = useState([]);\n  const [selectedTaskId, setSelectedTaskId] = useState(null);\n  const [selectAll, setSelectAll] = useState(false);\n  const [isForwardButtonDisabled, setIsForwardButtonDisabled] = useState(true);\n  const email = localStorage.getItem(\"Email\");\n  const [employeeData, setEmployeeData] = useState([]);\n  const [searchData, setSearchData] = useState(\"\");\n  const [rowData, setRowData] = useState([]);\n  const [rowIndex, setRowIndex] = useState(null);\n  const [moreInfo, setMoreInfo] = useState(false);\n  const [taskDepartment, setTaskDepartment] = useState(\"\");\n  const {socket} = useContext(AttendanceContext);\n  const [taskName, setTaskName] =useState(\"\");\n  const loadEmployeeData = () => {\n    axios\n      .get(\"http://localhost:4000/api/employee\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        const employeeObj = response.data;\n        console.log(\"response\", response.data);\n        setEmployeeData(employeeObj);\n        setLoading(false);\n        const rowDataT = employeeObj.map((data) => {\n          return {\n            data,\n            Email: data[\"Email\"],\n            department: data[\"department\"][0][\"DepartmentName\"],\n            FirstName: data[\"FirstName\"] + \"\" + data[\"LastName\"],\n            ContactNo: data[\"ContactNo\"],\n            PositionName: data[\"position\"][0]\n              ? data[\"position\"][0][\"PositionName\"]\n              : \"\"\n          };\n        });\n        console.log(rowDataT);\n        setRowData(rowDataT);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    loadEmployeeData();\n  }, []);\n\n  const calculateRemainingTime = (endDate) => {\n    const now = new Date();\n    const endDateTime = new Date(endDate);\n    let remainingTime = endDateTime - now;\n\n    if (remainingTime < 0) {\n      // If remaining time is negative, consider it as delay\n      remainingTime = Math.abs(remainingTime);\n      return { delay: true, days: 0, hours: 0, minutes: 0 };\n    } else {\n      // Calculate remaining days, hours, minutes, and seconds\n      const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(\n        (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const minutes = Math.floor(\n        (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\n      );\n      return { delay: false, days, hours, minutes };\n    }\n  };\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\");\n      // console.log(response.data)\n      setTasks(response.data);\n      setError(null);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error.message);\n      setError(\"Error fetching tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n    return () => clearTimeout();\n  }, []);\n\n  useEffect(() => {\n    console.log(\"getEmployee:\", getEmployee);\n  }, [getEmployee]);\n\n  const forwordTaskToEmployee = async (taskId, dep,taskName) => {\n    setTaskName(taskName)\n    let filteredData = rowData.filter((val) => {\n      return val.department === dep;\n    });\n    setRowData(filteredData);\n    setTaskDepartment(dep);\n    setSelectedTaskId(taskId);\n    setModalShow(true);\n  };\n\n  const forwardTaskToEmployees = async (selectedTaskId) => {\n    try {\n      const employeeNotificationArr =[];\n      for (const employee of selectedEmployees) {\n        try {\n          employeeNotificationArr.push(employee.Email)\n          const employeeData = {\n            empname: employee.FirstName,\n            empemail: employee.Email,\n            empdesignation: employee.PositionName,\n            emptaskStatus: \"Task Assigned\"\n          };\n\n          await axios.post(\n            `http://localhost:4000/api/tasks/${selectedTaskId}/employees`,\n            {\n              employees: [employeeData]\n            }\n          );\n        } catch (error) {\n          console.error(\n            `Error forwarding task to ${employee.FirstName}:`,\n            error.message\n          );\n        }\n      }\n      const taskId = uuid();\n      const employeeTaskNotification = {\n        senderMail: email,\n        employeesEmail: employeeNotificationArr,\n        taskId,\n        status: \"unseen\",\n        message: `Task Assigned by ${email}`,\n        taskName,\n        Account: 2,\n        path:\"newTask\" \n      }\n\n      socket.emit(\"employeeTaskNotification\", employeeTaskNotification);\n      fetchData();\n\n      setSelectedEmployees([]);\n      setModalShow(false);\n    } catch (error) {\n      console.error(\"Error forwarding task:\", error.message);\n      alert(\"Failed to forward task. Please try again.\");\n    }\n  };\n\n  const askStatus = async (taskId) => {};\n  const completeTask = async (taskId,taskName,adminMail) => {\n    try {\n      setIsCompleting(true);\n\n      const CompleteRemarks = prompt(\"Enter remarks to Complete Task:\");\n\n      if (CompleteRemarks === null) {\n        setIsCompleting(false);\n        return;\n      }\n\n      await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n        status: \"Completed\",\n        comment: CompleteRemarks\n      });\n\n      alert(\"Task completed successfully!\");\n      const data = {\n        taskId,\n        status: \"unseen\",\n        path: \"taskstatus\",\n        senderMail: email,\n        taskName,\n        message: `Task Completed by ${email}`,\n        adminMail,\n        Account: 1,\n        taskStatus: \"completed\",\n      \n      }\n      socket.emit(\"adminTaskNotification\", data);\n      fetchData();\n    } catch (error) {\n      console.error(\"Error completing task:\", error.message);\n      alert(\"Failed to complete task. Please try again.\");\n    } finally {\n      setIsCompleting(false);\n    }\n  };\n\n  const handleSearch = (e) => {\n    const searchValue = e.target.value.toLowerCase();\n\n    if (searchValue === \"\") {\n      setGetEmployee(originalEmployeeData);\n    } else {\n      const filteredEmployees = originalEmployeeData.filter(\n        (employee) =>\n          employee.name.toLowerCase().includes(searchValue) ||\n          employee.email.toLowerCase().includes(searchValue) ||\n          employee.designation.toLowerCase().includes(searchValue)\n      );\n\n      setGetEmployee(filteredEmployees);\n    }\n  };\n\n  const handleInputChange = (e) => {\n    setInputEmail(e.target.value);\n  };\n\n  const removeSelectedEmployee = (email) => {\n    setSelectedEmployees(\n      selectedEmployees.filter((employee) => employee.email !== email)\n    );\n  };\n\n  const addSelectedEmployee = (employee) => {\n    const isChecked = selectedEmployees.some(\n      (emp) => emp.Email === employee.Email\n    );\n\n    if (isChecked) {\n      setSelectedEmployees((prevEmployees) =>\n        prevEmployees.filter((emp) => emp.Email !== employee.Email)\n      );\n    } else {\n      setSelectedEmployees([...selectedEmployees, employee]);\n    }\n    if (selectedEmployees.length < 0) {\n      setIsForwardButtonDisabled(true);\n    } else {\n      setIsForwardButtonDisabled(false); // Disable the button when there is at least one selected employee\n    }\n\n    setInputEmail(\"\");\n  };\n\n  const toggleSelectAll = () => {\n    setSelectAll(!selectAll);\n    setSelectedEmployees(selectAll ? [] : [...rowData]);\n  };\n\n  const calculateProgress = (task) => {\n    const totalEmployees =\n      task.employees.length -\n      task.employees.filter((emp) => emp.emptaskStatus === \"Rejected\").length;\n    const completedTasks = task.employees.filter(\n      (emp) => emp.emptaskStatus === \"Completed\"\n    ).length;\n    return (completedTasks / totalEmployees) * 100;\n  };\n\n  const calculateTotalActiveTasks = () => {\n    return tasks.filter(\n      (task) => task.status === \"Pending\" && task.managerEmail === email\n    ).length;\n  };\n\n  return (\n    <div className=\"py-2\">\n      <h1 className=\"fs-3 fw-bolder text-uppercase mb-4\">\n        All Active Tasks ({calculateTotalActiveTasks()})\n      </h1>\n\n      {loading && (\n        <div className=\"d-flex align-items-center gap-2\">\n          <div className=\"spinner-grow text-primary\" role=\"status\"></div>\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n\n      {error && <p className=\"text-danger\">{error}</p>}\n\n      <div className=\"overflow-auto\" style={{ maxHeight: \"80vh\" }}>\n        {tasks\n          .filter(\n            (task) => task.status === \"Pending\" && task.managerEmail === email\n          )\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{ height: \"fit-content\" }}\n                className=\"d-flex justify-content-between aline-center form-control bg-dark  text-white\"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-primary fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div className=\"d-flex gap-2 RemainingTimeHandel justify-content-between \">\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div>\n                      <div className=\"text-center d-none\">\n                        <div className=\"form-control  fw-bold p-0\">\n                          {calculateRemainingTime(task.endDate).days}{\" \"}\n                        </div>{\" \"}\n                        <div>Day</div>\n                      </div>\n                      <h5 className=\"btn btn-danger p-1 px-3 fw-bold\">Late</h5>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).days}{\" \"}\n                      </div>{\" \"}\n                      <div>Day</div>\n                    </div>\n                  )}\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div className=\"text-center d-none\">\n                      <div className=\"form-control  fw-bold p-0\">\n                        {calculateRemainingTime(task.endDate).hours}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).hours}{\" \"}\n                      </div>{\" \"}\n                      <div>Hrs</div>\n                    </div>\n                  )}\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div className=\"text-center d-none\">\n                      <div className=\"form-control fw-bold p-0\">\n                        {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  )}\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"text-start fs-6 form-control\"\n                  >\n                    <h6 className=\"fw-bold\">Task Discription</h6>\n                    <div className=\"row justify-between\">\n                      <div className=\"col-10\">{task.description}</div>\n                      <div\n                        className=\"col-2 d-flex\"\n                        style={{ width: \"6rem\", borderRadius: \"50%\" }}\n                      >\n                        <CircularProgressbar\n                          className=\"fw-bold\"\n                          value={calculateProgress(task)}\n                          text={`${calculateProgress(task).toFixed(2)}%`}\n                          styles={buildStyles({\n                            pathColor: \"#28a745\",\n                            textColor: \"#28a745\"\n                          })}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Created By <br /> <span>{task.managerEmail}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Start Date <br />{\" \"}\n                      <span>\n                        {new Date(task.startDate).toLocaleDateString()}\n                      </span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      End Date <br />{\" \"}\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <span>\n                        Task Status <br /> {task.status}\n                      </span>\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p>\n                      <span className=\"fw-bold\">Remarks : </span> {task.comment}\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <h6 className=\"fw-bold\">Forwarded Members Status</h6>\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>S. No</th>\n                          <th>Name</th>\n                          <th>Email</th>\n                          <th>Designation</th>\n                          <th>Task Status</th>\n                          <th>Remarks</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {task.employees.map((taskemp, i) => (\n                          <tr key={i}>\n                            <td\n                              style={{\n                                backgroundColor:\n                                  taskemp.emptaskStatus === \"Completed\"\n                                    ? \"rgba(25, 201, 84, 0.436)\"\n                                    : taskemp.emptaskStatus === \"Rejected\"\n                                    ? \"rgba(214, 92, 44, 0.636)\"\n                                    : \"inherit\"\n                              }}\n                            >\n                              {i + 1}\n                            </td>\n                            <td\n                              style={{\n                                backgroundColor:\n                                  taskemp.emptaskStatus === \"Completed\"\n                                    ? \"rgba(25, 201, 84, 0.436)\"\n                                    : taskemp.emptaskStatus === \"Rejected\"\n                                    ? \"rgba(214, 92, 44, 0.636)\"\n                                    : \"inherit\"\n                              }}\n                            >\n                              {taskemp.empname}\n                            </td>\n                            <td\n                              style={{\n                                backgroundColor:\n                                  taskemp.emptaskStatus === \"Completed\"\n                                    ? \"rgba(25, 201, 84, 0.436)\"\n                                    : taskemp.emptaskStatus === \"Rejected\"\n                                    ? \"rgba(214, 92, 44, 0.636)\"\n                                    : \"inherit\"\n                              }}\n                            >\n                              {taskemp.empemail}\n                            </td>\n                            <td\n                              style={{\n                                backgroundColor:\n                                  taskemp.emptaskStatus === \"Completed\"\n                                    ? \"rgba(25, 201, 84, 0.436)\"\n                                    : taskemp.emptaskStatus === \"Rejected\"\n                                    ? \"rgba(214, 92, 44, 0.636)\"\n                                    : \"inherit\"\n                              }}\n                            >\n                              {taskemp.empdesignation}\n                            </td>\n                            <td\n                              style={{\n                                backgroundColor:\n                                  taskemp.emptaskStatus === \"Completed\"\n                                    ? \"rgba(25, 201, 84, 0.436)\"\n                                    : taskemp.emptaskStatus === \"Rejected\"\n                                    ? \"rgba(214, 92, 44, 0.636)\"\n                                    : \"inherit\"\n                              }}\n                            >\n                              {taskemp.emptaskStatus}\n                            </td>\n                            <td\n                              style={{\n                                backgroundColor:\n                                  taskemp.emptaskStatus === \"Completed\"\n                                    ? \"rgba(25, 201, 84, 0.436)\"\n                                    : taskemp.emptaskStatus === \"Rejected\"\n                                    ? \"rgba(214, 92, 44, 0.636)\"\n                                    : \"inherit\"\n                              }}\n                            >\n                              {taskemp.empTaskComment}\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </Table>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <button\n                      className=\"btn btn-primary col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() =>\n                        forwordTaskToEmployee(task._id, task.department, task.Taskname)\n                      }\n                    >\n                      <IoCheckmarkDoneSharp /> Forward Task\n                    </button>\n                    <button\n                      className=\"btn btn-warning col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() => askStatus(task._id)}\n                    >\n                      <BsFiletypeDoc /> View Docs\n                    </button>\n                    <button\n                      className=\"btn btn-success col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() => completeTask(task._id,task.adminMail,task.Taskname)}\n                      disabled={calculateProgress(task) !== 100}\n                    >\n                      <FaCheck />\n                      Complete Task\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n\n      <Modal\n        fullscreen={true}\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Forward Task to Employees</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row\">\n            <form className=\"d-flex col-8 flex-column gap-3\">\n              <input\n                className=\"w-100 py-1 px-2 rounded-5 border\"\n                type=\"search\"\n                name=\"\"\n                placeholder=\"Search...\"\n                id=\"\"\n                value={inputEmail}\n                onChange={(e) => {\n                  handleInputChange(e);\n                  handleSearch(e);\n                }}\n              />\n              <div>\n                <div className=\" p-2\">\n                  {\" \"}\n                  <input\n                    type=\"checkbox\"\n                    name=\"\"\n                    id=\"\"\n                    onChange={toggleSelectAll}\n                    checked={selectAll}\n                  />{\" \"}\n                  <span>Select All</span>\n                </div>\n                <table class=\"table\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">Select</th>\n                      <th scope=\"col\">Name</th>\n                      <th scope=\"col\">Email</th>\n                      <th scope=\"col\">Contact</th>\n                      <th scope=\"col\">Designation</th>\n                    </tr>\n                  </thead>\n\n                  <tbody>\n                    {rowData.map((row, index) => (\n                      <tr key={index}>\n                        <th scope=\"row\">\n                          <input\n                            type=\"checkbox\"\n                            name=\"\"\n                            id=\"\"\n                            onChange={() => addSelectedEmployee(row)}\n                            checked={selectedEmployees.some(\n                              (emp) => emp.Email === row.Email\n                            )}\n                          />\n                        </th>\n                        <td>{row.FirstName}</td>\n                        <td>{row.Email}</td>\n                        <td>{row.ContactNo}</td>\n                        <td>{row.PositionName}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </form>\n            <div className=\"d-flex flex-column col-4 gap-2\">\n              <div className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\">\n                <div>\n                  <span className=\"fw-bold\">Selected Employees:</span>\n                  {selectedEmployees.map((employee, index) => (\n                    <div key={index} className=\"d-flex\">\n                      <span\n                        style={{\n                          boxShadow: \"-3px 3px 5px rgba(204, 201, 201, 0.767)\",\n                          width: \"fit-content\"\n                        }}\n                        className=\"selected-employee-email d-flex btn gap-2 aline-center  btn-light py-1 px-2 m-1\"\n                        onClick={() => removeSelectedEmployee(employee.Email)}\n                      >\n                        {employee.FirstName} - {employee.PositionName}\n                        <span className=\"text-danger d-none\">\n                          <MdDeleteForever />\n                        </span>\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <button\n                className=\"btn  btn-primary\"\n                onClick={() =>\n                  forwardTaskToEmployees(selectedTaskId)\n                }\n                disabled={isForwardButtonDisabled}\n              >\n                Forward Task to Employees\n              </button>\n              <button\n                className=\"btn btn-secondary\"\n                onClick={() => setModalShow(false)}\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ManagerActiveTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\attendance\\Attendance.jsx",["950","951","952","953","954"],"// import React, { useEffect, useContext } from \"react\";\r\n// import axios from \"axios\";\r\n// import { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\r\n\r\n// function SetLog() {\r\n//   // const [employees, setEmployees] = useState([]);\r\n//   // const [selectedEmployee, setSelectedEmployee] = useState(\"\");\r\n//   // const [attencenceID, setAttencenceID] = useState(\"\");\r\n//   // const [message, setMessage] = useState(\"\");\r\n\r\n//   const {employees, setEmployees, selectedEmployee, setSelectedEmployee, attencenceID, setAttencenceID, message, setMessage} = useContext(AttendanceContext)\r\n\r\n//   useEffect(() => {\r\n//     const fetchUsers = async () => {\r\n//       try {\r\n//         const response = await axios.get(\"http://localhost:4000/api/employee\", {\r\n//           headers: {\r\n//             authorization: localStorage.getItem(\"token\") || \"\",\r\n//           },\r\n//         });\r\n//         setEmployees(response.data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching employees:\", error);\r\n//       }\r\n//     };\r\n//     fetchUsers();\r\n//   }, []);\r\n\r\n//   const handleUserChange = (employeeID) => {\r\n//     const selectedEmployee = employees.find(\r\n//       (employee) => employee._id === employeeID\r\n//     );\r\n\r\n//     if (selectedEmployee) {\r\n//       setAttencenceID(selectedEmployee.attendanceObjID);\r\n//       setSelectedEmployee(employeeID);\r\n//       getMessage(employeeID);\r\n//     }\r\n//   };\r\n\r\n//   const getMessage = async (employeeID) => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:4000/api/attendance/${employeeID}`\r\n//       );\r\n//       const lastEntry = response.data[response.data.length - 1];\r\n\r\n//       if (lastEntry) {\r\n//         setMessage(`Status: ${lastEntry.years[0].months[0].dates[0].status}`);\r\n//       } else {\r\n//         setMessage(\"\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching attendance data:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleLogin = async () => {\r\n//     try {\r\n//       if (!selectedEmployee) {\r\n//         setMessage(\"Please select a user\");\r\n//         return;\r\n//       }\r\n\r\n//       const currentTime = new Date().toLocaleTimeString();\r\n//       await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n//         employeeId: selectedEmployee,\r\n//         year: new Date().getFullYear(),\r\n//         month: new Date().getMonth() + 1,\r\n//         date: new Date().getDate(),\r\n//         loginTime: [currentTime],\r\n//         status: \"login\",\r\n//       });\r\n//       setMessage(\"Login time recorded successfully\");\r\n//     } catch (error) {\r\n//       console.error(\"Error recording login time:\", error);\r\n//       setMessage(\"Error recording login time\");\r\n//     }\r\n//   };\r\n\r\n//   const handleLogout = async () => {\r\n//     try {\r\n//       if (!selectedEmployee) {\r\n//         setMessage(\"Please select an employee\");\r\n//         return;\r\n//       }\r\n\r\n//       const currentTime = new Date().toLocaleTimeString();\r\n//       await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n//         employeeId: selectedEmployee,\r\n//         year: new Date().getFullYear(),\r\n//         month: new Date().getMonth() + 1,\r\n//         date: new Date().getDate(),\r\n//         logoutTime: [currentTime],\r\n//         status: \"logout\",\r\n//       });\r\n//       setMessage(\"Logout time recorded successfully\");\r\n//     } catch (error) {\r\n//       console.error(\"Error recording logout time:\", error);\r\n//       setMessage(\"Error recording logout time\");\r\n//     }\r\n//   };\r\n\r\n//   const handleResume = async () => {\r\n//     try {\r\n//       if (!selectedEmployee) {\r\n//         setMessage(\"Please select an employee\");\r\n//         return;\r\n//       }\r\n\r\n//       const currentTime = new Date().toLocaleTimeString();\r\n//       const currentTimeMs = Math.round(new Date().getTime() / 1000 / 60);\r\n\r\n//       await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n//         employeeId: selectedEmployee,\r\n//         year: new Date().getFullYear(),\r\n//         month: new Date().getMonth() + 1,\r\n//         date: new Date().getDate(),\r\n//         ResumeTime: [currentTime],\r\n//         resumeTimeMS: [currentTimeMs],\r\n//         status: \"resume\",\r\n//       });\r\n\r\n//       setMessage(\"Resumed time recorded successfully\");\r\n//     } catch (error) {\r\n//       console.error(\"Error recording resume time:\", error);\r\n//       setMessage(\"Error recording resume time\");\r\n//     }\r\n//   };\r\n\r\n//   const handleBreak = async () => {\r\n//     try {\r\n//       if (!selectedEmployee) {\r\n//         setMessage(\"Please select an employee\");\r\n//         return;\r\n//       }\r\n\r\n//       const currentTime = new Date().toLocaleTimeString();\r\n//       const currentTimeMs = Math.round(new Date().getTime() / 1000 / 60);\r\n\r\n//       await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n//         employeeId: selectedEmployee,\r\n//         year: new Date().getFullYear(),\r\n//         month: new Date().getMonth() + 1,\r\n//         date: new Date().getDate(),\r\n//         breakTime: [currentTime],\r\n//         breakTimeMs: [currentTimeMs],\r\n//         status: \"break\",\r\n//       });\r\n//       setMessage(\"Break time recorded successfully\");\r\n//     } catch (error) {\r\n//       console.error(\"Error recording break time:\", error);\r\n//       setMessage(\"Error recording break time\");\r\n//     }\r\n//   };\r\n\r\n//   console.log(employees);\r\n\r\n//   return (\r\n//     <div className=\"App row\">\r\n//       <h1 className=\"text-center text-uppercase my-3\">Attendance System</h1>\r\n//       <div\r\n//         className=\"form-control d-flex  gap-3 p-3 m-3\"\r\n//         style={{ height: \"fit-content\" }}\r\n//       >\r\n//         <select\r\n//           className=\"form-select mx-2 w-25 \"\r\n//           onChange={(e) => handleUserChange(e.target.value)}\r\n//         >\r\n//           <option value=\"\">-- Select User --</option>\r\n//           {employees.map((employee) => (\r\n//             <option key={employee._id} value={employee._id}>\r\n//               {employee.FirstName}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n//         <div className=\"d-flex gap-3\">\r\n//           <button className=\"btn btn-success\" onClick={handleLogin}>\r\n//             Login\r\n//           </button>\r\n//           <button className=\"btn btn-danger\" onClick={handleLogout}>\r\n//             Logout\r\n//           </button>\r\n//           <div className=\"d-flex gap-3\">\r\n//             <button className=\"btn btn-warning\" onClick={handleBreak}>\r\n//               Break\r\n//             </button>\r\n//             <button className=\"btn btn-primary\" onClick={handleResume}>\r\n//               Resume\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {message && <p>{message}</p>}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default SetLog;\r\n\r\nimport React, { useEffect, useContext, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\r\nimport SelfAttendance from \"./SelfAttendance\";\r\n\r\nfunction SetLog(props) {\r\n  // const [employees, setEmployees] = useState([]);\r\n  // const [selectedEmployee, setSelectedEmployee] = useState(\"\");\r\n  // const [attencenceID, setAttencenceID] = useState(\"\");\r\n  // const [message, setMessage] = useState(\"\");\r\n  const [empName, setEmpName] = useState(null);\r\n\r\n  const {\r\n    employees,\r\n    setEmployees,\r\n    selectedEmployee,\r\n    setSelectedEmployee,\r\n    attencenceID,\r\n    setAttencenceID,\r\n    message,\r\n    setMessage\r\n  } = useContext(AttendanceContext);\r\n\r\n  useEffect(() => {\r\n    const loadEmployeeData = async (email) => {\r\n      await axios\r\n        .get(\"http://localhost:4000/api/employee\", {\r\n          headers: {\r\n            authorization: localStorage.getItem(\"token\") || \"\"\r\n          }\r\n        })\r\n        .then((response) => {\r\n          // Ensure that response.data is an array\r\n          let hr = response.data.filter((val) => {\r\n            return val.Account === 2;\r\n          });\r\n          setEmployees(hr);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n    loadEmployeeData();\r\n  }, []);\r\n  // hello\r\n\r\n  useEffect(() => {\r\n    const loadPersonalInfoData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          \"http://localhost:4000/api/personal-info/\" + props.data[\"_id\"],\r\n          {\r\n            headers: {\r\n              authorization: localStorage.getItem(\"token\") || \"\"\r\n            }\r\n          }\r\n        );\r\n        console.log(response.data.FirstName);\r\n        setEmpName(response.data.FirstName);\r\n      } catch (error) {\r\n        console.error(\"Error fetching employees:\", error);\r\n      }\r\n    };\r\n\r\n    loadPersonalInfoData();\r\n  }, []);\r\n\r\n  // hello\r\n  const handleUserChange = (employeeID) => {\r\n    const selectedEmployee = employees.find(\r\n      (employee) => employee._id === employeeID\r\n    );\r\n\r\n    if (selectedEmployee) {\r\n      setAttencenceID(selectedEmployee.attendanceObjID);\r\n      setSelectedEmployee(employeeID);\r\n      getMessage(employeeID);\r\n    }\r\n  };\r\n\r\n  const getMessage = async (employeeID) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:4000/api/attendance/${employeeID}`\r\n      );\r\n      const lastEntry = response.data[response.data.length - 1];\r\n\r\n      if (lastEntry) {\r\n        setMessage(`Status: ${lastEntry.years[0].months[0].dates[0].status}`);\r\n      } else {\r\n        setMessage(\"\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching attendance data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleLogin = async () => {\r\n    let data = employees.filter((val) => {\r\n      return val.FirstName === empName;\r\n    });\r\n    console.log(data);\r\n    let attencenceID = data[0].attendanceObjID;\r\n    let selectedEmployee = data[0]._id;\r\n\r\n    try {\r\n      if (!empName) {\r\n        setMessage(\"Please select a user\");\r\n        return;\r\n      }\r\n\r\n      const currentTime = new Date().toLocaleTimeString();\r\n      await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n        employeeId: selectedEmployee,\r\n        year: new Date().getFullYear(),\r\n        month: new Date().getMonth() + 1,\r\n        date: new Date().getDate(),\r\n        loginTime: [currentTime],\r\n        status: \"login\"\r\n      });\r\n      setMessage(\"Login time recorded successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error recording login time:\", error);\r\n      setMessage(\"Error recording login time\");\r\n    }\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    let data = employees.filter((val) => {\r\n      return val.FirstName === empName;\r\n    });\r\n    let attencenceID = data[0].attendanceObjID;\r\n    let selectedEmployee = data[0]._id;\r\n    try {\r\n      if (!empName) {\r\n        setMessage(\"Please select an employee\");\r\n        return;\r\n      }\r\n\r\n      const currentTime = new Date().toLocaleTimeString();\r\n      await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n        employeeId: selectedEmployee,\r\n        year: new Date().getFullYear(),\r\n        month: new Date().getMonth() + 1,\r\n        date: new Date().getDate(),\r\n        logoutTime: [currentTime],\r\n        status: \"logout\"\r\n      });\r\n      setMessage(\"Logout time recorded successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error recording logout time:\", error);\r\n      setMessage(\"Error recording logout time\");\r\n    }\r\n  };\r\n\r\n  const handleResume = async () => {\r\n    let email = localStorage.getItem(\"Email\");\r\n    if (employees) {\r\n      let data = employees.filter((val) => {\r\n        return val.Email === email;\r\n      });\r\n      let attencenceID = data[0].attendanceObjID;\r\n      let selectedEmployee = data[0]._id;\r\n      try {\r\n        if (!data) {\r\n          setMessage(\"Please select an employee\");\r\n          return;\r\n        }\r\n\r\n        const currentTime = new Date().toLocaleTimeString();\r\n        const currentTimeMs = Math.round(new Date().getTime() / 1000 / 60);\r\n\r\n        await axios.post(\r\n          `http://localhost:4000/api/attendance/${attencenceID}`,\r\n          {\r\n            employeeId: selectedEmployee,\r\n            year: new Date().getFullYear(),\r\n            month: new Date().getMonth() + 1,\r\n            date: new Date().getDate(),\r\n            ResumeTime: [currentTime],\r\n            resumeTimeMS: [currentTimeMs],\r\n            status: \"resume\"\r\n          }\r\n        );\r\n\r\n        setMessage(\"Resumed time recorded successfully\");\r\n      } catch (error) {\r\n        console.error(\"Error recording resume time:\", error);\r\n        setMessage(\"Error recording resume time\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleBreak = async () => {\r\n    let email = localStorage.getItem(\"Email\");\r\n    if (employees) {\r\n      let data = employees.filter((val) => {\r\n        return val.Email === email;\r\n      });\r\n      console.log(email);\r\n      let attencenceID = data[0].attendanceObjID;\r\n      let selectedEmployee = data[0]._id;\r\n      try {\r\n        if (!data) {\r\n          setMessage(\"Please select an employee\");\r\n          return;\r\n        }\r\n\r\n        const currentTime = new Date().toLocaleTimeString();\r\n        const currentTimeMs = Math.round(new Date().getTime() / 1000 / 60);\r\n\r\n        await axios.post(\r\n          `http://localhost:4000/api/attendance/${attencenceID}`,\r\n          {\r\n            employeeId: selectedEmployee,\r\n            year: new Date().getFullYear(),\r\n            month: new Date().getMonth() + 1,\r\n            date: new Date().getDate(),\r\n            breakTime: [currentTime],\r\n            breakTimeMs: [currentTimeMs],\r\n            status: \"break\"\r\n          }\r\n        );\r\n        setMessage(\"Break time recorded successfully\");\r\n      } catch (error) {\r\n        console.error(\"Error recording break time:\", error);\r\n        setMessage(\"Error recording break time\");\r\n      }\r\n    }\r\n  };\r\n\r\n  console.log(employees);\r\n\r\n  return (\r\n    <div className=\"App row\">\r\n      <h1 className=\"text-center text-uppercase my-3\">Attendance System</h1>\r\n      <div\r\n        className=\"form-control d-flex  gap-3 p-3 m-3\"\r\n        style={{ height: \"fit-content\" }}\r\n      >\r\n        {/* <select\r\n          className=\"form-select mx-2 w-25 \"\r\n          onChange={(e) => handleUserChange(e.target.value)}\r\n        >\r\n          <option value=\"\">-- Select User --</option>\r\n          {employees.map((employee) => (\r\n            <option key={employee._id} value={employee._id}>\r\n              {employee.FirstName}\r\n            </option>\r\n          ))}\r\n        </select> */}\r\n        <input value={empName} style={{ display: \"none\" }} />\r\n\r\n        <div className=\"d-flex gap-3\">\r\n          <button className=\"btn btn-success\" onClick={handleLogin}>\r\n            Mark Attendance\r\n          </button>\r\n          <button className=\"btn btn-danger\" onClick={handleLogout}>\r\n            Logout\r\n          </button>\r\n          <div className=\"d-flex gap-3\">\r\n            <button className=\"btn btn-warning\" onClick={handleBreak}>\r\n              Break\r\n            </button>\r\n            <button className=\"btn btn-primary\" onClick={handleResume}>\r\n              Resume\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {message && <p>{message}</p>}\r\n\r\n      <div className=\"view\">\r\n        <SelfAttendance />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SetLog;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\Dashboard\\EmpDash.jsx",["955","956","957","958","959","960","961"],"import React, { useState } from \"react\";\r\nimport \"../../HrManager/DashboardHR.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport LeaveApplicationEmpTable from \"../EmpLeave/LeaveApplicationEmp\";\r\nimport HolidayList from \"../../../Pages/LeaveCalendar/HolidayList\";\r\nimport UpcomingBirthdays from \"./CountData/UpcomingBirthdays\";\r\nimport EmpTaskChart from \"./EmpChart.jsx/EmpTaskChart\";\r\nimport EmpTaskCount from \"./CountData/EmpTaskCount\";\r\n// import DepartmentChart from \"./EmpChart.jsx/DepartmentChart\";\r\nimport DepartmentChart from \"./EmpChart.jsx/DepartmentChart\";\r\nimport Chart from \"react-apexcharts\";\r\nimport NoticeBoard from \"../Notification/NoticeBoard\"\r\nimport { IoIosArrowDroprightCircle } from \"react-icons/io\";\r\n\r\nconst EmpDash = (props) => {\r\n  const [totalEmployeeLeave, setTotalEmployeeLeave] = useState(0);\r\n\r\n  // Update total leave count when LeaveApplicationEmpTable component notifies\r\n  const updateTotalEmployeeLeave = (count) => {\r\n    setTotalEmployeeLeave(count);\r\n  };\r\n\r\n  return (\r\n    <div className=\"row gap-0 mx-0\">\r\n      <div className=\"col-lg-9\">\r\n        <EmpTaskCount />\r\n        {/* <LeaveCount /> */}\r\n\r\n        <div className=\"row row_flex \">\r\n          <div className=\"col-lg-8\">\r\n            <EmpTaskChart />\r\n          </div>\r\n          <div className=\"col-lg-4\">{/* <DepartmentChart /> */}</div>\r\n        </div>\r\n        <div className=\"row row_flex\">\r\n          <div className=\"col-lg-12\">{/* <TodatAttendance /> */}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-lg-3\">\r\n        <UpcomingBirthdays />\r\n        <NoticeBoard/>\r\n        <div className=\"holiday mt-3\">\r\n          <HolidayList />\r\n        </div>\r\n        <div className=\"col-md-9\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmpDash;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\attendance\\SelfAttendance.jsx",["962","963","964","965","966","967","968","969","970"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { TfiReload } from \"react-icons/tfi\";\r\nimport { FaCircleInfo } from \"react-icons/fa6\";\r\n\r\nconst AttendanceDetails = (props) => {\r\n  const [employees, setEmployees] = useState([]);\r\n  const [attendanceData, setAttendanceData] = useState(null);\r\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\r\n\r\n  const [hoveredDate, setHoveredDate] = useState(null);\r\n  const [isInfoHovering, setIsInfoHovering] = useState(false);\r\n  const employeeId = localStorage.getItem(\"_id\");\r\n\r\n  const handleMouseEnter = (date) => {\r\n    setHoveredDate(date);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoveredDate(null);\r\n  };\r\n\r\n  const handleInfoMouseEnter = () => {\r\n    setIsInfoHovering(true);\r\n  };\r\n\r\n  const handleInfoMouseLeave = () => {\r\n    setIsInfoHovering(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEmployees();\r\n  }, []);\r\n\r\n  const fetchEmployees = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://localhost:4000/api/employee/\" + props.data[\"_id\"],\r\n        {\r\n          headers: {\r\n            authorization: localStorage.getItem(\"token\") || \"\"\r\n          }\r\n        }\r\n      );\r\n      setEmployees(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching employees:\", error);\r\n    }\r\n  };\r\n\r\n  const handleFetchAttendance = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:4000/api/attendance/${employeeId}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\") || \"\"}`\r\n          }\r\n        }\r\n      );\r\n\r\n      let singleUser = response.data.filter((val) => {\r\n        return val.employeeObjID && val.employeeObjID._id === employeeId;\r\n      });\r\n\r\n      setAttendanceData(singleUser.length > 0 ? singleUser[0] : null);\r\n    } catch (error) {\r\n      console.error(\"Error fetching attendance data:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleFetchAttendance();\r\n  }, [selectedYear, selectedMonth]); // Add dependencies to re-fetch attendance when year or month changes\r\n\r\n  const getTotalHolidays = () => {\r\n    if (\r\n      attendanceData &&\r\n      attendanceData.user &&\r\n      attendanceData.user.holidayObjID\r\n    ) {\r\n      return attendanceData.user.holidayObjID.holidays.length;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  const getMonthName = (monthNumber) => {\r\n    switch (monthNumber) {\r\n      case 1:\r\n        return \"January\";\r\n      case 2:\r\n        return \"February\";\r\n      case 3:\r\n        return \"March\";\r\n      case 4:\r\n        return \"April\";\r\n      case 5:\r\n        return \"May\";\r\n      case 6:\r\n        return \"June\";\r\n      case 7:\r\n        return \"July\";\r\n      case 8:\r\n        return \"August\";\r\n      case 9:\r\n        return \"September\";\r\n      case 10:\r\n        return \"October\";\r\n      case 11:\r\n        return \"November\";\r\n      case 12:\r\n        return \"December\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const getMonthsForYear = (year) => {\r\n    if (year === new Date().getFullYear()) {\r\n      return Array.from({ length: new Date().getMonth() + 1 }, (_, i) => i + 1);\r\n    }\r\n    return Array.from({ length: 12 }, (_, i) => i + 1);\r\n  };\r\n\r\n  const getYears = () => {\r\n    if (attendanceData && attendanceData.years) {\r\n      const currentYear = new Date().getFullYear();\r\n      return attendanceData.years.filter((year) => year.year <= currentYear);\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const millisecondsToTime = (milliseconds) => {\r\n    const millisecond = Math.floor(milliseconds);\r\n    const seconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n\r\n    const formattedHours = String(hours).padStart(2, \"0\");\r\n    const formattedMinutes = String(minutes % 60).padStart(2, \"0\");\r\n    const formattedSeconds = String(seconds % 60).padStart(2, \"0\");\r\n    const formattedMillisecond = String(millisecond % 60).padStart(2, \"0\");\r\n\r\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}:${formattedMillisecond}`;\r\n  };\r\n\r\n  const getAttendanceMark = (date) => {\r\n    const loginTime = date && date.loginTime[0];\r\n    if (loginTime) {\r\n      const [loginHour, loginMinute] = loginTime.split(\":\").map(Number);\r\n      if (loginHour > 9 || (loginHour === 9 && loginMinute > 45)) {\r\n        return \"H\";\r\n      } else if (loginHour > 9 || (loginHour === 9 && loginMinute > 30)) {\r\n        return \"L\";\r\n      }\r\n    }\r\n    return loginTime ? \"P\" : \"A\";\r\n  };\r\n\r\n  const calculateMonthlyTotals = () => {\r\n    if (!attendanceData) return null;\r\n\r\n    const monthlyData = attendanceData.years\r\n      .find((yearData) => yearData.year === selectedYear)\r\n      ?.months.find((month) => month.month === selectedMonth);\r\n\r\n    if (monthlyData) {\r\n      const totalWorkingHours = monthlyData.dates.reduce(\r\n        (acc, date) => acc + date.totalLogAfterBreak,\r\n        0\r\n      );\r\n\r\n      const totalPresent = monthlyData.dates.filter(\r\n        (date) => getAttendanceMark(date) === \"P\"\r\n      ).length;\r\n\r\n      const totalAbsent = monthlyData.dates.filter(\r\n        (date) => getAttendanceMark(date) === \"A\"\r\n      ).length;\r\n\r\n      const totalHalfDays = monthlyData.dates.filter(\r\n        (date) => getAttendanceMark(date) === \"H\"\r\n      ).length;\r\n\r\n      return {\r\n        totalWorkingHours,\r\n        totalPresent,\r\n        totalAbsent,\r\n        totalHalfDays\r\n      };\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const monthlyTotals = calculateMonthlyTotals();\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column p-5 gap-3\">\r\n      {attendanceData && (\r\n        <div className=\"d-flex gap-3\">\r\n          <div>\r\n            <label htmlFor=\"year\">Select a year:</label>\r\n            <select\r\n              className=\"form-select shadow\"\r\n              id=\"year\"\r\n              value={selectedYear}\r\n              onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n            >\r\n              {getYears().map((year) => (\r\n                <option key={year.year} value={year.year}>\r\n                  {year.year}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"month\">Select a month:</label>\r\n            <select\r\n              className=\"form-select shadow\"\r\n              id=\"month\"\r\n              value={selectedMonth}\r\n              onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\r\n            >\r\n              {getMonthsForYear(selectedYear).map((month) => (\r\n                <option key={month} value={month}>\r\n                  {getMonthName(month)}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {attendanceData && monthlyTotals && (\r\n        <div style={{ overflow: \"auto\", height: \"80vh\" }}>\r\n          <div className=\"mt-4\">\r\n            <h5>Monthly Totals</h5>\r\n            <p>\r\n              Total Working Hours:{\" \"}\r\n              {millisecondsToTime(monthlyTotals.totalWorkingHours)}\r\n            </p>\r\n            <p>Total Present: {monthlyTotals.totalPresent}</p>\r\n            <p>Total Absent: {monthlyTotals.totalAbsent}</p>\r\n            <p>Total Half-Days: {monthlyTotals.totalHalfDays}</p>\r\n          </div>\r\n\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr className=\"shadow-sm\">{/* ... (unchanged) */}</tr>\r\n            </thead>\r\n            <tbody>\r\n              {getYears().map((year) =>\r\n                year.months\r\n                  .filter((month) => month.month === selectedMonth)\r\n                  .map((month) =>\r\n                    month.dates\r\n                      .sort((a, b) => a.date - b.date)\r\n                      .map((date) => (\r\n                        <tr\r\n                          className=\"shadow-sm\"\r\n                          key={date.date}\r\n                          id={`attendance-row-${date.date}`}\r\n                          onMouseEnter={() => handleMouseEnter(date.date)}\r\n                          onMouseLeave={() => handleMouseLeave()}\r\n                        >\r\n                          {/* ... (unchanged) */}\r\n                        </tr>\r\n                      ))\r\n                  )\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n\r\n      {attendanceData === null && (\r\n        <div\r\n          style={{\r\n            height: \"80vh\",\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            wordSpacing: \"5px\",\r\n            flexDirection: \"column\",\r\n            gap: \"1rem\"\r\n          }}\r\n        >\r\n          <div className=\"fs-2 fw-bolder\">\r\n            <TfiReload className=\"spinner-border text-info\" />\r\n          </div>\r\n          <p className=\"text-muted\">\r\n            User not selected. To view data, please select a user.\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AttendanceDetails;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { TfiReload } from \"react-icons/tfi\";\r\n// import { FaCircleInfo } from \"react-icons/fa6\";\r\n\r\n// const AttendanceDetails = (props) => {\r\n//   const [employees, setEmployees] = useState([]);\r\n//   const [attendanceData, setAttendanceData] = useState(null);\r\n//   const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n//   const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\r\n\r\n//   const [hoveredDate, setHoveredDate] = useState(null);\r\n//   const [isInfoHovering, setIsInfoHovering] = useState(false);\r\n//   const [presentCount, setPresentCount] = useState(0);\r\n//   const [absentCount, setAbsentCount] = useState(0);\r\n//   const [halfDayCount, setHalfDayCount] = useState(0);\r\n//   const [totalPresentTime, setTotalPresentTime] = useState(0);\r\n//   const [totalAbsentTime, setTotalAbsentTime] = useState(0);\r\n//   const [totalHalfDayTime, setTotalHalfDayTime] = useState(0);\r\n\r\n//   const employeeId = localStorage.getItem(\"_id\");\r\n\r\n//   const handleMouseEnter = (date) => {\r\n//     setHoveredDate(date);\r\n//   };\r\n\r\n//   const handleMouseLeave = () => {\r\n//     setHoveredDate(null);\r\n//   };\r\n\r\n//   const handleInfoMouseEnter = () => {\r\n//     setIsInfoHovering(true);\r\n//   };\r\n\r\n//   const handleInfoMouseLeave = () => {\r\n//     setIsInfoHovering(false);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchEmployees();\r\n//   }, []);\r\n\r\n//   const fetchEmployees = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         \"http://localhost:4000/api/employee/\" + props.data[\"_id\"],\r\n//         {\r\n//           headers: {\r\n//             authorization: localStorage.getItem(\"token\") || \"\"\r\n//           }\r\n//         }\r\n//       );\r\n//       setEmployees(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching employees:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleFetchAttendance = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:4000/api/attendance/${employeeId}`,\r\n//         {\r\n//           headers: {\r\n//             Authorization: `Bearer ${localStorage.getItem(\"token\") || \"\"}`\r\n//           }\r\n//         }\r\n//       );\r\n\r\n//       let singleUser = response.data.filter((val) => {\r\n//         return val.employeeObjID && val.employeeObjID._id === employeeId;\r\n//       });\r\n\r\n//       setAttendanceData(singleUser.length > 0 ? singleUser[0] : null);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching attendance data:\", error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     handleFetchAttendance();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (attendanceData) {\r\n//       let presentCount = 0;\r\n//       let absentCount = 0;\r\n//       let halfDayCount = 0;\r\n//       let totalPresentTime = 0;\r\n//       let totalAbsentTime = 0;\r\n//       let totalHalfDayTime = 0;\r\n\r\n//       attendanceData.years.forEach((year) => {\r\n//         year.months.forEach((month) => {\r\n//           month.dates.forEach((date) => {\r\n//             const attendanceMark = getAttendanceMark(date);\r\n\r\n//             if (attendanceMark === \"P\") {\r\n//               presentCount++;\r\n//               totalPresentTime += date.totalLogAfterBreak;\r\n//             } else if (attendanceMark === \"A\") {\r\n//               absentCount++;\r\n//               totalAbsentTime += date.totalLogAfterBreak;\r\n//             } else if (attendanceMark === \"H\" || attendanceMark === \"L\") {\r\n//               halfDayCount++;\r\n//               totalHalfDayTime += date.totalLogAfterBreak;\r\n//             }\r\n//           });\r\n//         });\r\n//       });\r\n\r\n//       setPresentCount(presentCount);\r\n//       setAbsentCount(absentCount);\r\n//       setHalfDayCount(halfDayCount);\r\n//       setTotalPresentTime(totalPresentTime);\r\n//       setTotalAbsentTime(totalAbsentTime);\r\n//       setTotalHalfDayTime(totalHalfDayTime);\r\n//     }\r\n//   }, [attendanceData]);\r\n\r\n//   const getAttendanceMark = (date) => {\r\n//     const loginTime = date && date.loginTime[0];\r\n//     if (loginTime) {\r\n//       const [loginHour, loginMinute] = loginTime.split(\":\").map(Number);\r\n//       if (loginHour > 9 || (loginHour === 9 && loginMinute > 45)) {\r\n//         return \"H\";\r\n//       } else if (loginHour > 9 || (loginHour === 9 && loginMinute > 30)) {\r\n//         return \"L\";\r\n//       }\r\n//     }\r\n//     return loginTime ? \"P\" : \"A\";\r\n//   };\r\n//   const millisecondsToTime = (milliseconds) => {\r\n//     const millisecond = Math.floor(milliseconds);\r\n//     const seconds = Math.floor(milliseconds / 1000);\r\n//     const minutes = Math.floor(seconds / 60);\r\n//     const hours = Math.floor(minutes / 60);\r\n\r\n//     const formattedHours = String(hours).padStart(2, \"0\");\r\n//     const formattedMinutes = String(minutes % 60).padStart(2, \"0\");\r\n//     const formattedSeconds = String(seconds % 60).padStart(2, \"0\");\r\n//     const formattedMillisecond = String(millisecond % 60).padStart(2, \"0\");\r\n\r\n//     return `${formattedHours}:${formattedMinutes}:${formattedSeconds}:${formattedMillisecond}`;\r\n//   };\r\n//   // ... (existing code)\r\n\r\n//   return (\r\n//     <div className=\"d-flex flex-column p-5 gap-3\">\r\n//       {attendanceData && (\r\n//         <div>\r\n//           <div>\r\n//             <h3>Attendance Summary:</h3>\r\n//             <p>Present Count: {presentCount}</p>\r\n//             <p>Absent Count: {absentCount}</p>\r\n//             <p>Half-Day Count: {halfDayCount}</p>\r\n//             <p>Total Present Time: {millisecondsToTime(totalPresentTime)}</p>\r\n//             <p>Total Absent Time: {millisecondsToTime(totalAbsentTime)}</p>\r\n//             <p>Total Half-Day Time: {millisecondsToTime(totalHalfDayTime)}</p>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {attendanceData && (\r\n//         <div style={{ overflow: \"auto\", height: \"80vh\" }}>\r\n//           {/* ... (existing code) */}\r\n//         </div>\r\n//       )}\r\n\r\n//       {attendanceData === null && <div>{/* ... (existing code) */}</div>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AttendanceDetails;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\Dashboard\\CountData\\UpcomingBirthdays.jsx",["971","972","973","974","975","976","977","978","979"],"import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { GiPartyPopper } from \"react-icons/gi\";\r\nimport HappyBirthday from \"./HappyBirthday.svg\";\r\n\r\nconst UpcomingBirthdays = () => {\r\n  const [employeeData, setEmployeeData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [rowData, setRowData] = useState([]);\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  const [isIdFilterActive, setIsIdFilterActive] = useState(false);\r\n  const [isIdSortAscending, setIsIdSortAscending] = useState(true);\r\n  const [upcomingBirthdays, setUpcomingBirthdays] = useState([]);\r\n\r\n  const loadEmployeeData = () => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/employee/\" + localStorage.getItem(\"_id\"),{\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        // Ensure that response.data is an array\r\n        if (Array.isArray(response.data)) {\r\n          setEmployeeData(response.data);\r\n          setLoading(false);\r\n\r\n          // Clear the state arrays\r\n          setRowData([]);\r\n\r\n          response.data.forEach((data) => {\r\n            let temp = {\r\n              data,\r\n              Email: data[\"Email\"],\r\n              Password: data[\"Password\"],\r\n              Account:\r\n                data[\"Account\"] === 1\r\n                  ? \"Admin\"\r\n                  : data[\"Account\"] === 2\r\n                  ? \"HR\"\r\n                  : data[\"Account\"] === 3\r\n                  ? \"Employee\"\r\n                  : \"\",\r\n              RoleName: data[\"role\"][0] ? data[\"role\"][0][\"RoleName\"] : \"\",\r\n              FirstName: data[\"FirstName\"],\r\n              MiddleName: data[\"MiddleName\"],\r\n              LastName: data[\"LastName\"],\r\n              DOB: data[\"DOB\"].slice(0, 10),\r\n              ContactNo: data[\"ContactNo\"],\r\n              EmployeeCode: data[\"EmployeeCode\"],\r\n              empID: data[\"empID\"],\r\n              DepartmentName: data[\"department\"][0]\r\n                ? data[\"department\"][0][\"DepartmentName\"]\r\n                : \"\",\r\n              PositionName: data[\"position\"][0]\r\n                ? data[\"position\"][0][\"PositionName\"]\r\n                : \"\",\r\n              DateOfJoining: data[\"DateOfJoining\"].slice(0, 10)\r\n            };\r\n\r\n            // Use set function to update state\r\n            setRowData((prevData) => [...prevData, temp]);\r\n          });\r\n        } else {\r\n          console.error(\"Data received is not an array:\", response.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployeeData();\r\n  }, []);\r\n\r\n  const calculateUpcomingBirthdays = () => {\r\n    const today = new Date();\r\n    const upcomingBirthdaysData = rowData.filter((employee) => {\r\n      const dob = new Date(employee.DOB);\r\n      dob.setFullYear(today.getFullYear());\r\n\r\n      // Check if the upcoming birthday is within the next 7 days\r\n      const timeDiff = dob - today;\r\n      const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));\r\n      return daysDiff >= 0 && daysDiff <= 7;\r\n    });\r\n\r\n    setUpcomingBirthdays(upcomingBirthdaysData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    calculateUpcomingBirthdays();\r\n  }, [rowData]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"birthday shadow position-relative\">\r\n        <h5\r\n          style={{\r\n            position: \"sticky\",\r\n            top: \"0\",\r\n            backgroundColor: \"var(--primaryDashColorDark)\",\r\n            color: \"var(--primaryDashMenuColor)\"\r\n          }}\r\n          className=\"fw-bolder pb-3 px-3 pt-3 d-flex justify-content-between gap-0 text-center\"\r\n        >\r\n          <GiPartyPopper /> Upcoming Birthdays{\" \"}\r\n          <span className=\"text-primary\">({upcomingBirthdays.length})</span>\r\n        </h5>\r\n        <div>\r\n          {upcomingBirthdays.length > 0 ? (\r\n            <div className=\"d-flex flex-column gap-3 py-3 px-3\">\r\n              {upcomingBirthdays.map((employee) => (\r\n                <div\r\n                  style={{ borderBottom: \"1px solid #E3F4F4\" }}\r\n                  className=\"\"\r\n                  key={employee.empID}\r\n                >\r\n                  <div className=\"row\" style={{ verticalAlign: \"middle\" }}>\r\n                    <div className=\"d-flex justify-content-between \">\r\n                      <div className=\"d-flex gap-2\">\r\n                        <div style={{ height: \"45px\", width: \"45px\" }}>\r\n                          <img\r\n                            style={{\r\n                              height: \"100%\",\r\n                              width: \"100%\",\r\n                              border: \"3px solid gray\",\r\n                              borderRadius: \"50%\",\r\n                              overflow: \"hidden\",\r\n                              objectFit: \"cover\"\r\n                            }}\r\n                            src={\r\n                              employee?.data?.profile?.image_url\r\n                                ? employee?.data?.profile?.image_url\r\n                                : \"https://a.storyblok.com/f/191576/1200x800/215e59568f/round_profil_picture_after_.webp\"\r\n                            }\r\n                            alt=\"\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"d-flex flex-column my-auto\">\r\n                          <span\r\n                            style={{ fontSize: \"12px\", fontWeight: \"bold\" }}\r\n                          >\r\n                            {employee.empID}\r\n                          </span>\r\n                          <span\r\n                            style={{ fontSize: \"13px\", fontWeight: \"bold\" }}\r\n                            className=\"text-uppercase fw-bold\"\r\n                          >{`${employee.FirstName} ${employee.LastName}`}</span>\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        style={{ fontSize: \"13px\" }}\r\n                        className=\"my-auto fw-bolder text-muted\"\r\n                      >\r\n                        Date <br />\r\n                        {employee.DOB}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div\r\n              className=\"d-flex flex-column justify-content-center aline-items-center gap-3\"\r\n              style={{ height: \"100%\", width: \"100%\" }}\r\n            >\r\n              <img\r\n                style={{ height: \"60%\", width: \"60%\" }}\r\n                className=\"mx-auto\"\r\n                src={HappyBirthday}\r\n                alt=\"Happy Birthday\"\r\n              />\r\n              <p\r\n                style={{ opacity: \"60%\", fontSize: \"13px\" }}\r\n                className=\"text-center w-75 mx-auto  fw-bold text-muted \"\r\n              >\r\n                No upcoming birthdays in the next 7 days.\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpcomingBirthdays;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\Dashboard\\EmpChart.jsx\\DepartmentChart.jsx",["980","981","982","983","984","985"],"// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { toast } from \"react-hot-toast\";\r\n// import { BsFiletypeDoc } from \"react-icons/bs\";\r\n// import { Table } from \"react-bootstrap\";\r\n\r\n// const EmployeeNewTask = () => {\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [email, setEmail] = useState(null);\r\n\r\n//   const id = localStorage.getItem(\"_id\");\r\n\r\n//   useEffect(() => {\r\n//     const loadPersonalInfoData = async () => {\r\n//       try {\r\n//         const response = await axios.get(\r\n//           `http://localhost:4000/api/personal-info/${id}`,\r\n//           {\r\n//             headers: {\r\n//               authorization: localStorage.getItem(\"token\") || \"\"\r\n//             }\r\n//           }\r\n//         );\r\n//         setEmail(response.data.Email);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching employees:\", error);\r\n//       }\r\n//     };\r\n\r\n//     loadPersonalInfoData();\r\n//   }, []);\r\n\r\n//   const calculateRemainingTime = (endDate) => {\r\n//     const now = new Date();\r\n//     const endDateTime = new Date(endDate);\r\n//     let remainingTime = endDateTime - now;\r\n\r\n//     if (remainingTime < 0) {\r\n//       // If remaining time is negative, consider it as delay\r\n//       remainingTime = Math.abs(remainingTime);\r\n//       return { delay: true, days: 0, hours: 0, minutes: 0 };\r\n//     } else {\r\n//       // Calculate remaining days, hours, minutes, and seconds\r\n//       const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\r\n//       const hours = Math.floor(\r\n//         (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n//       );\r\n//       const minutes = Math.floor(\r\n//         (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\r\n//       );\r\n//       return { delay: false, days, hours, minutes };\r\n//     }\r\n//   };\r\n\r\n//   const fetchData = async () => {\r\n//     try {\r\n//       const response = await axios.get(\"http://localhost:4000/api/tasks\");\r\n//       setTasks(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching tasks:\", error.message);\r\n//       setError(\"Error fetching tasks. Please try again later.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//       setTimeout(fetchData, 60000);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchData();\r\n\r\n//     return () => clearTimeout();\r\n//   }, []);\r\n\r\n//   // Count of different task statuses for the current employee\r\n//   const acceptedTasksCount = tasks.filter((task) =>\r\n//     task.employees.some(\r\n//       (taskemp) =>\r\n//         taskemp.empemail === email && taskemp.emptaskStatus === \"Accepted\"\r\n//     )\r\n//   ).length;\r\n\r\n//   const rejectedTasksCount = tasks.filter((task) =>\r\n//     task.employees.some(\r\n//       (taskemp) =>\r\n//         taskemp.empemail === email && taskemp.emptaskStatus === \"Rejected\"\r\n//     )\r\n//   ).length;\r\n\r\n//   const completedTasksCount = tasks.filter((task) =>\r\n//     task.employees.some(\r\n//       (taskemp) =>\r\n//         taskemp.empemail === email && taskemp.emptaskStatus === \"Completed\"\r\n//     )\r\n//   ).length;\r\n\r\n//   const pendingTasksCount = tasks.filter((task) =>\r\n//     task.employees.some(\r\n//       (taskemp) => taskemp.empemail === email && task.status === \"Pending\"\r\n//     )\r\n//   ).length;\r\n\r\n//   const notAssignedButNotAcceptedTasksCount = tasks.filter(\r\n//     (task) =>\r\n//       !task.employees.some((taskemp) => taskemp.empemail === email) &&\r\n//       task.employees.every((taskemp) => taskemp.emptaskStatus !== \"Accepted\")\r\n//   ).length;\r\n\r\n//   const assignedTasksCount = tasks.filter((task) =>\r\n//     task.employees.some(\r\n//       (taskemp) =>\r\n//         taskemp.empemail === email && taskemp.emptaskStatus === \"Task Assigned\"\r\n//     )\r\n//   ).length;\r\n\r\n//   const notAcceptedAssignedTasksCount = tasks.filter((task) =>\r\n//     task.employees.some(\r\n//       (taskemp) =>\r\n//         taskemp.empemail === email &&\r\n//         taskemp.emptaskStatus === \"Task Assigned\" &&\r\n//         taskemp.emptaskStatus !== \"Accepted\"\r\n//     )\r\n//   ).length;\r\n\r\n//   const acceptedTasksNotCompletedOnTimeCount = tasks.filter((task) =>\r\n//     task.employees.some(\r\n//       (taskemp) =>\r\n//         taskemp.empemail === email &&\r\n//         taskemp.emptaskStatus === \"Accepted\" &&\r\n//         calculateRemainingTime(task.endDate).delay\r\n//     )\r\n//   ).length;\r\n\r\n//   const assignedTasksNotAcceptedOnTimeCount = tasks.filter((task) =>\r\n//     task.employees.some(\r\n//       (taskemp) =>\r\n//         taskemp.empemail === email &&\r\n//         taskemp.emptaskStatus === \"Task Assigned\" &&\r\n//         calculateRemainingTime(task.endDate).delay\r\n//     )\r\n//   ).length;\r\n\r\n//   return (\r\n//     <div>\r\n//       {/* ... (unchanged) */}\r\n//       <h1 className=\"fs-3 fw-bolder text-uppercase \">\r\n//         🌟New Task ({tasks.length})\r\n//       </h1>\r\n\r\n//       <p>Accepted Tasks Count: {acceptedTasksCount}</p>\r\n//       <p>Rejected Tasks Count: {rejectedTasksCount}</p>\r\n//       <p>Completed Tasks Count: {completedTasksCount}</p>\r\n//       <p>Pending Tasks Count: {pendingTasksCount}</p>\r\n//       <p>\r\n//         Not Assigned but Not Accepted Tasks Count:{\" \"}\r\n//         {notAssignedButNotAcceptedTasksCount}\r\n//       </p>\r\n\r\n//       <p>Assigned Tasks Count: {assignedTasksCount}</p>\r\n//       <p>Not Accepted Assigned Tasks Count: {notAcceptedAssignedTasksCount}</p>\r\n\r\n//       <p>\r\n//         Accepted Tasks Not Completed On Time Count:{\" \"}\r\n//         {acceptedTasksNotCompletedOnTimeCount}\r\n//       </p>\r\n//       <p>\r\n//         Assigned Tasks Not Accepted On Time Count:{\" \"}\r\n//         {assignedTasksNotAcceptedOnTimeCount}\r\n//       </p>\r\n\r\n//       {/* ... (unchanged) */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EmployeeNewTask;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport \"./chart.css\";\r\nimport axios from \"axios\";\r\n\r\nconst DepartmentChart = (props) => {\r\n  const [departmentData, setDepartmentData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const id = localStorage.getItem(\"_id\");\r\n  const [chartOption, setChartOption] = useState({\r\n    options: {\r\n      labels: [],\r\n      plotOptions: {\r\n        pie: {\r\n          donut: {\r\n            labels: {\r\n              show: true,\r\n              total: {\r\n                show: true\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    series: []\r\n  });\r\n\r\n  const loadEmployeeData = () => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/employee/\", {\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        if (Array.isArray(response.data)) {\r\n          setDepartmentData(\r\n            response.data.map((data) =>\r\n              data[\"department\"][0]\r\n                ? data[\"department\"][0][\"DepartmentName\"]\r\n                : \"\"\r\n            )\r\n          );\r\n        } else {\r\n          console.error(\"Data received is not an array:\", response.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // const loadPersonalInfoData = () => {\r\n  //   if (props.data) {\r\n  //     axios\r\n  //       .get(`http://localhost:4000/api/personal-info/${props.data[\"_id\"]}`, {\r\n  //         headers: {\r\n  //           authorization: localStorage.getItem(\"token\") || \"\"\r\n  //         }\r\n  //       })\r\n  //       .then((response) => {\r\n  //         if (Array.isArray(response.data)) {\r\n  //           setDepartmentData(\r\n  //             response.data.map((data) =>\r\n  //               data[\"department\"][0]\r\n  //                 ? data[\"department\"][0][\"DepartmentName\"]\r\n  //                 : \"\"\r\n  //             )\r\n  //           );\r\n  //         } else {\r\n  //           console.error(\"Data received is not an array:\", response.data);\r\n  //         }\r\n  //       })\r\n  //       .catch((error) => {\r\n  //         console.log(error);\r\n  //       });\r\n  //   }\r\n  // };\r\n\r\n  useEffect(() => {\r\n    loadEmployeeData();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadPersonalInfoData();\r\n  // }, [props.data]);\r\n\r\n  const updateChartOptions = () => {\r\n    const departmentCounts = {};\r\n    departmentData.forEach((department) => {\r\n      departmentCounts[department] = (departmentCounts[department] || 0) + 1;\r\n    });\r\n\r\n    const labels = Object.keys(departmentCounts);\r\n    const series = labels.map((label) => departmentCounts[label]);\r\n\r\n    setChartOption({\r\n      options: {\r\n        labels: labels,\r\n        plotOptions: {\r\n          pie: {\r\n            donut: {\r\n              labels: {\r\n                show: true,\r\n                total: {\r\n                  show: true\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      series: series\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateChartOptions();\r\n  }, [departmentData]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"ChartCard shadow-sm \">\r\n        <div className=\"ChartHeader\">\r\n          <h5 className=\"fw-bolder d-flex gap-3\">Employee By Department</h5>\r\n        </div>\r\n        <Chart\r\n          options={chartOption.options}\r\n          series={chartOption.series}\r\n          type=\"donut\"\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DepartmentChart;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\attendance\\Attendance.jsx",["986","987","988","989","990"],"import React, { useEffect, useContext, useState } from \"react\";\nimport axios from \"axios\";\nimport { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\nimport InnerDashContainer from \"../../InnerDashContainer\";\nimport AttendanceDetails from \"./AttendanceList\";\n\nfunction SetLog(props) {\n  // const [employees, setEmployees] = useState([]);\n  // const [selectedEmployee, setSelectedEmployee] = useState(\"\");\n  // const [attencenceID, setAttencenceID] = useState(\"\");\n  // const [message, setMessage] = useState(\"\");\n  const [empName, setEmpName] = useState(null);\n\n  const {\n    employees,\n    setEmployees,\n    selectedEmployee,\n    setSelectedEmployee,\n    attencenceID,\n    setAttencenceID,\n    message,\n    setMessage\n  } = useContext(AttendanceContext);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await axios.get(\n          \"http://localhost:4000/api/employee/\" + props.data[\"_id\"],\n          {\n            headers: {\n              authorization: localStorage.getItem(\"token\") || \"\"\n            }\n          }\n        );\n        console.log(response.data);\n        setEmployees(response.data);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n    fetchUsers();\n  }, []);\n  // hello\n\n  useEffect(() => {\n    const loadPersonalInfoData = async () => {\n      try {\n        const response = await axios.get(\n          \"http://localhost:4000/api/personal-info/\" + props.data[\"_id\"],\n          {\n            headers: {\n              authorization: localStorage.getItem(\"token\") || \"\"\n            }\n          }\n        );\n        console.log(response.data.FirstName);\n        setEmpName(response.data.FirstName);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n\n    loadPersonalInfoData();\n  }, []);\n\n  // hello\n  const handleUserChange = (employeeID) => {\n    const selectedEmployee = employees.find(\n      (employee) => employee._id === employeeID\n    );\n\n    if (selectedEmployee) {\n      setAttencenceID(selectedEmployee.attendanceObjID);\n      setSelectedEmployee(employeeID);\n      getMessage(employeeID);\n    }\n  };\n\n  const getMessage = async (employeeID) => {\n    try {\n      const response = await axios.get(\n        `http://localhost:4000/api/attendance/${employeeID}`\n      );\n      const lastEntry = response.data[response.data.length - 1];\n\n      if (lastEntry) {\n        setMessage(`Status: ${lastEntry.years[0].months[0].dates[0].status}`);\n      } else {\n        setMessage(\"\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching attendance data:\", error);\n    }\n  };\n\n  const handleLogin = async () => {\n    let data = employees.filter((val) => {\n      return val.FirstName === empName;\n    });\n    let attencenceID = data[0].attendanceObjID;\n    let selectedEmployee = data[0]._id;\n\n    try {\n      if (!empName) {\n        setMessage(\"Please select a user\");\n        return;\n      }\n\n      const currentTime = new Date().toLocaleTimeString();\n      await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\n        employeeId: selectedEmployee,\n        year: new Date().getFullYear(),\n        month: new Date().getMonth() + 1,\n        date: new Date().getDate(),\n        loginTime: [currentTime],\n        status: \"login\"\n      });\n      setMessage(\"Login time recorded successfully\");\n    } catch (error) {\n      console.error(\"Error recording login time:\", error);\n      setMessage(\"Error recording login time\");\n    }\n  };\n\n  const handleLogout = async () => {\n    let data = employees.filter((val) => {\n      return val.FirstName === empName;\n    });\n    let attencenceID = data[0].attendanceObjID;\n    let selectedEmployee = data[0]._id;\n    try {\n      if (!empName) {\n        setMessage(\"Please select an employee\");\n        return;\n      }\n\n      const currentTime = new Date().toLocaleTimeString();\n      await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\n        employeeId: selectedEmployee,\n        year: new Date().getFullYear(),\n        month: new Date().getMonth() + 1,\n        date: new Date().getDate(),\n        logoutTime: [currentTime],\n        status: \"logout\"\n      });\n      setMessage(\"Logout time recorded successfully\");\n    } catch (error) {\n      console.error(\"Error recording logout time:\", error);\n      setMessage(\"Error recording logout time\");\n    }\n  };\n\n  const handleResume = async () => {\n    let data = employees.filter((val) => {\n      return val.FirstName === empName;\n    });\n    let attencenceID = data[0].attendanceObjID;\n    let selectedEmployee = data[0]._id;\n    try {\n      if (!empName) {\n        setMessage(\"Please select an employee\");\n        return;\n      }\n\n      const currentTime = new Date().toLocaleTimeString();\n      const currentTimeMs = Math.round(new Date().getTime() / 1000 / 60);\n\n      await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\n        employeeId: selectedEmployee,\n        year: new Date().getFullYear(),\n        month: new Date().getMonth() + 1,\n        date: new Date().getDate(),\n        ResumeTime: [currentTime],\n        resumeTimeMS: [currentTimeMs],\n        status: \"resume\"\n      });\n\n      setMessage(\"Resumed time recorded successfully\");\n    } catch (error) {\n      console.error(\"Error recording resume time:\", error);\n      setMessage(\"Error recording resume time\");\n    }\n  };\n\n  const handleBreak = async () => {\n    let data = employees.filter((val) => {\n      return val.FirstName === empName;\n    });\n    let attencenceID = data[0].attendanceObjID;\n    let selectedEmployee = data[0]._id;\n    try {\n      if (!empName) {\n        setMessage(\"Please select an employee\");\n        return;\n      }\n\n      const currentTime = new Date().toLocaleTimeString();\n      const currentTimeMs = Math.round(new Date().getTime() / 1000 / 60);\n\n      await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\n        employeeId: selectedEmployee,\n        year: new Date().getFullYear(),\n        month: new Date().getMonth() + 1,\n        date: new Date().getDate(),\n        breakTime: [currentTime],\n        breakTimeMs: [currentTimeMs],\n        status: \"break\"\n      });\n      setMessage(\"Break time recorded successfully\");\n    } catch (error) {\n      console.error(\"Error recording break time:\", error);\n      setMessage(\"Error recording break time\");\n    }\n  };\n\n  console.log(employees);\n\n  return (\n    <InnerDashContainer>\n      <h1 className=\"text-center text-uppercase my-3\">Attendance System</h1>\n      <div\n        className=\"form-control d-flex  gap-3 p-3 m-3\"\n        style={{ height: \"fit-content\" }}\n      >\n        <input value={empName} style={{ display: \"none\" }} />\n\n        <div className=\"d-flex gap-3\">\n          <button className=\"btn btn-success\" onClick={handleLogin}>\n            Mark Attendance\n          </button>\n          <button className=\"btn btn-danger\" onClick={handleLogout}>\n            Logout\n          </button>\n          <div className=\"d-flex gap-3\">\n            <button className=\"btn btn-warning\" onClick={handleBreak}>\n              Break\n            </button>\n            <button className=\"btn btn-primary\" onClick={handleResume}>\n              Resume\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {message && <p>{message}</p>}\n      <div className=\"view\">\n        <AttendanceDetails />\n      </div>\n    </InnerDashContainer>\n  );\n}\n\nexport default SetLog;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\attendance\\AttendanceList.jsx",["991","992","993","994"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { TfiReload } from \"react-icons/tfi\";\r\nimport { FaCircleInfo } from \"react-icons/fa6\";\r\n\r\nconst AttendanceDetails = (props) => {\r\n  // const [employeeId, setEmployeeId] = useState(\"\");\r\n  const [employees, setEmployees] = useState([]);\r\n  const [attendanceData, setAttendanceData] = useState(null);\r\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\r\n\r\n  const [hoveredDate, setHoveredDate] = useState(null);\r\n  const [isInfoHovering, setIsInfoHovering] = useState(false);\r\n  const employeeId = localStorage.getItem(\"_id\");\r\n  const handleMouseEnter = (date) => {\r\n    setHoveredDate(date);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoveredDate(null);\r\n  };\r\n\r\n  const handleInfoMouseEnter = () => {\r\n    setIsInfoHovering(true);\r\n  };\r\n\r\n  const handleInfoMouseLeave = () => {\r\n    setIsInfoHovering(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEmployees();\r\n  }, []);\r\n\r\n  const fetchEmployees = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://localhost:4000/api/employee/\" + props.data[\"_id\"],\r\n        {\r\n          headers: {\r\n            authorization: localStorage.getItem(\"token\") || \"\"\r\n          }\r\n        }\r\n      );\r\n      setEmployees(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching employees:\", error);\r\n    }\r\n  };\r\n\r\n  // const handleFetchAttendance = async () => {\r\n  //   try {\r\n  //     const response = await axios.get(\r\n  //       `http://localhost:4000/api/attendance/${employeeId}`,\r\n  //       {\r\n  //         headers: {\r\n  //           Authorization: `Bearer ${localStorage.getItem(\"token\") || \"\"}`\r\n  //         }\r\n  //       }\r\n  //     );\r\n  //     let singleUser = response.data.filter((val) => {\r\n  //       return val.employeeObjID._id === employeeId;\r\n  //     });\r\n  //     setAttendanceData(singleUser.length > 0 ? singleUser[0] : null);\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching attendance data:\", error);\r\n  //   }\r\n  // };\r\n\r\n  const handleFetchAttendance = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:4000/api/attendance/${employeeId}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\") || \"\"}`\r\n          }\r\n        }\r\n      );\r\n\r\n      let singleUser = response.data.filter((val) => {\r\n        return val.employeeObjID && val.employeeObjID._id === employeeId;\r\n      });\r\n\r\n      setAttendanceData(singleUser.length > 0 ? singleUser[0] : null);\r\n    } catch (error) {\r\n      console.error(\"Error fetching attendance data:\", error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    handleFetchAttendance();\r\n  }, []);\r\n  const getTotalHolidays = () => {\r\n    if (\r\n      attendanceData &&\r\n      attendanceData.user &&\r\n      attendanceData.user.holidayObjID\r\n    ) {\r\n      return attendanceData.user.holidayObjID.holidays.length;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  const getMonthName = (monthNumber) => {\r\n    switch (monthNumber) {\r\n      case 1:\r\n        return \"January\";\r\n      case 2:\r\n        return \"February\";\r\n      case 3:\r\n        return \"March\";\r\n      case 4:\r\n        return \"April\";\r\n      case 5:\r\n        return \"May\";\r\n      case 6:\r\n        return \"June\";\r\n      case 7:\r\n        return \"July\";\r\n      case 8:\r\n        return \"August\";\r\n      case 9:\r\n        return \"September\";\r\n      case 10:\r\n        return \"October\";\r\n      case 11:\r\n        return \"November\";\r\n      case 12:\r\n        return \"December\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const getMonthsForYear = (year) => {\r\n    if (year === new Date().getFullYear()) {\r\n      return Array.from({ length: new Date().getMonth() + 1 }, (_, i) => i + 1);\r\n    }\r\n    return Array.from({ length: 12 }, (_, i) => i + 1);\r\n  };\r\n\r\n  const getYears = () => {\r\n    if (attendanceData && attendanceData.years) {\r\n      const currentYear = new Date().getFullYear();\r\n      return attendanceData.years.filter((year) => year.year <= currentYear);\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const millisecondsToTime = (milliseconds) => {\r\n    const millisecond = Math.floor(milliseconds);\r\n    const seconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n\r\n    const formattedHours = String(hours).padStart(2, \"0\");\r\n    const formattedMinutes = String(minutes % 60).padStart(2, \"0\");\r\n    const formattedSeconds = String(seconds % 60).padStart(2, \"0\");\r\n    const formattedMillisecond = String(millisecond % 60).padStart(2, \"0\");\r\n\r\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}:${formattedMillisecond}`;\r\n  };\r\n\r\n  const getAttendanceMark = (date) => {\r\n    const loginTime = date && date.loginTime[0];\r\n    if (loginTime) {\r\n      const [loginHour, loginMinute] = loginTime.split(\":\").map(Number);\r\n      if (loginHour > 9 || (loginHour === 9 && loginMinute > 45)) {\r\n        return \"H\";\r\n      } else if (loginHour > 9 || (loginHour === 9 && loginMinute > 30)) {\r\n        return \"L\";\r\n      }\r\n    }\r\n    return loginTime ? \"P\" : \"A\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column p-5 gap-3\">\r\n      {/* <div className=\"d-flex gap-3 \">\r\n        <div>\r\n          <select\r\n            className=\"form-select w-100 shadow-sm text-muted\"\r\n            id=\"employeeId\"\r\n            value={employeeId}\r\n            onChange={handleEmployeeChange}\r\n          >\r\n            <option value=\"\" disabled>\r\n              --Select an employee--\r\n            </option>\r\n\r\n            {employees\r\n              .sort((a, b) => a.empID - b.empID)\r\n              .map((employee) => (\r\n                <option\r\n                  className=\"text-uppercase\"\r\n                  key={employee._id}\r\n                  value={employee._id}\r\n                >\r\n                  🪪 ({employee.empID}) {employee.FirstName}-{employee.LastName}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n\r\n        <button\r\n          className=\"btn shadow btn-dark fw-bolder\"\r\n          style={{ width: \"fit-content\" }}\r\n          onClick={handleFetchAttendance}\r\n        >\r\n          Fetch Attendance\r\n        </button>\r\n      </div> */}\r\n      {attendanceData && (\r\n        <div className=\"d-flex gap-3\">\r\n          <div>\r\n            <label htmlFor=\"year\">Select a year:</label>\r\n            <select\r\n              className=\"form-select shadow\"\r\n              id=\"year\"\r\n              value={selectedYear}\r\n              onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n            >\r\n              {getYears().map((year) => (\r\n                <option key={year.year} value={year.year}>\r\n                  {year.year}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"month\">Select a month:</label>\r\n            <select\r\n              className=\"form-select shadow\"\r\n              id=\"month\"\r\n              value={selectedMonth}\r\n              onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\r\n            >\r\n              {getMonthsForYear(selectedYear).map((month) => (\r\n                <option key={month} value={month}>\r\n                  {getMonthName(month)}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {attendanceData && (\r\n        <div style={{ overflow: \"auto\", height: \"80vh\" }}>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr className=\"shadow-sm\">\r\n                <th className=\"bg-dark text-white text-center\">Date</th>\r\n                <th className=\"bg-dark text-white text-center\">Status</th>\r\n                <th className=\"bg-dark text-white\">Login Time</th>\r\n                <th className=\"bg-dark text-white\">Logout Time</th>\r\n                <th className=\"bg-dark text-white\">Break</th>\r\n                <th className=\"bg-dark text-white\">Total Login</th>\r\n                <th className=\"bg-dark text-white\">Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {getYears().map((year) =>\r\n                year.months\r\n                  .filter((month) => month.month === selectedMonth)\r\n                  .map((month) =>\r\n                    month.dates\r\n                      .sort((a, b) => a.date - b.date)\r\n                      .map((date) => (\r\n                        <tr\r\n                          className=\"shadow-sm\"\r\n                          key={date.date}\r\n                          id={`attendance-row-${date.date}`} // Assign unique ID to each row\r\n                          onMouseEnter={() => handleMouseEnter(date.date)}\r\n                          onMouseLeave={() => handleMouseLeave()}\r\n                        >\r\n                          <td className=\"text-center\">\r\n                            <span className=\"fw-bold bg-info py-1 px-2  shadow-sm text-white\">\r\n                              {date.date}\r\n                            </span>\r\n                          </td>\r\n                          <td\r\n                            style={{ whiteSpace: \"pre\", textAlign: \"center\" }}\r\n                          >\r\n                            {getAttendanceMark(date)}\r\n                          </td>\r\n                          <td className=\"text-uppercase\">\r\n                            {date.loginTime[0]}\r\n                          </td>\r\n                          <td className=\"text-uppercase\">\r\n                            {date.logoutTime[date.logoutTime.length - 1]}\r\n                          </td>\r\n                          <td className=\"position-relative bg-white\">\r\n                            <div\r\n                              style={{\r\n                                display: \"flex \",\r\n                                justifyContent: \"start\",\r\n                                alignItems: \"center\"\r\n                              }}\r\n                              className=\"fs-6 gap-2 \"\r\n                              onMouseEnter={handleInfoMouseEnter}\r\n                              onMouseLeave={handleInfoMouseLeave}\r\n                            >\r\n                              <span\r\n                                style={{ scale: \"0.7\" }}\r\n                                className=\"bg-warning py-0  text-white  px-2 rounded-5 my-auto\"\r\n                              >\r\n                                {date.breakTime.length}\r\n                              </span>\r\n                              <span className=\"fw-bold text-dark fs-6\">\r\n                                {millisecondsToTime(date.totalBrake)}\r\n                              </span>{\" \"}\r\n                              <FaCircleInfo\r\n                                style={{ fontSize: \".9rem\" }}\r\n                                className=\"text-info \"\r\n                              />\r\n                            </div>\r\n\r\n                            <div\r\n                              style={{ zIndex: \"5\", right: \"0%\" }}\r\n                              className=\"position-absolute\"\r\n                            >\r\n                              {isInfoHovering &&\r\n                                hoveredDate === date.date && ( // Check if info button is hovered and the date is the hovered date\r\n                                  <table className=\"table table-bordered table-striped\">\r\n                                    <thead>\r\n                                      <tr className=\"shadow-sm p-0\">\r\n                                        <th className=\"bg-info  py-0 text-white\">\r\n                                          Break\r\n                                        </th>\r\n                                        <th className=\"bg-info  py-0 text-white\">\r\n                                          Resume\r\n                                        </th>\r\n                                        <th\r\n                                          className=\"text-end  py-0 bg-info text-white\"\r\n                                          style={{ whiteSpace: \"pre\" }}\r\n                                        >\r\n                                          Total Break\r\n                                        </th>\r\n                                      </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                      {date.breakTime.map(\r\n                                        (breakTime, index) => (\r\n                                          <tr className=\"shadow-sm\" key={index}>\r\n                                            <td\r\n                                              className=\"text-uppercase  py-1 text-center\"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {breakTime}\r\n                                            </td>\r\n                                            <td\r\n                                              className=\"text-uppercase  py-1 text-center\"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {date.ResumeTime[index]}\r\n                                            </td>\r\n                                            <td\r\n                                              className=\"text-end py-1 \"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {millisecondsToTime(\r\n                                                date.BreakData[index]\r\n                                              )}\r\n                                            </td>\r\n                                          </tr>\r\n                                        )\r\n                                      )}\r\n                                    </tbody>\r\n                                  </table>\r\n                                )}\r\n                            </div>\r\n                          </td>\r\n                          <td>{millisecondsToTime(date.totalLogAfterBreak)}</td>\r\n                          <td>{date.status}</td>\r\n                        </tr>\r\n                      ))\r\n                  )\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n      {attendanceData === null && (\r\n        <div\r\n          style={{\r\n            height: \"80vh\",\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            wordSpacing: \"5px\",\r\n            flexDirection: \"column\",\r\n            gap: \"1rem\"\r\n          }}\r\n        >\r\n          <div className=\"fs-2 fw-bolder\">\r\n            <TfiReload className=\"spinner-border text-info\" />\r\n          </div>\r\n          <p className=\"text-muted\">\r\n            User not selected. To view data, please select a user.\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AttendanceDetails;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmployeeTaskManagement\\EmployeeCompleteTask.jsx",["995"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst ManagerCompletedTask = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const email = localStorage.getItem(\"Email\");\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:4000/api/tasks\", {\r\n        params: { status: \"Completed\" } // Filter by status \"Completed\"\r\n      });\r\n\r\n      setTasks(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching completed tasks:\", error.message);\r\n      setError(\"Error fetching completed tasks. Please try again later.\");\r\n    } finally {\r\n      setLoading(false);\r\n      // Schedule the next update after 1 minute (adjust as needed)\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\r\n        ✅ Completed Tasks\r\n        {/* ( {tasks.filter((task) => task.status === \"Completed\").length}) */}\r\n      </h1>\r\n      <p className=\"text-muted\">You can view all Completed task here!</p>{\" \"}\r\n      {loading && (\r\n        <div\r\n          style={{ width: \"100%\", height: \"100%\" }}\r\n          className=\"d-flex aline-center gap-2\"\r\n        >\r\n          <div\r\n            className=\"spinner-grow bg-primary\"\r\n            style={{ width: \"1rem\", height: \"1rem\" }}\r\n            role=\"status\"\r\n          ></div>\r\n\r\n          <span className=\"text-primary fw-bold\">Loading...</span>\r\n        </div>\r\n      )}\r\n      <div\r\n        style={{\r\n          overflowY: \"scroll\",\r\n          height: \"80vh\",\r\n          scrollbarWidth: \"thin\",\r\n          scrollbarGutter: \"stable\",\r\n          scrollMargin: \"1rem\"\r\n        }}\r\n        className=\"d-flex flex-column gap-3\"\r\n      >\r\n        {tasks\r\n          .filter(\r\n            (task) =>\r\n              task.status === \"Completed\" &&\r\n              task.employees.some((taskemp) => taskemp.empemail === email)\r\n          )\r\n          .map((task, index) => (\r\n            <details\r\n              style={{\r\n                boxShadow: \"-1px 1px 10px gray\"\r\n              }}\r\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\r\n              key={task.id}\r\n            >\r\n              <summary\r\n                style={{\r\n                  height: \"fit-content\",\r\n                  background:\r\n                    \"linear-gradient(165deg,#11009E, #700B97, 90%, #C84B31)\"\r\n                }}\r\n                className=\"d-flex justify-content-between aline-center form-control text-white\"\r\n              >\r\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\r\n                  # Task {index + 1} : {task.Taskname}\r\n                </div>\r\n                <div\r\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\r\n                  className=\"fw-bold bg-white rounded-5 px-3 text-success fs-6 d-flex justify-content-center aline-center flex-column\"\r\n                >\r\n                  {task.department}\r\n                </div>\r\n                <div className=\"\">\r\n                  <p className=\"btn btn-success m-auto fw-bold\">Completed</p>\r\n                </div>\r\n              </summary>\r\n              <div\r\n                style={{ position: \"relative\" }}\r\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\r\n              >\r\n                <div\r\n                  style={{\r\n                    width: \"99.4%\",\r\n                    height: \"100%\",\r\n                    zIndex: \"5\",\r\n                    backgroundColor: \"rgba(0, 128, 0, 0.384)\",\r\n                    textShadow: \"-5px 5px 5px rgba(128, 128, 128, 0.422)\"\r\n                  }}\r\n                  className=\"watermark form-control   position-absolute d-flex justify-content-center aline-center\"\r\n                >\r\n                  <h1 className=\"text-uppercase text-light fw-bolder\">\r\n                    C O M P L E T E D\r\n                  </h1>\r\n                </div>\r\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\r\n                  <p\r\n                    style={{ height: \"fit-content\" }}\r\n                    className=\"text-start fs-6 form-control\"\r\n                  >\r\n                    <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\r\n                    {task.description}\r\n                  </p>\r\n                  <div\r\n                    style={{ height: \"fit-content\" }}\r\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\r\n                  >\r\n                    <p\r\n                      style={{ fontSize: \"1rem\" }}\r\n                      className=\"col-6 col-sm-6 col-md-2\"\r\n                    >\r\n                      Task Durations <br /> <span>{task.duration} days</span>{\" \"}\r\n                    </p>\r\n                    <p\r\n                      style={{ fontSize: \"1rem\" }}\r\n                      className=\"col-6 col-sm-6 col-md-2\"\r\n                    >\r\n                      Created By <br /> <span> {task.managerEmail}</span>\r\n                    </p>\r\n                    <p\r\n                      style={{ fontSize: \"1rem\" }}\r\n                      className=\"col-6 col-sm-6 col-md-2\"\r\n                    >\r\n                      Start Date <br />{\" \"}\r\n                      <span>\r\n                        {new Date(task.startDate).toLocaleDateString()}\r\n                      </span>\r\n                    </p>\r\n                    <p\r\n                      style={{ fontSize: \"1rem\" }}\r\n                      className=\"col-6 col-sm-6 col-md-2\"\r\n                    >\r\n                      End Date <br />{\" \"}\r\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\r\n                    </p>\r\n                    <p\r\n                      style={{ fontSize: \"1rem\" }}\r\n                      className=\"col-6 col-sm-6 col-md-2\"\r\n                    >\r\n                      <span>\r\n                        Task Status <br /> {task.status}\r\n                      </span>\r\n                    </p>\r\n                  </div>\r\n                  <div\r\n                    style={{ height: \"fit-content\" }}\r\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\r\n                  >\r\n                    <p>\r\n                      <span className=\"fw-bold\">Remarks : </span> {task.comment}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </details>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManagerCompletedTask;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmployeeTaskManagement\\EmployeeRejectTask.jsx",["996"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst EmployeeRejectTask = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const email = localStorage.getItem(\"Email\");\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:4000/api/tasks\", {\r\n        params: { status: \"Completed\" } // Filter by status \"Completed\"\r\n      });\r\n\r\n      setTasks(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching completed tasks:\", error.message);\r\n      setError(\"Error fetching completed tasks. Please try again later.\");\r\n    } finally {\r\n      setLoading(false);\r\n      // Schedule the next update after 1 minute (adjust as needed\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\r\n        🔴 Rejected Tasks\r\n      </h1>\r\n      <p className=\"text-muted\">You can view all rejected task here!</p>{\" \"}\r\n      {loading && (\r\n        <div\r\n          style={{ width: \"100%\", height: \"100%\" }}\r\n          className=\"d-flex aline-center gap-2\"\r\n        >\r\n          <div\r\n            className=\"spinner-grow bg-primary\"\r\n            style={{ width: \"1rem\", height: \"1rem\" }}\r\n            role=\"status\"\r\n          ></div>\r\n\r\n          <span className=\"text-primary fw-bold\">Loading...</span>\r\n        </div>\r\n      )}\r\n      <div\r\n        style={{\r\n          overflowY: \"scroll\",\r\n          height: \"80vh\",\r\n          scrollbarWidth: \"thin\",\r\n          scrollbarGutter: \"stable\",\r\n          scrollMargin: \"1rem\"\r\n        }}\r\n        className=\"d-flex flex-column gap-3\"\r\n      >\r\n        {tasks\r\n          .filter(\r\n            (task) =>\r\n              task.status === \"Rejected\" &&\r\n              task.employees.some((taskemp) => taskemp.empemail === email)\r\n          )\r\n          .map((task, index) => (\r\n            <details\r\n              style={{\r\n                boxShadow: \"-1px 1px 10px gray\"\r\n              }}\r\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\r\n              key={task.id}\r\n            >\r\n              <summary\r\n                style={{ height: \"fit-content\" }}\r\n                className=\"d-flex justify-content-between aline-center form-control bg-black text-white\"\r\n              >\r\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\r\n                  # Task {index + 1} : {task.Taskname}\r\n                </div>\r\n                <div\r\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\r\n                  className=\"fw-bold bg-white rounded-5 px-3 text-success fs-6 d-flex justify-content-center aline-center flex-column\"\r\n                >\r\n                  {task.department}\r\n                </div>\r\n                <div>\r\n                  <p className=\"btn btn-light m-auto py-1 px-3 fw-bold\">\r\n                    Rejected\r\n                  </p>\r\n                </div>\r\n              </summary>\r\n              <div\r\n                style={{ position: \"relative\" }}\r\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\r\n              >\r\n                <div\r\n                  style={{\r\n                    width: \"99.4%\",\r\n                    height: \"100%\",\r\n                    zIndex: \"5\",\r\n                    backgroundColor: \"rgba(5, 128, 8, 0.384)\",\r\n                    textShadow: \"-5px 5px 5px rgba(128, 128, 128, 0.422)\"\r\n                  }}\r\n                  className=\"watermark form-control   position-absolute d-flex justify-content-center aline-center\"\r\n                >\r\n                  <h1 className=\"text-uppercase text-light fw-bolder\">\r\n                    R E J E C T E D\r\n                  </h1>\r\n                </div>\r\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\r\n                  <p\r\n                    style={{ height: \"fit-content\" }}\r\n                    className=\"text-start fs-6 form-control\"\r\n                  >\r\n                    <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\r\n                    {task.description}\r\n                  </p>\r\n                  <div className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\">\r\n                    <p\r\n                      style={{ fontSize: \"1rem\" }}\r\n                      className=\"col-6 col-sm-6 col-md-2\"\r\n                    >\r\n                      Task Durations <br /> <span>{task.duration} days</span>{\" \"}\r\n                    </p>\r\n                    <p\r\n                      style={{ fontSize: \"1rem\" }}\r\n                      className=\"col-6 col-sm-6 col-md-2\"\r\n                    >\r\n                      Created By <br /> <span> {task.managerEmail}</span>\r\n                    </p>\r\n                    <p\r\n                      style={{ fontSize: \"1rem\" }}\r\n                      className=\"col-6 col-sm-6 col-md-2\"\r\n                    >\r\n                      Start Date <br />{\" \"}\r\n                      <span>\r\n                        {new Date(task.startDate).toLocaleDateString()}\r\n                      </span>\r\n                    </p>\r\n                    <p\r\n                      style={{ fontSize: \"1rem\" }}\r\n                      className=\"col-6 col-sm-6 col-md-2\"\r\n                    >\r\n                      End Date <br />{\" \"}\r\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\r\n                    </p>\r\n                    <p\r\n                      style={{ fontSize: \"1rem\" }}\r\n                      className=\"col-6 col-sm-6 col-md-2\"\r\n                    >\r\n                      <span>\r\n                        Task Status <br /> {task.status}\r\n                      </span>\r\n                    </p>\r\n                  </div>\r\n                  <div\r\n                    style={{ height: \"fit-content\" }}\r\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\r\n                  >\r\n                    <p>\r\n                      <span className=\"fw-bold\">Remarks : </span> {task.comment}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </details>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeRejectTask;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmployeeTaskManagement\\EmployeeActiveTask.jsx",["997","998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PiInfoFill } from \"react-icons/pi\";\nimport { FaCheck } from \"react-icons/fa6\";\nimport { IoCheckmarkDoneSharp } from \"react-icons/io5\";\nimport { toast } from \"react-hot-toast\";\nimport Table from \"react-bootstrap/Table\";\nimport { MdCancel } from \"react-icons/md\";\nimport { BsFiletypeDoc } from \"react-icons/bs\";\n\nconst EmployeeActiveTask = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isCanceling, setIsCanceling] = useState(false);\n  const [isCompleting, setIsCompleting] = useState(false);\n  const [isAccepted, setIsAccepted] = useState(false);\n  const [isRejected, setIsRejected] = useState(false);\n\n  const calculateRemainingTime = (endDate) => {\n    const now = new Date();\n    const endDateTime = new Date(endDate);\n    let remainingTime = endDateTime - now;\n\n    if (remainingTime < 0) {\n      // If remaining time is negative, consider it as delay\n      remainingTime = Math.abs(remainingTime);\n      return { delay: true, days: 0, hours: 0, minutes: 0 };\n    } else {\n      // Calculate remaining days, hours, minutes, and seconds\n      const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(\n        (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const minutes = Math.floor(\n        (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\n      );\n      return { delay: false, days, hours, minutes };\n    }\n  };\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\");\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error.message);\n      setError(\"Error fetching tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n      setTimeout(fetchData, 60000);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n\n    return () => clearTimeout();\n  }, []);\n\n  const askStatus = async (taskId) => {\n    // Implement the logic to ask for task status (e.g., open a modal or show a notification)\n  };\n  const AcceptTask = async (taskId) => {\n    try {\n      setIsAccepted(true);\n\n      // Prompt the user for cancellation remarks\n      const cancellationRemarks = prompt(\"Enter remarks for Accept Task:\");\n\n      if (cancellationRemarks === null) {\n        // If the user clicks Cancel in the prompt, do nothing\n        setIsAccepted(false);\n        return;\n      }\n\n      // Update the task status to \"Cancelled\" in the database\n      await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n        status: \"Pending\",\n        comment: cancellationRemarks\n      });\n\n      // Display success notification\n      toast.success(\"Task canceled successfully!\");\n\n      // Update the UI by fetching the latest tasks\n      fetchData();\n    } catch (error) {\n      console.error(\"Error canceling task:\", error.message);\n      toast.error(\"Failed to cancel task. Please try again.\");\n    } finally {\n      setIsAccepted(false);\n    }\n  };\n  const RejectTask = async (taskId) => {\n    try {\n      setIsRejected(true);\n      const RejectRemarks = prompt(\"Enter remarks for Reject Task:\");\n\n      if (RejectRemarks === null) {\n        setIsRejected(false);\n        return;\n      }\n\n      await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n        status: \"Rejected\",\n        comment: RejectRemarks\n      });\n\n      toast.success(\"Task Rejected\");\n\n      fetchData();\n    } catch (error) {\n      console.error(\"Error Rejecting task:\", error.message);\n      toast.error(\"Failed to Reject task. Please try again.\");\n    } finally {\n      setIsRejected(false);\n    }\n  };\n  const completeTask = async (taskId) => {\n    try {\n      setIsCompleting(true);\n\n      // Prompt the user for cancellation remarks\n      const CompleteRemarks = prompt(\"Enter remarks to Complete Task:\");\n\n      if (CompleteRemarks === null) {\n        // If the user clicks Cancel in the prompt, do nothing\n        setIsCompleting(false);\n        return;\n      }\n\n      // Update the task status to \"Cancelled\" in the database\n      await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n        status: \"Completed\",\n        comment: CompleteRemarks\n      });\n\n      // Display success notification\n      toast.success(\"Task canceled successfully!\");\n\n      // Update the UI by fetching the latest tasks\n      fetchData();\n    } catch (error) {\n      console.error(\"Error canceling task:\", error.message);\n      toast.error(\"Failed to cancel task. Please try again.\");\n    } finally {\n      setIsCanceling(false);\n    }\n  };\n\n  return (\n    <div className=\"py-2\">\n      <h1 className=\"fs-3 fw-bolder text-uppercase \">🌟 Active Task</h1>\n\n      {loading && (\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          className=\"d-flex aline-center gap-2\"\n        >\n          <div\n            className=\"spinner-grow bg-primary\"\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            role=\"status\"\n          ></div>\n\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n      >\n        {tasks\n          .filter((task) => task.status === \"Pending\")\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{ height: \"fit-content\" }}\n                className=\"d-flex justify-content-between aline-center form-control bg-danger \"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-primary fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div className=\"d-flex gap-2 RemainingTimeHandel justify-content-between \">\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div>\n                      <div className=\"text-center d-none\">\n                        <div className=\"form-control  fw-bold p-0\">\n                          {calculateRemainingTime(task.endDate).days}{\" \"}\n                        </div>{\" \"}\n                        <div>Day</div>\n                      </div>\n                      <h5 className=\"btn btn-danger p-1 px-3 fw-bold\">Late</h5>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).days}{\" \"}\n                      </div>{\" \"}\n                      <div>Day</div>\n                    </div>\n                  )}\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div className=\"text-center d-none\">\n                      <div className=\"form-control  fw-bold p-0\">\n                        {calculateRemainingTime(task.endDate).hours}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).hours}{\" \"}\n                      </div>{\" \"}\n                      <div>Hrs</div>\n                    </div>\n                  )}\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div className=\"text-center d-none\">\n                      <div className=\"form-control fw-bold p-0\">\n                        {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  )}\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <p\n                    style={{ height: \"fit-content\" }}\n                    className=\"text-start fs-6 form-control\"\n                  >\n                    <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                    {task.description}\n                  </p>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <b>Task Durations</b> <br />{\" \"}\n                      <span>{task.duration} days</span>{\" \"}\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <b> Manager</b> <br /> <span> {task.managerEmail}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <b>Start Date</b> <br />{\" \"}\n                      <span>\n                        {new Date(task.startDate).toLocaleDateString()}\n                      </span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <b>End Date</b> <br />{\" \"}\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <span>\n                        <b>Task Status</b> <br /> {task.status}\n                      </span>\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex my-1 pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <h6 className=\"fw-bold\">Project Members</h6>\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>S. No</th>\n                          <th>Name</th>\n                          <th>Email</th>\n                          <th>Designation</th>\n                          <th>Task Status</th>\n                          <th>Remarks</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {task.employees\n                          .filter(\n                            (taskemp) =>\n                              taskemp.emptaskStatus === \"Accepted\" ||\n                              taskemp.emptaskStatus === \"Completed\"\n                          )\n                          .map((taskemp, i) => (\n                            <tr key={i}>\n                              <td\n                                style={{\n                                  backgroundColor:\n                                    taskemp.emptaskStatus === \"Completed\"\n                                      ? \"rgba(25, 201, 84, 0.436)\"\n                                      : \"inherit\"\n                                }}\n                              >\n                                {i + 1}\n                              </td>\n                              <td\n                                style={{\n                                  backgroundColor:\n                                    taskemp.emptaskStatus === \"Completed\"\n                                      ? \"rgba(25, 201, 84, 0.436)\"\n                                      : \"inherit\"\n                                }}\n                              >\n                                {taskemp.empname}\n                              </td>\n                              <td\n                                style={{\n                                  backgroundColor:\n                                    taskemp.emptaskStatus === \"Completed\"\n                                      ? \"rgba(25, 201, 84, 0.436)\"\n                                      : \"inherit\"\n                                }}\n                              >\n                                {taskemp.empemail}\n                              </td>\n                              <td\n                                style={{\n                                  backgroundColor:\n                                    taskemp.emptaskStatus === \"Completed\"\n                                      ? \"rgba(25, 201, 84, 0.436)\"\n                                      : \"inherit\"\n                                }}\n                              >\n                                {taskemp.empdesignation}\n                              </td>\n                              <td\n                                style={{\n                                  backgroundColor:\n                                    taskemp.emptaskStatus === \"Completed\"\n                                      ? \"rgba(25, 201, 84, 0.436)\"\n                                      : \"inherit\"\n                                }}\n                              >\n                                {taskemp.emptaskStatus}\n                              </td>\n                              <td\n                                style={{\n                                  backgroundColor:\n                                    taskemp.emptaskStatus === \"Completed\"\n                                      ? \"rgba(25, 201, 84, 0.436)\"\n                                      : \"inherit\"\n                                }}\n                              >\n                                {taskemp.empTaskComment}\n                              </td>\n                            </tr>\n                          ))}\n                      </tbody>\n                    </Table>\n                    {/* <div\n                      style={{ height: \"fit-content\" }}\n                      className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                    >\n                      <p>\n                        <span className=\"fw-bold\">Remarks : </span>{\" \"}\n                        {task.comment}\n                      </p>\n                    </div>\n\n                    <div\n                      style={{ height: \"fit-content\" }}\n                      className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                    >\n                      <button\n                        className=\"btn btn-info col-2 d-flex justify-center aline-center gap-2\"\n                        onClick={() => AcceptTask(task._id)}\n                      >\n                        <IoCheckmarkDoneSharp />\n                        Accept\n                      </button>\n                      <button\n                        className=\"btn btn-info col-2 d-flex justify-center aline-center gap-2\"\n                        onClick={() => AcceptTask(task._id)}\n                      >\n                        <BsFiletypeDoc />\n                        View Docs\n                      </button>\n                      <button\n                        className=\"btn btn-primary col-2 d-flex justify-center aline-center gap-2\"\n                        onClick={() => RejectTask(task._id)}\n                      >\n                        <MdCancel />\n                        Reject\n                      </button>\n                      <button\n                        className=\"btn btn-warning col-2 d-flex justify-center aline-center gap-2\"\n                        onClick={() => completeTask(task._id)}\n                      >\n                        <PiInfoFill />\n                        Report\n                      </button>\n                      <button\n                        className=\"btn btn-success col-2 d-flex justify-center aline-center gap-2\"\n                        onClick={() => completeTask(task._id)}\n                      >\n                        <FaCheck />\n                        Complete Task\n                      </button>\n                    </div> */}\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeActiveTask;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { PiInfoFill } from \"react-icons/pi\";\n// import { FaCheck } from \"react-icons/fa6\";\n// import { IoCheckmarkDoneSharp } from \"react-icons/io5\";\n// import { toast } from \"react-hot-toast\";\n// import Table from \"react-bootstrap/Table\";\n// import { MdCancel } from \"react-icons/md\";\n// import { BsFiletypeDoc } from \"react-icons/bs\";\n// import InnerDashContainer from \"../../InnerDashContainer\";\n\n// const EmployeeActiveTask = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [isCanceling, setIsCanceling] = useState(false);\n//   const [isCompleting, setIsCompleting] = useState(false);\n//   const [isAccepted, setIsAccepted] = useState(false);\n//   const [isRejected, setIsRejected] = useState(false);\n\n//   const calculateRemainingTime = (endDate) => {\n//     const now = new Date();\n//     const endDateTime = new Date(endDate);\n//     let remainingTime = endDateTime - now;\n\n//     if (remainingTime < 0) {\n//       // If remaining time is negative, consider it as delay\n//       remainingTime = Math.abs(remainingTime);\n//       return { delay: true, days: 0, hours: 0, minutes: 0 };\n//     } else {\n//       // Calculate remaining days, hours, minutes, and seconds\n//       const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\n//       const hours = Math.floor(\n//         (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n//       );\n//       const minutes = Math.floor(\n//         (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\n//       );\n//       return { delay: false, days, hours, minutes };\n//     }\n//   };\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:4000/api/tasks\");\n//       setTasks(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching tasks:\", error.message);\n//       setError(\"Error fetching tasks. Please try again later.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchData();\n\n//     return () => clearTimeout();\n//   }, []);\n\n//   const askStatus = async (taskId) => {\n//     // Implement the logic to ask for task status (e.g., open a modal or show a notification)\n//   };\n//   const AcceptTask = async (taskId) => {\n//     try {\n//       setIsAccepted(true);\n\n//       // Prompt the user for cancellation remarks\n//       const cancellationRemarks = prompt(\"Enter remarks for Accept Task:\");\n\n//       if (cancellationRemarks === null) {\n//         // If the user clicks Cancel in the prompt, do nothing\n//         setIsAccepted(false);\n//         return;\n//       }\n\n//       // Update the task status to \"Cancelled\" in the database\n//       await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n//         status: \"Pending\",\n//         comment: cancellationRemarks\n//       });\n\n//       // Display success notification\n//       toast.success(\"Task canceled successfully!\");\n\n//       // Update the UI by fetching the latest tasks\n//       fetchData();\n//     } catch (error) {\n//       console.error(\"Error canceling task:\", error.message);\n//       toast.error(\"Failed to cancel task. Please try again.\");\n//     } finally {\n//       setIsAccepted(false);\n//     }\n//   };\n//   const RejectTask = async (taskId) => {\n//     try {\n//       setIsRejected(true);\n//       const RejectRemarks = prompt(\"Enter remarks for Reject Task:\");\n\n//       if (RejectRemarks === null) {\n//         setIsRejected(false);\n//         return;\n//       }\n\n//       await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n//         status: \"Rejected\",\n//         comment: RejectRemarks\n//       });\n\n//       toast.success(\"Task Rejected\");\n\n//       fetchData();\n//     } catch (error) {\n//       console.error(\"Error Rejecting task:\", error.message);\n//       toast.error(\"Failed to Reject task. Please try again.\");\n//     } finally {\n//       setIsRejected(false);\n//     }\n//   };\n//   const completeTask = async (taskId) => {\n//     try {\n//       setIsCompleting(true);\n\n//       // Prompt the user for cancellation remarks\n//       const CompleteRemarks = prompt(\"Enter remarks to Complete Task:\");\n\n//       if (CompleteRemarks === null) {\n//         // If the user clicks Cancel in the prompt, do nothing\n//         setIsCompleting(false);\n//         return;\n//       }\n\n//       // Update the task status to \"Cancelled\" in the database\n//       await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n//         status: \"Completed\",\n//         comment: CompleteRemarks\n//       });\n\n//       // Display success notification\n//       toast.success(\"Task canceled successfully!\");\n\n//       // Update the UI by fetching the latest tasks\n//       fetchData();\n//     } catch (error) {\n//       console.error(\"Error canceling task:\", error.message);\n//       toast.error(\"Failed to cancel task. Please try again.\");\n//     } finally {\n//       setIsCanceling(false);\n//     }\n//   };\n//   const totalActiveTasks = tasks.filter(\n//     (task) => task.status === \"Pending\"\n//   ).length;\n\n//   const totalAcceptedTasks = tasks.filter(\n//     (task) =>\n//       task.status === \"Pending\" &&\n//       task.employees.some((emp) => emp.emptaskStatus === \"Accepted\")\n//   ).length;\n\n//   const countAcceptedTasks = tasks.filter(\n//     (task) =>\n//       task.status === \"Pending\" &&\n//       task.employees.some(\n//         (emp) =>\n//           emp.emptaskStatus === \"Accepted\" || emp.emptaskStatus === \"Completed\"\n//       ) &&\n//       task.employees.some((emp) => !emp.emptaskStatus)\n//   ).length;\n\n//   return (\n//     <InnerDashContainer>\n//       <h1 className=\"fs-3 fw-bolder text-uppercase \">\n//         🌟 Active Task ({totalActiveTasks}) accept ({totalAcceptedTasks})\n//       </h1>\n\n//       {loading && (\n//         <div\n//           style={{ width: \"100%\", height: \"100%\" }}\n//           className=\"d-flex aline-center gap-2\"\n//         >\n//           <div\n//             className=\"spinner-grow bg-primary\"\n//             style={{ width: \"1rem\", height: \"1rem\" }}\n//             role=\"status\"\n//           ></div>\n\n//           <span className=\"text-primary fw-bold\">Loading...</span>\n//         </div>\n//       )}\n//       <div\n//         style={{\n//           overflowY: \"scroll\",\n//           height: \"80vh\",\n//           scrollbarWidth: \"thin\",\n//           scrollbarGutter: \"stable\",\n//           scrollMargin: \"1rem\"\n//         }}\n//       >\n//         {tasks\n//           .filter((task) => task.status === \"Pending\")\n//           .map((task, index) => (\n//             <details\n//               style={{\n//                 boxShadow: \"-1px 1px 10px gray\"\n//               }}\n//               className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n//               key={task.id}\n//             >\n//               <summary\n//                 style={{ height: \"fit-content\" }}\n//                 className=\"d-flex justify-content-between aline-center form-control bg-danger \"\n//               >\n//                 <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n//                   # Task {index + 1} : {task.Taskname}\n//                 </div>\n//                 <div\n//                   style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n//                   className=\"fw-bold bg-white rounded-5 px-3 text-primary fs-6 d-flex justify-content-center aline-center flex-column\"\n//                 >\n//                   {task.department}\n//                 </div>\n//                 <div className=\"d-flex gap-2 RemainingTimeHandel justify-content-between \">\n//                   {calculateRemainingTime(task.endDate).delay ? (\n//                     <div>\n//                       <div className=\"text-center d-none\">\n//                         <div className=\"form-control  fw-bold p-0\">\n//                           {calculateRemainingTime(task.endDate).days}{\" \"}\n//                         </div>{\" \"}\n//                         <div>Day</div>\n//                       </div>\n//                       <h5 className=\"btn btn-danger p-1 px-3 fw-bold\">Late</h5>\n//                     </div>\n//                   ) : (\n//                     <div className=\"text-center\">\n//                       <div\n//                         style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                         className=\"form-control fw-bold px-1 py-0\"\n//                       >\n//                         {calculateRemainingTime(task.endDate).days}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Day</div>\n//                     </div>\n//                   )}\n//                   {calculateRemainingTime(task.endDate).delay ? (\n//                     <div className=\"text-center d-none\">\n//                       <div className=\"form-control  fw-bold p-0\">\n//                         {calculateRemainingTime(task.endDate).hours}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Min</div>\n//                     </div>\n//                   ) : (\n//                     <div className=\"text-center\">\n//                       <div\n//                         style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                         className=\"form-control fw-bold px-1 py-0\"\n//                       >\n//                         {calculateRemainingTime(task.endDate).hours}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Hrs</div>\n//                     </div>\n//                   )}\n//                   {calculateRemainingTime(task.endDate).delay ? (\n//                     <div className=\"text-center d-none\">\n//                       <div className=\"form-control fw-bold p-0\">\n//                         {calculateRemainingTime(task.endDate).minutes}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Min</div>\n//                     </div>\n//                   ) : (\n//                     <div className=\"text-center\">\n//                       <div\n//                         style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                         className=\"form-control fw-bold px-1 py-0\"\n//                       >\n//                         {calculateRemainingTime(task.endDate).minutes}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Min</div>\n//                     </div>\n//                   )}\n//                 </div>\n//               </summary>\n//               <div\n//                 style={{ position: \"relative\" }}\n//                 className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n//               >\n//                 <div style={{ height: \"fit-content\" }} className=\"form-control\">\n//                   <p\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"text-start fs-6 form-control\"\n//                   >\n//                     <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n//                     {task.description}\n//                   </p>\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                   >\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       <b>Task Durations</b> <br />{\" \"}\n//                       <span>{task.duration} days</span>{\" \"}\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       <b> Manager</b> <br /> <span> {task.managerEmail}</span>\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       <b>Start Date</b> <br />{\" \"}\n//                       <span>\n//                         {new Date(task.startDate).toLocaleDateString()}\n//                       </span>\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       <b>End Date</b> <br />{\" \"}\n//                       <span>{new Date(task.endDate).toLocaleDateString()}</span>\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       <span>\n//                         <b>Task Status</b> <br /> {task.status}\n//                       </span>\n//                     </p>\n//                   </div>\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"row form-control d-flex my-1 pt-3 rounded mx-1 justify-content-between\"\n//                   >\n//                     <h6 className=\"fw-bold\">Project Members</h6>\n//                     <Table striped bordered hover>\n//                       <thead>\n//                         <tr>\n//                           <th>S. No</th>\n//                           <th>Name</th>\n//                           <th>Email</th>\n//                           <th>Designation</th>\n//                           <th>Task Status</th>\n//                           <th>Remarks</th>\n//                         </tr>\n//                       </thead>\n//                       <tbody>\n//                         {task.employees\n//                           .filter(\n//                             (taskemp) =>\n//                               taskemp.emptaskStatus === \"Accepted\" ||\n//                               taskemp.emptaskStatus === \"Completed\"\n//                           )\n//                           .map((taskemp, i) => (\n//                             <tr key={i}>\n//                               <td\n//                                 style={{\n//                                   backgroundColor:\n//                                     taskemp.emptaskStatus === \"Completed\"\n//                                       ? \"rgba(25, 201, 84, 0.436)\"\n//                                       : \"inherit\"\n//                                 }}\n//                               >\n//                                 {i + 1}\n//                               </td>\n//                               <td\n//                                 style={{\n//                                   backgroundColor:\n//                                     taskemp.emptaskStatus === \"Completed\"\n//                                       ? \"rgba(25, 201, 84, 0.436)\"\n//                                       : \"inherit\"\n//                                 }}\n//                               >\n//                                 {taskemp.empname}\n//                               </td>\n//                               <td\n//                                 style={{\n//                                   backgroundColor:\n//                                     taskemp.emptaskStatus === \"Completed\"\n//                                       ? \"rgba(25, 201, 84, 0.436)\"\n//                                       : \"inherit\"\n//                                 }}\n//                               >\n//                                 {taskemp.empemail}\n//                               </td>\n//                               <td\n//                                 style={{\n//                                   backgroundColor:\n//                                     taskemp.emptaskStatus === \"Completed\"\n//                                       ? \"rgba(25, 201, 84, 0.436)\"\n//                                       : \"inherit\"\n//                                 }}\n//                               >\n//                                 {taskemp.empdesignation}\n//                               </td>\n//                               <td\n//                                 style={{\n//                                   backgroundColor:\n//                                     taskemp.emptaskStatus === \"Completed\"\n//                                       ? \"rgba(25, 201, 84, 0.436)\"\n//                                       : \"inherit\"\n//                                 }}\n//                               >\n//                                 {taskemp.emptaskStatus}\n//                               </td>\n//                               <td\n//                                 style={{\n//                                   backgroundColor:\n//                                     taskemp.emptaskStatus === \"Completed\"\n//                                       ? \"rgba(25, 201, 84, 0.436)\"\n//                                       : \"inherit\"\n//                                 }}\n//                               >\n//                                 {taskemp.empTaskComment}\n//                               </td>\n//                             </tr>\n//                           ))}\n//                       </tbody>\n//                     </Table>\n//                     <div\n//                       style={{ height: \"fit-content\" }}\n//                       className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                     >\n//                       <p>\n//                         <span className=\"fw-bold\">Remarks : </span>{\" \"}\n//                         {task.comment}\n//                       </p>\n//                     </div>\n\n//                     <div\n//                       style={{ height: \"fit-content\" }}\n//                       className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                     >\n//                       <button\n//                         className=\"btn btn-info col-2 d-flex justify-center aline-center gap-2\"\n//                         onClick={() => AcceptTask(task._id)}\n//                       >\n//                         <IoCheckmarkDoneSharp />\n//                         Accept\n//                       </button>\n//                       <button\n//                         className=\"btn btn-info col-2 d-flex justify-center aline-center gap-2\"\n//                         onClick={() => AcceptTask(task._id)}\n//                       >\n//                         <BsFiletypeDoc />\n//                         View Docs\n//                       </button>\n//                       <button\n//                         className=\"btn btn-primary col-2 d-flex justify-center aline-center gap-2\"\n//                         onClick={() => RejectTask(task._id)}\n//                       >\n//                         <MdCancel />\n//                         Reject\n//                       </button>\n//                       <button\n//                         className=\"btn btn-warning col-2 d-flex justify-center aline-center gap-2\"\n//                         onClick={() => completeTask(task._id)}\n//                       >\n//                         <PiInfoFill />\n//                         Report\n//                       </button>\n//                       <button\n//                         className=\"btn btn-success col-2 d-flex justify-center aline-center gap-2\"\n//                         onClick={() => completeTask(task._id)}\n//                       >\n//                         <FaCheck />\n//                         Complete Task\n//                       </button>\n//                     </div>\n//                   </div>\n//                 </div>\n//               </div>\n//             </details>\n//           ))}\n//       </div>\n//     </InnerDashContainer>\n//   );\n// };\n\n// export default EmployeeActiveTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmployeeTaskManagement\\EmployeeNewTask.jsx",["1012","1013","1014","1015","1016","1017","1018","1019"],"import React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { toast } from \"react-hot-toast\";\nimport { MdMarkChatRead } from \"react-icons/md\";\nimport Table from \"react-bootstrap/Table\";\nimport { BsFiletypeDoc } from \"react-icons/bs\";\nimport { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\nimport {v4 as uuid} from \"uuid\";\nconst EmployeeNewTask = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isHovered, setIsHovered] = useState(false);\n  const [email, setEmail] = useState(null);\n  const empMail = localStorage.getItem(\"Email\");\n  const taskId =uuid();\n  const {socket} = useContext(AttendanceContext);\n\n  const id = localStorage.getItem(\"_id\");\n  // console.log(id)\n  useEffect(() => {\n    const loadPersonalInfoData = async () => {\n      try {\n        const response = await axios.get(\n          \"http://localhost:4000/api/personal-info/\" + id,\n          {\n            headers: {\n              authorization: localStorage.getItem(\"token\") || \"\"\n            }\n          }\n        );\n        setEmail(response.data.Email);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n\n    loadPersonalInfoData();\n  }, []);\n\n  const calculateRemainingTime = (endDate) => {\n    const now = new Date();\n    const endDateTime = new Date(endDate);\n    let remainingTime = endDateTime - now;\n\n    if (remainingTime < 0) {\n      // If remaining time is negative, consider it as delay\n      remainingTime = Math.abs(remainingTime);\n      return { delay: true, days: 0, hours: 0, minutes: 0 };\n    } else {\n      // Calculate remaining days, hours, minutes, and seconds\n      const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(\n        (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const minutes = Math.floor(\n        (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\n      );\n      return { delay: false, days, hours, minutes };\n    }\n  };\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\");\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error.message);\n      setError(\"Error fetching tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n      setTimeout(fetchData, 60000);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n\n    return () => clearTimeout();\n  }, []);\n\n  const acceptTask = async (taskId, empEmail,task) => {\n    try {\n      const empRemarks = prompt(\"Enter remarks for accepting the task:\");\n\n      if (empRemarks === null) {\n        return; // If the user clicks Cancel in the prompt, do nothing\n      }\n\n      await axios.put(\n        `http://localhost:4000/api/tasks/${taskId}/employees/${empEmail}`,\n        {\n          emptaskStatus: \"Accepted\",\n          empTaskComment: empRemarks\n        }\n      );\n\n      toast.success(\"Task accepted successfully!\");\n      const employeeNotificationArr = task.employees.map((val)=>{\n        if(val.emptaskStatus!==\"Rejected\" && val.empemail!==email){\n          return val.empemail\n        }\n      })\n            const employeeTaskNotification = {\n              senderMail: empMail,\n              employeesEmail: [...employeeNotificationArr,task.managerEmail],\n              taskId,\n              status: \"unseen\",\n              taskName:task.Taskname,\n              message: `${task.Taskname} is Accepted by ${empMail}`,\n              taskStatus: \"Accepted\",\n              Account: 3,\n              path:\"activeTask\" \n            }\n\n            socket.emit(\"employeeTaskUpdateNotification\", employeeTaskNotification);\n      // Update the UI by fetching the latest tasks\n      fetchData();\n    } catch (error) {\n      console.error(\"Error accepting task:\", error.message);\n      toast.error(\"Failed to accept task. Please try again.\");\n    }\n  };\n\n  const rejectTask = async (taskId, empEmail, task) => {\n    try {\n      const empRemarks = prompt(\"Enter remarks for rejecting the task:\");\n\n      if (empRemarks === null) {\n        return; // If the user clicks Cancel in the prompt, do nothing\n      }\n\n      await axios.put(\n        `http://localhost:4000/api/tasks/${taskId}/employees/${empEmail}`,\n        {\n          emptaskStatus: \"Rejected\",\n          empTaskComment: empRemarks\n        }\n      );\n\n      toast.success(\"Task rejected successfully!\");\n      const employeeTaskNotification = {\n        senderMail: empMail,\n        employeesEmail: [task.managerEmail],\n        taskId,\n        status: \"unseen\",\n        taskName:task.Taskname,\n        message: `${task.Taskname} is Rejected by ${empMail}`,\n        taskStatus: \"Rejected\",\n        Account: 3,\n        path:\"activeTask\" \n      }\nconsole.log(employeeTaskNotification)\n      socket.emit(\"employeeTaskUpdateNotification\", employeeTaskNotification);\n      // Update the UI by fetching the latest tasks\n      fetchData();\n    } catch (error) {\n      console.error(\"Error rejecting task:\", error.message);\n      toast.error(\"Failed to reject task. Please try again.\");\n    }\n  };\n\n  const completeTask = async (taskId, empEmail,task) => {\n    try {\n      const empRemarks = prompt(\"Enter remarks for complete the task:\");\n\n      if (empRemarks === null) {\n        return; // If the user clicks Cancel in the prompt, do nothing\n      }\n\n      await axios.put(\n        `http://localhost:4000/api/tasks/${taskId}/employees/${empEmail}`,\n        {\n          emptaskStatus: \"Completed\",\n          empTaskComment: empRemarks\n        }\n      );\n\n      toast.success(\"Task Completed successfully!\");\n      const employeeNotificationArr = task.employees.map((val)=>{\n        if(val.emptaskStatus!==\"Rejected\" && val.empemail!==email){\n          return val.empemail\n        }\n      })\n            const employeeTaskNotification = {\n              senderMail: empMail,\n              employeesEmail: [...employeeNotificationArr,task.managerEmail],\n              taskId,\n              status: \"unseen\",\n              taskName:task.Taskname,\n              taskStatus: \"Completed\",\n              message: `${task.Taskname} is Completed by ${empMail}`,\n              Account: 3,\n              path:\"activeTask\" \n            }\n      console.log(employeeTaskNotification)\n            socket.emit(\"employeeTaskUpdateNotification\", employeeTaskNotification);\n      // Update the UI by fetching the latest tasks\n      fetchData();\n    } catch (error) {\n      console.error(\"Error Completing task:\", error.message);\n      toast.error(\"Failed to Complete task. Please try again.\");\n    }\n  };\n\n  const totalTaskAssigned = tasks.filter((task) =>\n    task.employees.some((taskemp) => taskemp.emptaskStatus === \"Task Assigned\")\n  ).length;\n\n  console.log(\"Total Task Assigned: \", totalTaskAssigned);\n\n  return (\n    <div>\n      <h1 className=\"fs-3 fw-bolder text-uppercase \">🌟New Task ({}) </h1>\n\n      {loading && (\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          className=\"d-flex aline-center gap-2\"\n        >\n          <div\n            className=\"spinner-grow bg-primary\"\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            role=\"status\"\n          ></div>\n\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n      {error && <p className=\"text-danger\">{error}</p>}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n      >\n        {email &&\n          tasks\n            .filter(\n              (task) =>\n                task.status === \"Pending\" &&\n                task.employees.some((taskemp) => taskemp.empemail === email)\n            ).reverse()\n            .map((task, index) => (\n              <details\n                style={{\n                  boxShadow: \"-1px 1px 10px gray\"\n                }}\n                className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n                key={task.id}\n              >\n                <summary\n                  style={{ height: \"fit-content\" }}\n                  className=\"d-flex justify-content-between aline-center form-control bg-danger \"\n                >\n                  <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                    # Task {index + 1} : {task.Taskname}\n                  </div>\n                  <div\n                    style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                    className=\"fw-bold bg-white rounded-5 px-3 text-primary fs-6 d-flex justify-content-center aline-center flex-column\"\n                  >\n                    {task.department}\n                  </div>\n                  <div className=\"d-flex gap-2 RemainingTimeHandel justify-content-between \">\n                    {calculateRemainingTime(task.endDate).delay ? (\n                      <div>\n                        <div className=\"text-center d-none\">\n                          <div className=\"form-control  fw-bold p-0\">\n                            {calculateRemainingTime(task.endDate).days}{\" \"}\n                          </div>{\" \"}\n                          <div>Day</div>\n                        </div>\n                        <h5 className=\"btn btn-danger p-1 px-3 fw-bold\">\n                          Late\n                        </h5>\n                      </div>\n                    ) : (\n                      <div className=\"text-center\">\n                        <div\n                          style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                          className=\"form-control fw-bold px-1 py-0\"\n                        >\n                          {calculateRemainingTime(task.endDate).days}{\" \"}\n                        </div>{\" \"}\n                        <div>Day</div>\n                      </div>\n                    )}\n                    {calculateRemainingTime(task.endDate).delay ? (\n                      <div className=\"text-center d-none\">\n                        <div className=\"form-control  fw-bold p-0\">\n                          {calculateRemainingTime(task.endDate).hours}{\" \"}\n                        </div>{\" \"}\n                        <div>Min</div>\n                      </div>\n                    ) : (\n                      <div className=\"text-center\">\n                        <div\n                          style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                          className=\"form-control fw-bold px-1 py-0\"\n                        >\n                          {calculateRemainingTime(task.endDate).hours}{\" \"}\n                        </div>{\" \"}\n                        <div>Hrs</div>\n                      </div>\n                    )}\n                    {calculateRemainingTime(task.endDate).delay ? (\n                      <div className=\"text-center d-none\">\n                        <div className=\"form-control fw-bold p-0\">\n                          {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                        </div>{\" \"}\n                        <div>Min</div>\n                      </div>\n                    ) : (\n                      <div className=\"text-center\">\n                        <div\n                          style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                          className=\"form-control fw-bold px-1 py-0\"\n                        >\n                          {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                        </div>{\" \"}\n                        <div>Min</div>\n                      </div>\n                    )}\n                  </div>\n                </summary>\n                <div\n                  style={{ position: \"relative\" }}\n                  className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n                >\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"form-control\"\n                  >\n                    <p\n                      style={{ height: \"fit-content\" }}\n                      className=\"text-start fs-6 form-control\"\n                    >\n                      <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                      {task.description}\n                    </p>\n                    <div\n                      style={{ height: \"fit-content\" }}\n                      className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                    >\n                      <p\n                        style={{ fontSize: \"1rem\" }}\n                        className=\"col-6 col-sm-6 col-md-2\"\n                      >\n                        <b>Task Durations</b> <br />{\" \"}\n                        <span>{task.duration} days</span>{\" \"}\n                      </p>\n                      <p\n                        style={{ fontSize: \"1rem\" }}\n                        className=\"col-6 col-sm-6 col-md-2\"\n                      >\n                        <b> Manager</b> <br /> <span>{task.managerEmail}</span>\n                      </p>\n                      <p\n                        style={{ fontSize: \"1rem\" }}\n                        className=\"col-6 col-sm-6 col-md-2\"\n                      >\n                        <b>Start Date</b> <br />{\" \"}\n                        <span>\n                          {new Date(task.startDate).toLocaleDateString()}\n                        </span>\n                      </p>\n                      <p\n                        style={{ fontSize: \"1rem\" }}\n                        className=\"col-6 col-sm-6 col-md-2\"\n                      >\n                        <b>End Date</b> <br />{\" \"}\n                        <span>\n                          {new Date(task.endDate).toLocaleDateString()}\n                        </span>\n                      </p>\n                      <p\n                        style={{ fontSize: \"1rem\" }}\n                        className=\"col-6 col-sm-6 col-md-2\"\n                      >\n                        <span>\n                          <b>Task Status</b> <br /> {task.status}\n                        </span>\n                      </p>\n                    </div>\n                    <div\n                      style={{ height: \"fit-content\" }}\n                      className=\"row form-control d-flex my-1 pt-3 rounded mx-1 justify-content-between\"\n                    >\n                      <h6 className=\"fw-bold\">Project Members</h6>\n                      <Table striped bordered hover>\n                        <thead>\n                          <tr>\n                            <th className=\"bg-dark text-white\">S. No</th>\n                            <th className=\"bg-dark text-white\">Name</th>\n                            <th className=\"bg-dark text-white\">Email</th>\n                            <th className=\"bg-dark text-white\">Designation</th>\n                            <th className=\"bg-dark text-white\">Action</th>\n                            <th className=\"bg-dark text-white\">Task Status</th>\n                            <th className=\"bg-dark text-white\">Remarks</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {email &&\n                            task.employees\n                              .filter((taskemp) => taskemp.empemail === email)\n                              .map((taskemp, i) => (\n                                <tr key={i}>\n                                  <td>{i + 1}</td>\n                                  <td>{taskemp.empname}</td>\n                                  <td>{taskemp.empemail}</td>\n                                  <td>{taskemp.empdesignation}</td>\n                                  <td className=\"row justify-content-center gap-2 \">\n                                    <button\n                                      className=\"btn col-3 btn-primary py-1\"\n                                      onClick={() =>\n                                        acceptTask(task._id, taskemp.empemail,task)\n                                      }\n                                      disabled={\n                                        taskemp.emptaskStatus === \"Accepted\" ||\n                                        taskemp.emptaskStatus === \"Rejected\" ||\n                                        taskemp.emptaskStatus === \"Completed\"\n                                      }\n                                    >\n                                      Accept\n                                    </button>\n                                    <button\n                                      className=\"btn col-3 py-1 btn-danger\"\n                                      onClick={() =>\n                                        rejectTask(task._id, taskemp.empemail, task)\n                                      }\n                                      disabled={\n                                        taskemp.emptaskStatus === \"Accepted\" ||\n                                        taskemp.emptaskStatus === \"Rejected\" ||\n                                        taskemp.emptaskStatus === \"Completed\"\n                                      }\n                                    >\n                                      Reject\n                                    </button>\n                                    <button\n                                      className=\"btn col-3 py-1 btn-success\"\n                                      onClick={() =>\n                                        completeTask(task._id, taskemp.empemail, task)\n                                      }\n                                      disabled={\n                                        taskemp.emptaskStatus === \"Completed\"\n                                      }\n                                    >\n                                      Complete\n                                    </button>\n\n                                    <button className=\"btn col-3 btn-info py-1\">\n                                      <BsFiletypeDoc /> View Docs\n                                    </button>\n                                  </td>\n                                  <td>{taskemp.emptaskStatus} </td>\n                                  <td\n                                    style={{\n                                      maxWidth: \"10rem\",\n                                      overflow: \"hidden\",\n                                      whiteSpace: \"nowrap\",\n                                      textOverflow: \"ellipsis\"\n                                    }}\n                                  >\n                                    {taskemp.empTaskComment}\n                                  </td>\n                                </tr>\n                              ))}\n                        </tbody>\n                      </Table>\n                    </div>\n                  </div>\n                </div>\n              </details>\n            ))}\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeNewTask;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { PiInfoFill } from \"react-icons/pi\";\n// import { FaCheck } from \"react-icons/fa6\";\n// import { toast } from \"react-hot-toast\";\n// import Table from \"react-bootstrap/Table\";\n// import InnerDashContainer from \"../../InnerDashContainer\";\n// import { BsFiletypeDoc } from \"react-icons/bs\";\n\n// const EmployeeNewTask = (props) => {\n//   const [tasks, setTasks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [isCanceling, setIsCanceling] = useState(false);\n//   const [isCompleting, setIsCompleting] = useState(false);\n//   const [email, setEmail] = useState(null);\n\n//   const [totalNewTasksLength, setTotalNewTasksLength] = useState(0);\n\n//   const id = localStorage.getItem(\"_id\");\n//   // console.log(id)\n//   useEffect(() => {\n//     const loadPersonalInfoData = async () => {\n//       try {\n//         const response = await axios.get(\n//           \"http://localhost:4000/api/personal-info/\" + id,\n//           {\n//             headers: {\n//               authorization: localStorage.getItem(\"token\") || \"\"\n//             }\n//           }\n//         );\n//         setEmail(response.data.Email);\n//       } catch (error) {\n//         console.error(\"Error fetching employees:\", error);\n//       }\n//     };\n\n//     loadPersonalInfoData();\n//   }, []);\n\n//   const calculateRemainingTime = (endDate) => {\n//     const now = new Date();\n//     const endDateTime = new Date(endDate);\n//     let remainingTime = endDateTime - now;\n\n//     if (remainingTime < 0) {\n//       // If remaining time is negative, consider it as delay\n//       remainingTime = Math.abs(remainingTime);\n//       return { delay: true, days: 0, hours: 0, minutes: 0 };\n//     } else {\n//       // Calculate remaining days, hours, minutes, and seconds\n//       const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\n//       const hours = Math.floor(\n//         (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n//       );\n//       const minutes = Math.floor(\n//         (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\n//       );\n//       return { delay: false, days, hours, minutes };\n//     }\n//   };\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:4000/api/tasks\");\n//       setTasks(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching tasks:\", error.message);\n//       setError(\"Error fetching tasks. Please try again later.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const acceptTask = async (taskId, empEmail) => {\n//     console.log(taskId, empEmail);\n//     try {\n//       const empRemarks = prompt(\"Enter remarks for accepting the task:\");\n\n//       if (empRemarks === null) {\n//         return; // If the user clicks Cancel in the prompt, do nothing\n//       }\n\n//       await axios.put(\n//         `http://localhost:4000/api/tasks/${taskId}/employees/${empEmail}`,\n//         {\n//           emptaskStatus: \"Accepted\",\n//           empTaskComment: empRemarks\n//         }\n//       );\n\n//       toast.success(\"Task accepted successfully!\");\n\n//       // Update the UI by fetching the latest tasks\n//       fetchData();\n//     } catch (error) {\n//       console.error(\"Error accepting task:\", error.message);\n//       alert(\"Failed to accept task. Please try again.\");\n//     }\n//   };\n\n//   const rejectTask = async (taskId, empEmail) => {\n//     try {\n//       const empRemarks = prompt(\"Enter remarks for rejecting the task:\");\n\n//       if (empRemarks === null) {\n//         return; // If the user clicks Cancel in the prompt, do nothing\n//       }\n\n//       await axios.put(\n//         `http://localhost:4000/api/tasks/${taskId}/employees/${empEmail}`,\n//         {\n//           emptaskStatus: \"Rejected\",\n//           empTaskComment: empRemarks\n//         }\n//       );\n\n//       toast.success(\"Task rejected successfully!\");\n\n//       // Update the UI by fetching the latest tasks\n//       fetchData();\n//     } catch (error) {\n//       console.error(\"Error rejecting task:\", error.message);\n//       alert(\"Failed to reject task. Please try again.\");\n//     }\n//   };\n\n//   const completeTask = async (taskId, empEmail) => {\n//     try {\n//       const empRemarks = prompt(\"Enter remarks for complete the task:\");\n\n//       if (empRemarks === null) {\n//         return; // If the user clicks Cancel in the prompt, do nothing\n//       }\n\n//       await axios.put(\n//         `http://localhost:4000/api/tasks/${taskId}/employees/${empEmail}`,\n//         {\n//           emptaskStatus: \"Completed\",\n//           empTaskComment: empRemarks\n//         }\n//       );\n\n//       toast.success(\"Task Completed successfully!\");\n\n//       // Update the UI by fetching the latest tasks\n//       fetchData();\n//     } catch (error) {\n//       console.error(\"Error Completing task:\", error.message);\n//       alert(\"Failed to Complete task. Please try again.\");\n//     }\n//   };\n//   // useEffect(() => {\n//   //   // Update totalNewTasksLength whenever tasks or email change\n//   //   setTotalNewTasksLength(\n//   //     tasks.filter(\n//   //       (task) =>\n//   //         task.status === \"Pending\" &&\n//   //         task.employees.some((taskemp) => taskemp.empemail === email)\n//   //     ).length\n//   //   );\n//   // }, [tasks, email]);\n\n//   // const totalAcceptedTasks = tasks.filter(\n//   //   (task) =>\n//   //     task.status === \"Pending\" &&\n//   //     task.employees.some((emp) => emp.emptaskStatus === \"Accepted\")\n//   // ).length;\n\n//   // const completeTasks = tasks.filter(\n//   //   (task) =>\n//   //     task.status === \"Pending\" &&\n//   //     task.employees.some((emp) => emp.emptaskStatus === \"Completed\")\n//   // ).length;\n\n//   // const rejectTasks = tasks.filter(\n//   //   (task) =>\n//   //     task.status === \"Pending\" &&\n//   //     task.employees.some((emp) => emp.emptaskStatus === \"Rejected\")\n//   // ).length;\n\n//   // const totalAssignedTasks = tasks.filter(\n//   //   (task) => task.employees.length > 0\n//   // ).length;\n\n//   const totalAcceptedTasks = tasks.filter(\n//     (task) =>\n//       task.status === \"Pending\" &&\n//       task.employees.some((emp) => emp.emptaskStatus === \"Accepted\")\n//   ).length;\n\n//   const totalPendingTasks = totalNewTasksLength - totalAcceptedTasks;\n\n//   const completeTasks = tasks.filter(\n//     (task) =>\n//       task.status === \"Pending\" &&\n//       task.employees.some((emp) => emp.emptaskStatus === \"Completed\")\n//   ).length;\n\n//   const rejectTasks = tasks.filter(\n//     (task) =>\n//       task.status === \"Pending\" &&\n//       task.employees.some((emp) => emp.emptaskStatus === \"Rejected\")\n//   ).length;\n\n//   const totalAssignedTasks = tasks.filter(\n//     (task) => task.employees.length > 0\n//   ).length;\n\n//   const assignedTask = tasks.filter((task) =>\n//     task.employees.some((taskemp) => taskemp.emptaskStatus === \"Task Assigned\")\n//   ).length;\n\n//   console.log(\"Total Pending Tasks: \", totalPendingTasks);\n//   console.log(\"Total Accepted Tasks: \", totalAcceptedTasks);\n//   console.log(\"Total Complete Tasks: \", completeTasks);\n//   console.log(\"Total Reject Tasks: \", rejectTasks);\n//   console.log(\"Total Assigned Tasks: \", totalAssignedTasks);\n//   console.log(\n//     \"Total Assigned Tasks with 'Task Assigned' status: \",\n//     assignedTask\n//   );\n\n//   return (\n//     <InnerDashContainer>\n//       <h1 className=\"fs-3 fw-bolder text-uppercase \">\n//         🌟New Task ({totalNewTasksLength}){\" \"}\n//       </h1>\n//       <h1 className=\"fs-3 fw-bolder text-uppercase \">\n//         🌟 Active Task\n//         {/* ({totalNewTasksLength} - {totalAcceptedTasks} Accepted{\" \"}\n//         {completeTasks} complete {rejectTasks} reject {totalAssignedTasks}{\" \"}\n//         assign) */}\n//       </h1>\n//       {loading && (\n//         <div\n//           style={{ width: \"100%\", height: \"100%\" }}\n//           className=\"d-flex aline-center gap-2\"\n//         >\n//           <div\n//             className=\"spinner-grow bg-primary\"\n//             style={{ width: \"1rem\", height: \"1rem\" }}\n//             role=\"status\"\n//           ></div>\n\n//           <span className=\"text-primary fw-bold\">Loading...</span>\n//         </div>\n//       )}\n//       {error && <p className=\"text-danger\">{error}</p>}\n//       <div\n//         style={{\n//           overflowY: \"scroll\",\n//           height: \"80vh\",\n//           scrollbarWidth: \"thin\",\n//           scrollbarGutter: \"stable\",\n//           scrollMargin: \"1rem\"\n//         }}\n//       >\n//         {email &&\n//           tasks\n//             .filter(\n//               (task) =>\n//                 task.status === \"Pending\" &&\n//                 task.employees.some((taskemp) => taskemp.empemail === email)\n//             )\n//             .map((task, index) => (\n//               <details\n//                 style={{\n//                   boxShadow: \"-1px 1px 10px gray\"\n//                 }}\n//                 className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n//                 key={task.id}\n//               >\n//                 <summary\n//                   style={{ height: \"fit-content\" }}\n//                   className=\"d-flex justify-content-between aline-center form-control bg-danger \"\n//                 >\n//                   <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n//                     # Task {index + 1} : {task.Taskname}\n//                   </div>\n//                   <div\n//                     style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n//                     className=\"fw-bold bg-white rounded-5 px-3 text-primary fs-6 d-flex justify-content-center aline-center flex-column\"\n//                   >\n//                     {task.department}\n//                   </div>\n//                   <div className=\"d-flex gap-2 RemainingTimeHandel justify-content-between \">\n//                     {calculateRemainingTime(task.endDate).delay ? (\n//                       <div>\n//                         <div className=\"text-center d-none\">\n//                           <div className=\"form-control  fw-bold p-0\">\n//                             {calculateRemainingTime(task.endDate).days}{\" \"}\n//                           </div>{\" \"}\n//                           <div>Day</div>\n//                         </div>\n//                         <h5 className=\"btn btn-danger p-1 px-3 fw-bold\">\n//                           Late\n//                         </h5>\n//                       </div>\n//                     ) : (\n//                       <div className=\"text-center\">\n//                         <div\n//                           style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                           className=\"form-control fw-bold px-1 py-0\"\n//                         >\n//                           {calculateRemainingTime(task.endDate).days}{\" \"}\n//                         </div>{\" \"}\n//                         <div>Day</div>\n//                       </div>\n//                     )}\n//                     {calculateRemainingTime(task.endDate).delay ? (\n//                       <div className=\"text-center d-none\">\n//                         <div className=\"form-control  fw-bold p-0\">\n//                           {calculateRemainingTime(task.endDate).hours}{\" \"}\n//                         </div>{\" \"}\n//                         <div>Min</div>\n//                       </div>\n//                     ) : (\n//                       <div className=\"text-center\">\n//                         <div\n//                           style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                           className=\"form-control fw-bold px-1 py-0\"\n//                         >\n//                           {calculateRemainingTime(task.endDate).hours}{\" \"}\n//                         </div>{\" \"}\n//                         <div>Hrs</div>\n//                       </div>\n//                     )}\n//                     {calculateRemainingTime(task.endDate).delay ? (\n//                       <div className=\"text-center d-none\">\n//                         <div className=\"form-control fw-bold p-0\">\n//                           {calculateRemainingTime(task.endDate).minutes}{\" \"}\n//                         </div>{\" \"}\n//                         <div>Min</div>\n//                       </div>\n//                     ) : (\n//                       <div className=\"text-center\">\n//                         <div\n//                           style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                           className=\"form-control fw-bold px-1 py-0\"\n//                         >\n//                           {calculateRemainingTime(task.endDate).minutes}{\" \"}\n//                         </div>{\" \"}\n//                         <div>Min</div>\n//                       </div>\n//                     )}\n//                   </div>\n//                 </summary>\n//                 <div\n//                   style={{ position: \"relative\" }}\n//                   className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n//                 >\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"form-control\"\n//                   >\n//                     <p\n//                       style={{ height: \"fit-content\" }}\n//                       className=\"text-start fs-6 form-control\"\n//                     >\n//                       <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n//                       {task.description}\n//                     </p>\n//                     <div\n//                       style={{ height: \"fit-content\" }}\n//                       className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                     >\n//                       <p\n//                         style={{ fontSize: \"1rem\" }}\n//                         className=\"col-6 col-sm-6 col-md-2\"\n//                       >\n//                         <b>Task Durations</b> <br />{\" \"}\n//                         <span>{task.duration} days</span>{\" \"}\n//                       </p>\n//                       <p\n//                         style={{ fontSize: \"1rem\" }}\n//                         className=\"col-6 col-sm-6 col-md-2\"\n//                       >\n//                         <b> Manager</b> <br /> <span>{task.managerEmail}</span>\n//                       </p>\n//                       <p\n//                         style={{ fontSize: \"1rem\" }}\n//                         className=\"col-6 col-sm-6 col-md-2\"\n//                       >\n//                         <b>Start Date</b> <br />{\" \"}\n//                         <span>\n//                           {new Date(task.startDate).toLocaleDateString()}\n//                         </span>\n//                       </p>\n//                       <p\n//                         style={{ fontSize: \"1rem\" }}\n//                         className=\"col-6 col-sm-6 col-md-2\"\n//                       >\n//                         <b>End Date</b> <br />{\" \"}\n//                         <span>\n//                           {new Date(task.endDate).toLocaleDateString()}\n//                         </span>\n//                       </p>\n//                       <p\n//                         style={{ fontSize: \"1rem\" }}\n//                         className=\"col-6 col-sm-6 col-md-2\"\n//                       >\n//                         <span>\n//                           <b>Task Status</b> <br /> {task.status}\n//                         </span>\n//                       </p>\n//                     </div>\n//                     <div\n//                       style={{ height: \"fit-content\" }}\n//                       className=\"row form-control d-flex my-1 pt-3 rounded mx-1 justify-content-between\"\n//                     >\n//                       <h6 className=\"fw-bold\">Project Members</h6>\n//                       <Table striped bordered hover>\n//                         <thead>\n//                           <tr>\n//                             <th className=\"bg-dark text-white\">S. No</th>\n//                             <th className=\"bg-dark text-white\">Name</th>\n//                             <th className=\"bg-dark text-white\">Email</th>\n//                             <th className=\"bg-dark text-white\">Designation</th>\n//                             <th className=\"bg-dark text-white\">Action</th>\n//                             <th className=\"bg-dark text-white\">Task Status</th>\n//                             <th className=\"bg-dark text-white\">Remarks</th>\n//                           </tr>\n//                         </thead>\n//                         <tbody>\n//                           {email &&\n//                             task.employees\n//                               .filter((taskemp) => taskemp.empemail === email)\n//                               .map((taskemp, i) => (\n//                                 <tr key={i}>\n//                                   <td>{i + 1}</td>\n//                                   <td>{taskemp.empname}</td>\n//                                   <td>{taskemp.empemail}</td>\n//                                   <td>{taskemp.empdesignation}</td>\n//                                   <td className=\"row justify-content-center gap-2 \">\n//                                     <button\n//                                       className=\"btn col-3 btn-primary py-1\"\n//                                       onClick={() =>\n//                                         acceptTask(task._id, taskemp.empemail)\n//                                       }\n//                                       disabled={\n//                                         taskemp.emptaskStatus === \"Accepted\" ||\n//                                         taskemp.emptaskStatus === \"Rejected\" ||\n//                                         taskemp.emptaskStatus === \"Completed\"\n//                                       }\n//                                     >\n//                                       Accept\n//                                     </button>\n//                                     <button\n//                                       className=\"btn col-3 py-1 btn-danger\"\n//                                       onClick={() =>\n//                                         rejectTask(task._id, taskemp.empemail)\n//                                       }\n//                                       disabled={\n//                                         taskemp.emptaskStatus === \"Accepted\" ||\n//                                         taskemp.emptaskStatus === \"Rejected\" ||\n//                                         taskemp.emptaskStatus === \"Completed\"\n//                                       }\n//                                     >\n//                                       Reject\n//                                     </button>\n//                                     <button\n//                                       className=\"btn col-3 py-1 btn-success\"\n//                                       onClick={() =>\n//                                         completeTask(task._id, taskemp.empemail)\n//                                       }\n//                                       disabled={\n//                                         taskemp.emptaskStatus === \"Completed\"\n//                                       }\n//                                     >\n//                                       Complete\n//                                     </button>\n\n//                                     <button className=\"btn col-3 btn-info py-1\">\n//                                       <BsFiletypeDoc /> View Docs\n//                                     </button>\n//                                   </td>\n//                                   <td>{taskemp.emptaskStatus} </td>\n//                                   <td\n//                                     style={{\n//                                       maxWidth: \"10rem\",\n//                                       overflow: \"hidden\",\n//                                       whiteSpace: \"nowrap\",\n//                                       textOverflow: \"ellipsis\"\n//                                     }}\n//                                   >\n//                                     {taskemp.empTaskComment}\n//                                   </td>\n//                                 </tr>\n//                               ))}\n//                         </tbody>\n//                       </Table>\n//                     </div>\n//                   </div>\n//                 </div>\n//               </details>\n//             ))}\n//       </div>\n//     </InnerDashContainer>\n//   );\n// };\n\n// export default EmployeeNewTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpLeave\\LeaveApplicationEmp.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpWorkExp\\WorkExperience.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpFamily\\FamilyInfo.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpEducation\\Education.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpPresonal\\PersonalInfo.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\attendance\\Attendance.jsx",["1020","1021","1022","1023"],"// import React, { useEffect, useContext } from \"react\";\r\n// import axios from \"axios\";\r\n// import { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\r\n\r\n// function SetLog() {\r\n//   // const [employees, setEmployees] = useState([]);\r\n//   // const [selectedEmployee, setSelectedEmployee] = useState(\"\");\r\n//   // const [attencenceID, setAttencenceID] = useState(\"\");\r\n//   // const [message, setMessage] = useState(\"\");\r\n\r\n//   const {employees, setEmployees, selectedEmployee, setSelectedEmployee, attencenceID, setAttencenceID, message, setMessage} = useContext(AttendanceContext)\r\n\r\n//   useEffect(() => {\r\n//     const fetchUsers = async () => {\r\n//       try {\r\n//         const response = await axios.get(\"http://localhost:4000/api/employee\", {\r\n//           headers: {\r\n//             authorization: localStorage.getItem(\"token\") || \"\",\r\n//           },\r\n//         });\r\n//         setEmployees(response.data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching employees:\", error);\r\n//       }\r\n//     };\r\n//     fetchUsers();\r\n//   }, []);\r\n\r\n//   const handleUserChange = (employeeID) => {\r\n//     const selectedEmployee = employees.find(\r\n//       (employee) => employee._id === employeeID\r\n//     );\r\n\r\n//     if (selectedEmployee) {\r\n//       setAttencenceID(selectedEmployee.attendanceObjID);\r\n//       setSelectedEmployee(employeeID);\r\n//       getMessage(employeeID);\r\n//     }\r\n//   };\r\n\r\n//   const getMessage = async (employeeID) => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:4000/api/attendance/${employeeID}`\r\n//       );\r\n//       const lastEntry = response.data[response.data.length - 1];\r\n\r\n//       if (lastEntry) {\r\n//         setMessage(`Status: ${lastEntry.years[0].months[0].dates[0].status}`);\r\n//       } else {\r\n//         setMessage(\"\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching attendance data:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleLogin = async () => {\r\n//     try {\r\n//       if (!selectedEmployee) {\r\n//         setMessage(\"Please select a user\");\r\n//         return;\r\n//       }\r\n\r\n//       const currentTime = new Date().toLocaleTimeString();\r\n//       await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n//         employeeId: selectedEmployee,\r\n//         year: new Date().getFullYear(),\r\n//         month: new Date().getMonth() + 1,\r\n//         date: new Date().getDate(),\r\n//         loginTime: [currentTime],\r\n//         status: \"login\",\r\n//       });\r\n//       setMessage(\"Login time recorded successfully\");\r\n//     } catch (error) {\r\n//       console.error(\"Error recording login time:\", error);\r\n//       setMessage(\"Error recording login time\");\r\n//     }\r\n//   };\r\n\r\n//   const handleLogout = async () => {\r\n//     try {\r\n//       if (!selectedEmployee) {\r\n//         setMessage(\"Please select an employee\");\r\n//         return;\r\n//       }\r\n\r\n//       const currentTime = new Date().toLocaleTimeString();\r\n//       await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n//         employeeId: selectedEmployee,\r\n//         year: new Date().getFullYear(),\r\n//         month: new Date().getMonth() + 1,\r\n//         date: new Date().getDate(),\r\n//         logoutTime: [currentTime],\r\n//         status: \"logout\",\r\n//       });\r\n//       setMessage(\"Logout time recorded successfully\");\r\n//     } catch (error) {\r\n//       console.error(\"Error recording logout time:\", error);\r\n//       setMessage(\"Error recording logout time\");\r\n//     }\r\n//   };\r\n\r\n//   const handleResume = async () => {\r\n//     try {\r\n//       if (!selectedEmployee) {\r\n//         setMessage(\"Please select an employee\");\r\n//         return;\r\n//       }\r\n\r\n//       const currentTime = new Date().toLocaleTimeString();\r\n//       const currentTimeMs = Math.round(new Date().getTime() / 1000 / 60);\r\n\r\n//       await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n//         employeeId: selectedEmployee,\r\n//         year: new Date().getFullYear(),\r\n//         month: new Date().getMonth() + 1,\r\n//         date: new Date().getDate(),\r\n//         ResumeTime: [currentTime],\r\n//         resumeTimeMS: [currentTimeMs],\r\n//         status: \"resume\",\r\n//       });\r\n\r\n//       setMessage(\"Resumed time recorded successfully\");\r\n//     } catch (error) {\r\n//       console.error(\"Error recording resume time:\", error);\r\n//       setMessage(\"Error recording resume time\");\r\n//     }\r\n//   };\r\n\r\n//   const handleBreak = async () => {\r\n//     try {\r\n//       if (!selectedEmployee) {\r\n//         setMessage(\"Please select an employee\");\r\n//         return;\r\n//       }\r\n\r\n//       const currentTime = new Date().toLocaleTimeString();\r\n//       const currentTimeMs = Math.round(new Date().getTime() / 1000 / 60);\r\n\r\n//       await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n//         employeeId: selectedEmployee,\r\n//         year: new Date().getFullYear(),\r\n//         month: new Date().getMonth() + 1,\r\n//         date: new Date().getDate(),\r\n//         breakTime: [currentTime],\r\n//         breakTimeMs: [currentTimeMs],\r\n//         status: \"break\",\r\n//       });\r\n//       setMessage(\"Break time recorded successfully\");\r\n//     } catch (error) {\r\n//       console.error(\"Error recording break time:\", error);\r\n//       setMessage(\"Error recording break time\");\r\n//     }\r\n//   };\r\n\r\n//   console.log(employees);\r\n\r\n//   return (\r\n//     <div className=\"App row\">\r\n//       <h1 className=\"text-center text-uppercase my-3\">Attendance System</h1>\r\n//       <div\r\n//         className=\"form-control d-flex  gap-3 p-3 m-3\"\r\n//         style={{ height: \"fit-content\" }}\r\n//       >\r\n//         <select\r\n//           className=\"form-select mx-2 w-25 \"\r\n//           onChange={(e) => handleUserChange(e.target.value)}\r\n//         >\r\n//           <option value=\"\">-- Select User --</option>\r\n//           {employees.map((employee) => (\r\n//             <option key={employee._id} value={employee._id}>\r\n//               {employee.FirstName}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n//         <div className=\"d-flex gap-3\">\r\n//           <button className=\"btn btn-success\" onClick={handleLogin}>\r\n//             Login\r\n//           </button>\r\n//           <button className=\"btn btn-danger\" onClick={handleLogout}>\r\n//             Logout\r\n//           </button>\r\n//           <div className=\"d-flex gap-3\">\r\n//             <button className=\"btn btn-warning\" onClick={handleBreak}>\r\n//               Break\r\n//             </button>\r\n//             <button className=\"btn btn-primary\" onClick={handleResume}>\r\n//               Resume\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {message && <p>{message}</p>}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default SetLog;\r\n\r\nimport React, { useEffect, useContext, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\r\nimport SelfAttendance from \"./SelfAttendance\";\r\nfunction Attendance(props) {\r\n  // const [employees, setEmployees] = useState([]);\r\n  // const [selectedEmployee, setSelectedEmployee] = useState(\"\");\r\n  // const [attencenceID, setAttencenceID] = useState(\"\");\r\n  // const [message, setMessage] = useState(\"\");\r\n  const [empName, setEmpName] = useState(null);\r\n\r\n  const {\r\n    employees,\r\n    setEmployees,\r\n    selectedEmployee,\r\n    setSelectedEmployee,\r\n    attencenceID,\r\n    setAttencenceID,\r\n    message,\r\n    setMessage\r\n  } = useContext(AttendanceContext);\r\n\r\n  useEffect(() => {\r\n    const loadEmployeeData = async (email) => {\r\n      await axios\r\n        .get(\"http://localhost:4000/api/employee\", {\r\n          headers: {\r\n            authorization: localStorage.getItem(\"token\") || \"\"\r\n          }\r\n        })\r\n        .then((response) => {\r\n          // Ensure that response.data is an array\r\n          let hr = response.data.filter((val) => {\r\n            return val.Account === 2;\r\n          });\r\n          setEmployees(hr);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n    loadEmployeeData();\r\n  }, []);\r\n  // hello\r\n\r\n  useEffect(() => {\r\n    const loadPersonalInfoData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          \"http://localhost:4000/api/personal-info/\" +\r\n            localStorage.getItem(\"_id\"),\r\n          {\r\n            headers: {\r\n              authorization: localStorage.getItem(\"token\") || \"\"\r\n            }\r\n          }\r\n        );\r\n        console.log(response.data.FirstName);\r\n        setEmpName(response.data.FirstName);\r\n      } catch (error) {\r\n        console.error(\"Error fetching employees:\", error);\r\n      }\r\n    };\r\n\r\n    loadPersonalInfoData();\r\n  }, []);\r\n\r\n  // hello\r\n  const handleUserChange = (employeeID) => {\r\n    const selectedEmployee = employees.find(\r\n      (employee) => employee._id === employeeID\r\n    );\r\n\r\n    if (selectedEmployee) {\r\n      setAttencenceID(selectedEmployee.attendanceObjID);\r\n      setSelectedEmployee(employeeID);\r\n      getMessage(employeeID);\r\n    }\r\n  };\r\n\r\n  // const getMessage = async (employeeID) => {\r\n  //   try {\r\n  //     const response = await axios.get(\r\n  //       `http://localhost:4000/api/attendance/${employeeID}`\r\n  //     );\r\n  //     const lastEntry = response.data[response.data.length - 1];\r\n\r\n  //     if (lastEntry) {\r\n  //       setMessage(`Status: ${lastEntry.years[0].months[0].dates[0].status}`);\r\n  //     } else {\r\n  //       setMessage(\"\");\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching attendance data:\", error);\r\n  //   }\r\n  // };\r\n\r\n  const getMessage = async (employeeID) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:4000/api/attendance/${employeeID}`\r\n      );\r\n      const lastEntry = response.data[response.data.length - 1];\r\n\r\n      if (lastEntry) {\r\n        setMessage(`Status: ${lastEntry.years[0].months[0].dates[0].status}`);\r\n      } else {\r\n        setMessage(\"\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching attendance data:\", error);\r\n    }\r\n  };\r\n\r\n  // const handleLogin = async () => {\r\n  //   let data = employees.filter((val) => {\r\n  //     return val.FirstName === empName;\r\n  //     // console.log(val.FirstName, empName);\r\n  //   });\r\n  //   console.log(data);\r\n  //   let attencenceID = data[0].attendanceObjID;\r\n  //   let selectedEmployee = data[0]._id;\r\n\r\n  //   try {\r\n  //     if (!empName) {\r\n  //       setMessage(\"Please select a user\");\r\n  //       return;\r\n  //     }\r\n\r\n  //     const currentTime = new Date().toLocaleTimeString();\r\n  //     await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n  //       employeeId: selectedEmployee,\r\n  //       year: new Date().getFullYear(),\r\n  //       month: new Date().getMonth() + 1,\r\n  //       date: new Date().getDate(),\r\n  //       loginTime: [currentTime],\r\n  //       status: \"login\"\r\n  //     });\r\n  //     setMessage(\"Login time recorded successfully\");\r\n  //   } catch (error) {\r\n  //     console.error(\"Error recording login time:\", error);\r\n  //     setMessage(\"Error recording login time\");\r\n  //   }\r\n  // };\r\n\r\n  const handleLogin = async () => {\r\n    let data = employees.filter((val) => {\r\n      return val.FirstName === empName;\r\n      // console.log(val.FirstName, empName);\r\n    });\r\n    console.log(data);\r\n    let attencenceID = data[0].attendanceObjID;\r\n    let selectedEmployee = data[0]._id;\r\n\r\n    try {\r\n      if (!empName) {\r\n        setMessage(\"Please select a user\");\r\n        return;\r\n      }\r\n\r\n      // Create a new Date object\r\n      const currentDate = new Date();\r\n\r\n      // Get the current hour, minute, and second in 24-hour format\r\n      const currentHour = currentDate.getHours();\r\n      const currentMinute = currentDate.getMinutes();\r\n      const currentSecond = currentDate.getSeconds();\r\n\r\n      // Format the current time in 24-hour format\r\n      const currentTime24Hrs = `${currentHour < 10 ? \"0\" : \"\"}${currentHour}:${\r\n        currentMinute < 10 ? \"0\" : \"\"\r\n      }${currentMinute}:${currentSecond < 10 ? \"0\" : \"\"}${currentSecond}`;\r\n\r\n      // Get the current time in milliseconds\r\n      const currentTimeMs = currentDate.getTime();\r\n\r\n      await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n        employeeId: selectedEmployee,\r\n        year: new Date().getFullYear(),\r\n        month: new Date().getMonth() + 1,\r\n        date: new Date().getDate(),\r\n        loginTime: [currentTime24Hrs],\r\n        loginTimeMs: [currentTimeMs],\r\n        status: \"login\"\r\n      });\r\n      setMessage(\"Login time recorded successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error recording login time:\", error);\r\n      setMessage(\"Error recording login time\");\r\n    }\r\n  };\r\n\r\n  // const handleLogout = async () => {\r\n  //   let data = employees.filter((val) => {\r\n  //     return val.FirstName === empName;\r\n  //   });\r\n  //   let attencenceID = data[0].attendanceObjID;\r\n  //   let selectedEmployee = data[0]._id;\r\n  //   try {\r\n  //     if (!empName) {\r\n  //       setMessage(\"Please select an employee\");\r\n  //       return;\r\n  //     }\r\n\r\n  //     const currentTime = new Date().toLocaleTimeString();\r\n  //     await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n  //       employeeId: selectedEmployee,\r\n  //       year: new Date().getFullYear(),\r\n  //       month: new Date().getMonth() + 1,\r\n  //       date: new Date().getDate(),\r\n  //       logoutTime: [currentTime],\r\n  //       status: \"logout\"\r\n  //     });\r\n  //     setMessage(\"Logout time recorded successfully\");\r\n  //   } catch (error) {\r\n  //     console.error(\"Error recording logout time:\", error);\r\n  //     setMessage(\"Error recording logout time\");\r\n  //   }\r\n  // };\r\n\r\n  const handleLogout = async () => {\r\n    let data = employees.filter((val) => {\r\n      return val.FirstName === empName;\r\n    });\r\n    let attencenceID = data[0].attendanceObjID;\r\n    let selectedEmployee = data[0]._id;\r\n    try {\r\n      if (!empName) {\r\n        setMessage(\"Please select an employee\");\r\n        return;\r\n      }\r\n\r\n      // Create a new Date object\r\n      const currentDate = new Date();\r\n\r\n      // Get the current hour, minute, and second in 24-hour format\r\n      const currentHour = currentDate.getHours();\r\n      const currentMinute = currentDate.getMinutes();\r\n      const currentSecond = currentDate.getSeconds();\r\n\r\n      // Format the current time in 24-hour format\r\n      const currentTime24Hrs = `${currentHour < 10 ? \"0\" : \"\"}${currentHour}:${\r\n        currentMinute < 10 ? \"0\" : \"\"\r\n      }${currentMinute}:${currentSecond < 10 ? \"0\" : \"\"}${currentSecond}`;\r\n\r\n      // Get the current time in milliseconds\r\n      const currentTimeMs = currentDate.getTime();\r\n\r\n      await axios.post(`http://localhost:4000/api/attendance/${attencenceID}`, {\r\n        employeeId: selectedEmployee,\r\n        year: new Date().getFullYear(),\r\n        month: new Date().getMonth() + 1,\r\n        date: new Date().getDate(),\r\n        logoutTime: [currentTime24Hrs],\r\n        logoutTimeMs: [currentTimeMs],\r\n        status: \"Logout\"\r\n      });\r\n      setMessage(\"Logout time recorded successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error recording Logout time:\", error);\r\n      setMessage(\"Error recording Logout time\");\r\n    }\r\n  };\r\n\r\n  // const handleResume = async () => {\r\n  //   let email = localStorage.getItem(\"Email\");\r\n  //   if (employees) {\r\n  //     let data = employees.filter((val) => {\r\n  //       return val.Email === email;\r\n  //     });\r\n  //     let attencenceID = data[0].attendanceObjID;\r\n  //     let selectedEmployee = data[0]._id;\r\n  //     try {\r\n  //       if (!data) {\r\n  //         setMessage(\"Please select an employee\");\r\n  //         return;\r\n  //       }\r\n\r\n  //       const currentTime = new Date().toLocaleTimeString();\r\n  //       const currentTimeMs = Math.round(new Date().getTime() / 1000 / 60);\r\n\r\n  //       await axios.post(\r\n  //         `http://localhost:4000/api/attendance/${attencenceID}`,\r\n  //         {\r\n  //           employeeId: selectedEmployee,\r\n  //           year: new Date().getFullYear(),\r\n  //           month: new Date().getMonth() + 1,\r\n  //           date: new Date().getDate(),\r\n  //           ResumeTime: [currentTime],\r\n  //           resumeTimeMS: [currentTimeMs],\r\n  //           status: \"resume\"\r\n  //         }\r\n  //       );\r\n\r\n  //       setMessage(\"Resumed time recorded successfully\");\r\n  //     } catch (error) {\r\n  //       console.error(\"Error recording resume time:\", error);\r\n  //       setMessage(\"Error recording resume time\");\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  const handleResume = async () => {\r\n    let email = localStorage.getItem(\"Email\");\r\n    if (employees) {\r\n      let data = employees.filter((val) => {\r\n        return val.Email === email;\r\n      });\r\n      let attencenceID = data[0].attendanceObjID;\r\n      let selectedEmployee = data[0]._id;\r\n      try {\r\n        if (!data) {\r\n          setMessage(\"Please select an employee\");\r\n          return;\r\n        }\r\n\r\n        const currentTime = new Date().toLocaleTimeString();\r\n        const URcurrentTimeMs = new Date().getTime();\r\n        const currentTimeMs = Math.round(URcurrentTimeMs);\r\n\r\n        await axios.post(\r\n          `http://localhost:4000/api/attendance/${attencenceID}`,\r\n          {\r\n            employeeId: selectedEmployee,\r\n            year: new Date().getFullYear(),\r\n            month: new Date().getMonth() + 1,\r\n            date: new Date().getDate(),\r\n            ResumeTime: [currentTime],\r\n            resumeTimeMS: [currentTimeMs],\r\n            status: \"Login\"\r\n          }\r\n        );\r\n\r\n        setMessage(\"Resumed time recorded successfully\");\r\n      } catch (error) {\r\n        console.error(\"Error recording resume time:\", error);\r\n        setMessage(\"Error recording resume time\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // const handleBreak = async () => {\r\n  //   let email = localStorage.getItem(\"Email\");\r\n  //   if (employees) {\r\n  //     let data = employees.filter((val) => {\r\n  //       return val.Email === email;\r\n  //     });\r\n  //     console.log(email);\r\n  //     let attencenceID = data[0].attendanceObjID;\r\n  //     let selectedEmployee = data[0]._id;\r\n  //     try {\r\n  //       if (!data) {\r\n  //         setMessage(\"Please select an employee\");\r\n  //         return;\r\n  //       }\r\n\r\n  //       const currentTime = new Date().toLocaleTimeString();\r\n  //       const currentTimeMs = Math.round(new Date().getTime() / 1000 / 60);\r\n\r\n  //       await axios.post(\r\n  //         `http://localhost:4000/api/attendance/${attencenceID}`,\r\n  //         {\r\n  //           employeeId: selectedEmployee,\r\n  //           year: new Date().getFullYear(),\r\n  //           month: new Date().getMonth() + 1,\r\n  //           date: new Date().getDate(),\r\n  //           breakTime: [currentTime],\r\n  //           breakTimeMs: [currentTimeMs],\r\n  //           status: \"break\"\r\n  //         }\r\n  //       );\r\n  //       setMessage(\"Break time recorded successfully\");\r\n  //     } catch (error) {\r\n  //       console.error(\"Error recording break time:\", error);\r\n  //       setMessage(\"Error recording break time\");\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  const handleBreak = async () => {\r\n    let email = localStorage.getItem(\"Email\");\r\n    if (employees) {\r\n      let data = employees.filter((val) => {\r\n        return val.Email === email;\r\n      });\r\n      console.log(email);\r\n      let attencenceID = data[0].attendanceObjID;\r\n      let selectedEmployee = data[0]._id;\r\n      try {\r\n        if (!data) {\r\n          setMessage(\"Please select an employee\");\r\n          return;\r\n        }\r\n        const currentTime = new Date().toLocaleTimeString();\r\n        const URcurrentTimeMs = new Date().getTime();\r\n        const currentTimeMs = Math.round(URcurrentTimeMs);\r\n\r\n        await axios.post(\r\n          `http://localhost:4000/api/attendance/${attencenceID}`,\r\n          {\r\n            employeeId: selectedEmployee,\r\n            year: new Date().getFullYear(),\r\n            month: new Date().getMonth() + 1,\r\n            date: new Date().getDate(),\r\n            breakTime: [currentTime],\r\n            breakTimeMs: [currentTimeMs],\r\n            status: \"Break\"\r\n          }\r\n        );\r\n        setMessage(\"breakTime time recorded successfully\");\r\n      } catch (error) {\r\n        console.error(\"Error recording breakTime time:\", error);\r\n        setMessage(\"Error recording breakTime time\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App row\">\r\n      <h1 className=\"text-center text-uppercase my-3\">Attendance System</h1>\r\n      <div\r\n        className=\"form-control d-flex  gap-3 p-3 m-3\"\r\n        style={{ height: \"fit-content\" }}\r\n      >\r\n        {/* <select\r\n          className=\"form-select mx-2 w-25 \"\r\n          onChange={(e) => handleUserChange(e.target.value)}\r\n        >\r\n          <option value=\"\">-- Select User --</option>\r\n          {employees.map((employee) => (\r\n            <option key={employee._id} value={employee._id}>\r\n              {employee.FirstName}\r\n            </option>\r\n          ))}\r\n        </select> */}\r\n        <input value={empName} style={{ display: \"none\" }} />\r\n\r\n        <div className=\"d-flex gap-3\">\r\n          <button className=\"btn btn-success\" onClick={handleLogin}>\r\n            Mark Attendance\r\n          </button>\r\n          <button className=\"btn btn-danger\" onClick={handleLogout}>\r\n            Logout\r\n          </button>\r\n          <div className=\"d-flex gap-3\">\r\n            <button className=\"btn btn-warning\" onClick={handleBreak}>\r\n              Break\r\n            </button>\r\n            <button className=\"btn btn-primary\" onClick={handleResume}>\r\n              Resume\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {message && <p>{message}</p>}\r\n\r\n      <div className=\"view\">\r\n        <SelfAttendance />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Attendance;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminPortalFormEdit.jsx",["1024","1025"],"import React, { Component } from \"react\";\n// import \"./AdminPortalForm.css\";\n// import { HashRouter as Router, Route, Link } from \"react-router-dom\";\n// import { Form,Button } from \"react-bootstrap\";\nimport { Form,Button,Col,Row } from \"react-bootstrap\";\n\nclass AdminPortalForm extends Component {\n  state = {\n    PortalData: this.props.editData[\"PortalName\"],\n    Status:this.props.editData[\"Status\"]\n  };\n  onChange(e) {\n    this.setState({ PortalData: e.target.value });\n  }\n  onStatusChange=(e)=>{\n    this.setState({ Status: e.target.value });\n    this.props.onStatusChange(e)\n  }\n\n  render() {\n    return (\n      <div>\n        <h2 id=\"role-form-title\">Edit Portal Details</h2>\n     \n         <div id=\"role-form-outer-div\"><Form id=\"form\"  onSubmit={e =>\n                this.props.onPortalEditUpdate(\n                  this.props.editData,\n                  e.target[0].value\n                )\n              }>\n \n  <Form.Group as={Row}>\n    <Form.Label column sm={2}>\n    Portal\n    </Form.Label>\n    <Col sm={10}  className=\"form-input\">\n      <Form.Control type=\"Text\" placeholder=\"Portal\" name=\"PortalName\" required \n      value={this.state.PortalData}\n                  onChange={value => this.onChange(value)}/>\n    </Col>\n  </Form.Group>\n \n  <Form.Group as={Row}>\n      <Form.Label as=\"legend\" column sm={2}>\n        Status\n      </Form.Label>\n      <Col sm={10}>\n        <Form.Check\n        inline\n          type=\"radio\"\n          label=\"enable\"\n          value=\"1\"\n          name=\"status\"    \n        \n        onChange={this.onStatusChange}   \n        required\n        checked={this.state.Status==1}\n        />\n        <Form.Check\n        inline\n          type=\"radio\"\n          label=\"disable\"\n          value=\"0\"\n          name=\"status\" \n          onChange={this.onStatusChange}  \n          required      \n          checked={this.state.Status==0}\n        />\n      </Col>\n    </Form.Group>\n\n  <Form.Group as={Row} id=\"form-submit-button\">\n    <Col sm={{ span: 10, offset: 2 }}>\n      <Button type=\"submit\">Update</Button>\n    </Col>\n  </Form.Group>\n  <Form.Group as={Row} id=\"form-cancel-button\">\n    <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n      <Button type=\"reset\" onClick={this.props.onFormEditClose}>cancel</Button>\n    </Col>\n  </Form.Group>\n</Form></div>\n      </div>\n    );\n  }\n}\n\nexport default AdminPortalForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminPortalForm.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminProjectBidFormEdit.jsx",["1026","1027","1028","1029","1030","1031","1032","1033","1034"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./AdminProjectBidFormEdit.css\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\n\nclass AdminProjectBidFormEdit extends Component {\n  state = {\n    status: \"\",\n    portalsInfo: [],\n    ProjectTitleData: this.props.editData[\"ProjectTitle\"],\n    ProjectURLData: this.props.editData[\"ProjectURL\"],\n    ProjectDescriptionData: this.props.editData[\"ProjectDesc\"],\n    EstimatedTimeData: this.props.editData[\"EstimatedTime\"],\n\n    RemarkData: this.props.editData[\"Remark\"]\n  };\n  onProjectTitleDataChange(e) {\n    this.setState({ ProjectTitleData: e.target.value });\n  }\n  onProjectURLDataChange(e) {\n    this.setState({ ProjectURLData: e.target.value });\n  }\n  onProjectDescriptionDataChange(e) {\n    this.setState({ ProjectDescriptionData: e.target.value });\n  }\n  onPortalsDataChange(e) {\n    this.setState({ PortalsData: e.target.value });\n  }\n  onEstimatedTimeDataChange(e) {\n    this.setState({ EstimatedTimeData: e.target.value });\n  }\n  onEstimatedCostDataChange(e) {\n    this.setState({ EstimatedCostData: e.target.value });\n  }\n  onResourceDataChange(e) {\n    this.setState({ ResourceData: e.target.value });\n  }\n  onStatusDataChange(e) {\n    this.setState({ StatusData: e.target.value });\n  }\n  onRemarkDataChange(e) {\n    this.setState({ RemarkData: e.target.value });\n  }\n\n  portalsData = [];\n  handleChange = (event) => {\n    this.setState({\n      status: event.target.value\n    });\n  };\n  loadPortalsInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/admin/portal\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        this.portalsData = response.data;\n\n        this.portalsData = this.portalsData.filter(\n          (data) => data[\"Status\"] == 1\n        );\n\n        this.setState({ portalsInfo: response.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  componentDidMount() {\n    this.loadPortalsInfo();\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <h2 id=\"role-form-title\">Edit Project Bid Details</h2>\n        <div id=\"role-form-outer-div\">\n          <Form\n            id=\"form\"\n            onSubmit={(e) =>\n              this.props.onProjectBidEditUpdate(this.props.editData, e)\n            }\n          >\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Project Title\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Project Title\"\n                  name=\"ProjectTitle\"\n                  required\n                  value={this.state.ProjectTitleData}\n                  onChange={(value) => this.onProjectTitleDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Project URL\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Project URL\"\n                  name=\"ProjectURL\"\n                  required\n                  value={this.state.ProjectURLData}\n                  onChange={(value) => this.onProjectURLDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Project Description\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"3\"\n                  required\n                  value={this.state.ProjectDescriptionData}\n                  onChange={(value) =>\n                    this.onProjectDescriptionDataChange(value)\n                  }\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Portals\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" name=\"CompanyID\" required>\n                  {this.portalsData.map((data, index) => (\n                    <option\n                      value={data[\"_id\"]}\n                      selected={\n                        this.props.editData[\"portals\"][0][\"ID\"] == data[\"ID\"]\n                      }\n                    >\n                      {data[\"PortalName\"]}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Estimated Time\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"number\"\n                  placeholder=\"Estimated Time\"\n                  name=\"EstimatedTime\"\n                  required\n                  value={this.state.EstimatedTimeData}\n                  onChange={(value) => this.onEstimatedTimeDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Estimated Cost\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"number\"\n                  placeholder=\"Estimated Cost\"\n                  name=\"EstimatedCost\"\n                  required\n                  value={this.state.EstimatedCostData}\n                  onChange={(value) => this.onEstimatedCostDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Resource\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" required>\n                  <option\n                    value=\"1\"\n                    selected={this.props.editData[\"ResourceID\"] == 1}\n                  >\n                    Resource1\n                  </option>\n                  <option\n                    value=\"2\"\n                    selected={this.props.editData[\"ResourceID\"] == 2}\n                  >\n                    Resource2\n                  </option>\n                  <option\n                    value=\"3\"\n                    selected={this.props.editData[\"ResourceID\"] == 3}\n                  >\n                    Resource3\n                  </option>\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Status\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" required>\n                  <option\n                    value=\"1\"\n                    selected={this.props.editData[\"Status\"] == 1}\n                  >\n                    Open\n                  </option>\n                  <option\n                    value=\"2\"\n                    selected={this.props.editData[\"Status\"] == 2}\n                  >\n                    Close\n                  </option>\n                  <option\n                    value=\"3\"\n                    selected={this.props.editData[\"Status\"] == 3}\n                  >\n                    Cancel\n                  </option>\n                  <option\n                    value=\"4\"\n                    selected={this.props.editData[\"Status\"] == 4}\n                  >\n                    Award\n                  </option>\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Remark\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"3\"\n                  required\n                  value={this.state.RemarkData}\n                  onChange={(value) => this.onRemarkDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} id=\"form-submit-button\">\n              <Col sm={{ span: 10, offset: 2 }}>\n                <Button type=\"submit\">Submit</Button>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} id=\"form-cancel-button\">\n              <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                <Button type=\"reset\" onClick={this.props.onFormEditClose}>\n                  cancel\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </div>\n        {/* </div>\n        </div> */}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AdminProjectBidFormEdit;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminPortalTable.jsx",["1035","1036","1037","1038"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./AdminPortalForm.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport { Button } from \"react-bootstrap\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nclass AdminPortalTable extends Component {\n  state = {\n    portalData: [],\n    loading: true\n  };\n  portalObj = [];\n  rowDataT = [];\n\n  loadPortalData = () => {\n    axios\n      .get(\"http://localhost:4000/api/admin/portal\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        this.portalObj = response.data;\n        // }\n        console.log(\"response\", response.data);\n        this.setState({ portalData: response.data });\n        this.setState({ loading: false });\n        this.rowDataT = [];\n\n        this.portalObj.map((data) => {\n          let temp = {\n            data,\n            PortalName: data[\"PortalName\"],\n            Status: data[\"Status\"] == 1 ? \"enable\" : \"disable\"\n          };\n\n          this.rowDataT.push(temp);\n        });\n        this.setState({ rowData: this.rowDataT });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  onPortalDelete = (e) => {\n    console.log(e);\n    if (\n      window.confirm(\n        \"Are you sure to delete this record,It Will Delete All Projects Related to This Portal? \"\n      ) == true\n    ) {\n      axios\n        .delete(\"http://localhost:4000/api/admin/portal/\" + e, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then((res) => {\n          this.componentDidMount();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n  componentDidMount() {\n    this.loadPortalData();\n  }\n  renderButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() => this.onPortalDelete(params.data.data[\"_id\"])}\n      />\n    );\n  }\n  renderEditButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => this.props.onEditPortal(params.data.data)}\n      />\n    );\n  }\n\n  Status = (s) => {\n    if (s == 1) {\n      return \"enabled\";\n    } else {\n      return \"disabled\";\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"p-4\">\n        <div className=\"d-flex justify-between aline-items-start mb-3\">\n          <div className=\" my-auto\">\n            <h3 className=\"fw-bold text-muted\">Portal Details</h3>\n            <p className=\"text-muted\">\n              You can create new bid and view all Bidding details of the\n              companies here !\n            </p>\n          </div>\n\n          <Button\n            className=\"my-auto\"\n            variant=\"primary\"\n            id=\"add-button\"\n            onClick={this.props.onAddPortal}\n          >\n            <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n            Add new Details\n          </Button>\n        </div>\n        <div id=\"clear-both\" />\n\n        {!this.state.loading ? (\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                >\n                  Portal\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                >\n                  Status\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.portalData.map((items, index) => (\n                <tr key={index}>\n                  <td>{items.PortalName}</td>\n                  <td>{items.Status}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <div id=\"loading-bar\">\n            <RingLoader\n              css={override}\n              sizeUnit={\"px\"}\n              size={50}\n              color={\"#0000ff\"}\n              loading={true}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AdminPortalTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\ManagerTaskManagement\\ManagerRejectedTask.jsx",["1039"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst ManagerRejectedTask = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\", {\n        params: { status: \"Completed\" } // Filter by status \"Completed\"\n      });\n\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching completed tasks:\", error.message);\n      setError(\"Error fetching completed tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n      // Schedule the next update after 1 minute (adjust as needed)\n    }\n  };\n  useEffect(() => {\n    fetchData();\n\n    return () => clearTimeout();\n  }, []);\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\n        🔴 Rejected Tasks\n      </h1>\n      <p className=\"text-muted\">You can view all rejected task here!</p>{\" \"}\n      {loading && (\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          className=\"d-flex aline-center gap-2\"\n        >\n          <div\n            className=\"spinner-grow bg-primary\"\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            role=\"status\"\n          ></div>\n\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n        className=\"d-flex flex-column gap-3\"\n      >\n        {tasks\n          .filter((task) => task.status === \"Rejected\")\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{ height: \"fit-content\" }}\n                className=\"d-flex justify-content-between aline-center form-control bg-black text-white\"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-success fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div>\n                  <p className=\"btn btn-light m-auto py-1 px-3 fw-bold\">\n                    Rejected\n                  </p>\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div\n                  style={{\n                    width: \"99.4%\",\n                    height: \"100%\",\n                    zIndex: \"5\",\n                    backgroundColor: \"rgba(5, 128, 8, 0.384)\",\n                    textShadow: \"-5px 5px 5px rgba(128, 128, 128, 0.422)\"\n                  }}\n                  className=\"watermark form-control   position-absolute d-flex justify-content-center aline-center\"\n                >\n                  <h1 className=\"text-uppercase text-light fw-bolder\">\n                    R E J E C T E D\n                  </h1>\n                </div>\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <p\n                    style={{ height: \"fit-content\" }}\n                    className=\"text-start fs-6 form-control\"\n                  >\n                    <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                    {task.description}\n                  </p>\n                  <div className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\">\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Created By <br /> <span> {task.managerEmail}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Start Date <br />{\" \"}\n                      <span>\n                        {new Date(task.startDate).toLocaleDateString()}\n                      </span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      End Date <br />{\" \"}\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <span>\n                        Task Status <br /> {task.status}\n                      </span>\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p>\n                      <span className=\"fw-bold\">Remarks : </span> {task.comment}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ManagerRejectedTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\ManagerTaskManagement\\ManagerCompletedTask.jsx",["1040"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst ManagerCompletedTask = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\", {\n        params: { status: \"Completed\" } // Filter by status \"Completed\"\n      });\n\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching completed tasks:\", error.message);\n      setError(\"Error fetching completed tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n      // Schedule the next update after 1 minute (adjust as needed)\n    }\n  };\n  useEffect(() => {\n    fetchData();\n\n    return () => clearTimeout();\n  }, []);\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\n        ✅ Completed Tasks (\n        {tasks.filter((task) => task.status === \"Completed\").length})\n      </h1>\n      <p className=\"text-muted\">You can view all Completed task here!</p>{\" \"}\n      {loading && (\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          className=\"d-flex aline-center gap-2\"\n        >\n          <div\n            className=\"spinner-grow bg-primary\"\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            role=\"status\"\n          ></div>\n\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n        className=\"d-flex flex-column gap-3\"\n      >\n        {tasks\n          .filter((task) => task.status === \"Completed\")\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{\n                  height: \"fit-content\",\n                  background:\n                    \"linear-gradient(165deg,#11009E, #700B97, 90%, #C84B31)\"\n                }}\n                className=\"d-flex justify-content-between aline-center form-control text-white\"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-success fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div className=\"\">\n                  <p className=\"btn btn-success m-auto fw-bold\">Completed</p>\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div\n                  style={{\n                    width: \"99.4%\",\n                    height: \"100%\",\n                    zIndex: \"5\",\n                    backgroundColor: \"rgba(0, 128, 0, 0.384)\",\n                    textShadow: \"-5px 5px 5px rgba(128, 128, 128, 0.422)\"\n                  }}\n                  className=\"watermark form-control   position-absolute d-flex justify-content-center aline-center\"\n                >\n                  <h1 className=\"text-uppercase text-light fw-bolder\">\n                    C O M P L E T E D\n                  </h1>\n                </div>\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <p\n                    style={{ height: \"fit-content\" }}\n                    className=\"text-start fs-6 form-control\"\n                  >\n                    <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                    {task.description}\n                  </p>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Created By <br /> <span>{task.managerEmail}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Start Date <br />{\" \"}\n                      <span>\n                        {new Date(task.startDate).toLocaleDateString()}\n                      </span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      End Date <br />{\" \"}\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <span>\n                        Task Status <br /> {task.status}\n                      </span>\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p>\n                      <span className=\"fw-bold\">Remarks : </span> {task.comment}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ManagerCompletedTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\ManagerTaskManagement\\ManagerActiveTask.jsx",["1041","1042","1043","1044","1045","1046","1047","1048","1049","1050"],"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { PiInfoFill } from \"react-icons/pi\";\n// import { FaCheck } from \"react-icons/fa6\";\n// import { IoCheckmarkDoneSharp } from \"react-icons/io5\";\n// import { MdDeleteForever } from \"react-icons/md\";\n// // import { toast } from \"react-toastify\";\n// import Modal from \"react-bootstrap/Modal\";\n// import Table from \"react-bootstrap/esm/Table\";\n// import { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\n\n// const ManagerActiveTask = () => {\n//   const [modalShow, setModalShow] = React.useState(false);\n//   const [tasks, setTasks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [, setIsCompleting] = useState(false);\n//   const [getEmployee, setGetEmployee] = useState([]);\n//   const [selectedEmployees, setSelectedEmployees] = useState([]);\n//   const [inputEmail, setInputEmail] = useState(\"\");\n//   const [originalEmployeeData, setOriginalEmployeeData] = useState([]);\n//   const [selectedTaskId, setSelectedTaskId] = useState(null);\n//   const [selectAll, setSelectAll] = useState(false);\n//   const [isForwardButtonDisabled, setIsForwardButtonDisabled] = useState(true);\n\n//   const [employeeData, setEmployeeData] = useState([]);\n//   const [searchData, setSearchData] = useState(\"\");\n//   const [rowData, setRowData] = useState([]);\n//   const [rowIndex, setRowIndex] = useState(null);\n//   const [moreInfo, setMoreInfo] = useState(false);\n\n//   const loadEmployeeData = () => {\n//     axios\n//       .get(\"http://localhost:4000/api/employee\", {\n//         headers: {\n//           authorization: localStorage.getItem(\"token\") || \"\"\n//         }\n//       })\n//       .then((response) => {\n//         const employeeObj = response.data;\n//         console.log(\"response\", response.data);\n//         setEmployeeData(employeeObj);\n//         setLoading(false);\n//         const rowDataT = employeeObj.map((data) => {\n//           return {\n//             data,\n//             Email: data[\"Email\"],\n//             FirstName: data[\"FirstName\"] + \"\" + data[\"LastName\"],\n//             ContactNo: data[\"ContactNo\"],\n//             PositionName: data[\"position\"][0]\n//               ? data[\"position\"][0][\"PositionName\"]\n//               : \"\"\n//           };\n//         });\n//         setRowData(rowDataT);\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n//   };\n\n//   useEffect(() => {\n//     loadEmployeeData();\n//   }, []);\n\n//   const calculateRemainingTime = (endDate) => {\n//     const now = new Date();\n//     const endDateTime = new Date(endDate);\n//     let remainingTime = endDateTime - now;\n\n//     if (remainingTime < 0) {\n//       // If remaining time is negative, consider it as delay\n//       remainingTime = Math.abs(remainingTime);\n//       return { delay: true, days: 0, hours: 0, minutes: 0 };\n//     } else {\n//       // Calculate remaining days, hours, minutes, and seconds\n//       const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\n//       const hours = Math.floor(\n//         (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n//       );\n//       const minutes = Math.floor(\n//         (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\n//       );\n//       return { delay: false, days, hours, minutes };\n//     }\n//   };\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:4000/api/tasks\");\n//       setTasks(response.data);\n//       setError(null);\n//     } catch (error) {\n//       console.error(\"Error fetching tasks:\", error.message);\n//       setError(\"Error fetching tasks. Please try again later.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchData();\n//     return () => clearTimeout();\n//   }, []);\n\n//   useEffect(() => {\n//     console.log(\"getEmployee:\", getEmployee);\n//   }, [getEmployee]);\n\n//   const forwordTaskToEmployee = async (taskId) => {\n//     setSelectedTaskId(taskId);\n//     setModalShow(true);\n//   };\n\n//   const forwardTaskToEmployees = async (selectedTaskId) => {\n//     try {\n//       for (const employee of selectedEmployees) {\n//         try {\n//           const employeeData = {\n//             empname: employee.FirstName,\n//             empemail: employee.Email,\n//             empdesignation: employee.PositionName,\n//             emptaskStatus: \"Task Assigned\"\n//           };\n\n//           await axios.post(\n//             `http://localhost:4000/api/tasks/${selectedTaskId}/employees`,\n//             {\n//               employees: [employeeData]\n//             }\n//           );\n//         } catch (error) {\n//           console.error(\n//             `Error forwarding task to ${employee.FirstName}:`,\n//             error.message\n//           );\n//         }\n//       }\n\n//       fetchData();\n\n//       setSelectedEmployees([]);\n//       setModalShow(false);\n//     } catch (error) {\n//       console.error(\"Error forwarding task:\", error.message);\n//       alert(\"Failed to forward task. Please try again.\");\n//     }\n//   };\n\n//   const askStatus = async (taskId) => {};\n//   const completeTask = async (taskId) => {\n//     try {\n//       setIsCompleting(true);\n\n//       const CompleteRemarks = prompt(\"Enter remarks to Complete Task:\");\n\n//       if (CompleteRemarks === null) {\n//         setIsCompleting(false);\n//         return;\n//       }\n\n//       await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n//         status: \"Completed\",\n//         comment: CompleteRemarks\n//       });\n\n//       alert(\"Task completed successfully!\");\n\n//       fetchData();\n//     } catch (error) {\n//       console.error(\"Error completing task:\", error.message);\n//       alert(\"Failed to complete task. Please try again.\");\n//     } finally {\n//       setIsCompleting(false);\n//     }\n//   };\n\n//   const handleSearch = (e) => {\n//     const searchValue = e.target.value.toLowerCase();\n\n//     if (searchValue === \"\") {\n//       setGetEmployee(originalEmployeeData);\n//     } else {\n//       const filteredEmployees = originalEmployeeData.filter(\n//         (employee) =>\n//           employee.name.toLowerCase().includes(searchValue) ||\n//           employee.email.toLowerCase().includes(searchValue) ||\n//           employee.designation.toLowerCase().includes(searchValue)\n//       );\n\n//       setGetEmployee(filteredEmployees);\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     setInputEmail(e.target.value);\n//   };\n\n//   const removeSelectedEmployee = (email) => {\n//     setSelectedEmployees(\n//       selectedEmployees.filter((employee) => employee.Email !== email)\n//     );\n//   };\n\n//   const addSelectedEmployee = (employee) => {\n//     const isChecked = selectedEmployees.some(\n//       (emp) => emp.Email === employee.Email\n//     );\n\n//     if (isChecked) {\n//       setSelectedEmployees((prevEmployees) =>\n//         prevEmployees.filter((emp) => emp.Email !== employee.Email)\n//       );\n//     } else {\n//       setSelectedEmployees([...selectedEmployees, employee]);\n//     }\n//     if (selectedEmployees.length < 0) {\n//       setIsForwardButtonDisabled(true);\n//     } else {\n//       setIsForwardButtonDisabled(false); // Disable the button when there is at least one selected employee\n//     }\n\n//     setInputEmail(\"\");\n//   };\n\n//   const toggleSelectAll = () => {\n//     setSelectAll(!selectAll);\n//     setSelectedEmployees(selectAll ? [] : [...getEmployee]);\n//   };\n\n//   const calculateProgress = (task) => {\n//     const totalEmployees =\n//       task.employees.length -\n//       task.employees.filter((emp) => emp.emptaskStatus === \"Rejected\").length;\n//     const completedTasks = task.employees.filter(\n//       (emp) => emp.emptaskStatus === \"Completed\"\n//     ).length;\n//     return (completedTasks / totalEmployees) * 100;\n//   };\n//   return (\n//     <div className=\"py-2\">\n//       <h1 className=\"fs-3 fw-bolder text-uppercase mb-4\">All Active Tasks</h1>\n\n//       {loading && (\n//         <div className=\"d-flex align-items-center gap-2\">\n//           <div className=\"spinner-grow text-primary\" role=\"status\"></div>\n//           <span className=\"text-primary fw-bold\">Loading...</span>\n//         </div>\n//       )}\n\n//       {error && <p className=\"text-danger\">{error}</p>}\n\n//       <div className=\"overflow-auto\" style={{ maxHeight: \"80vh\" }}>\n//         {tasks\n//           .filter((task) => task.status === \"Pending\")\n//           .map((task, index) => (\n//             <details\n//               style={{\n//                 boxShadow: \"-1px 1px 10px gray\"\n//               }}\n//               className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n//               key={task.id}\n//             >\n//               <summary\n//                 style={{ height: \"fit-content\" }}\n//                 className=\"d-flex justify-content-between aline-center form-control bg-dark  text-white\"\n//               >\n//                 <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n//                   # Task {index + 1} : {task.Taskname}\n//                 </div>\n//                 <div\n//                   style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n//                   className=\"fw-bold bg-white rounded-5 px-3 text-primary fs-6 d-flex justify-content-center aline-center flex-column\"\n//                 >\n//                   {task.department}\n//                 </div>\n//                 <div className=\"d-flex gap-2 RemainingTimeHandel justify-content-between \">\n//                   {calculateRemainingTime(task.endDate).delay ? (\n//                     <div>\n//                       <div className=\"text-center d-none\">\n//                         <div className=\"form-control  fw-bold p-0\">\n//                           {calculateRemainingTime(task.endDate).days}{\" \"}\n//                         </div>{\" \"}\n//                         <div>Day</div>\n//                       </div>\n//                       <h5 className=\"btn btn-danger p-1 px-3 fw-bold\">Late</h5>\n//                     </div>\n//                   ) : (\n//                     <div className=\"text-center\">\n//                       <div\n//                         style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                         className=\"form-control fw-bold px-1 py-0\"\n//                       >\n//                         {calculateRemainingTime(task.endDate).days}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Day</div>\n//                     </div>\n//                   )}\n//                   {calculateRemainingTime(task.endDate).delay ? (\n//                     <div className=\"text-center d-none\">\n//                       <div className=\"form-control  fw-bold p-0\">\n//                         {calculateRemainingTime(task.endDate).hours}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Min</div>\n//                     </div>\n//                   ) : (\n//                     <div className=\"text-center\">\n//                       <div\n//                         style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                         className=\"form-control fw-bold px-1 py-0\"\n//                       >\n//                         {calculateRemainingTime(task.endDate).hours}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Hrs</div>\n//                     </div>\n//                   )}\n//                   {calculateRemainingTime(task.endDate).delay ? (\n//                     <div className=\"text-center d-none\">\n//                       <div className=\"form-control fw-bold p-0\">\n//                         {calculateRemainingTime(task.endDate).minutes}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Min</div>\n//                     </div>\n//                   ) : (\n//                     <div className=\"text-center\">\n//                       <div\n//                         style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                         className=\"form-control fw-bold px-1 py-0\"\n//                       >\n//                         {calculateRemainingTime(task.endDate).minutes}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Min</div>\n//                     </div>\n//                   )}\n//                 </div>\n//               </summary>\n//               <div\n//                 style={{ position: \"relative\" }}\n//                 className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n//               >\n//                 <div style={{ height: \"fit-content\" }} className=\"form-control\">\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"text-start fs-6 form-control\"\n//                   >\n//                     <h6 className=\"fw-bold\">Task Discription</h6>\n//                     <div className=\"row justify-between\">\n//                       <div className=\"col-10\">{task.description}</div>\n//                       <div\n//                         className=\"col-2 d-flex\"\n//                         style={{ width: \"6rem\", borderRadius: \"50%\" }}\n//                       >\n//                         <CircularProgressbar\n//                           className=\"fw-bold\"\n//                           value={calculateProgress(task)}\n//                           text={`${calculateProgress(task).toFixed(2)}%`}\n//                           styles={buildStyles({\n//                             pathColor: \"#28a745\",\n//                             textColor: \"#28a745\"\n//                           })}\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                   >\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       Created By <br /> <span>{task.managerEmail}</span>\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       Start Date <br />{\" \"}\n//                       <span>\n//                         {new Date(task.startDate).toLocaleDateString()}\n//                       </span>\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       End Date <br />{\" \"}\n//                       <span>{new Date(task.endDate).toLocaleDateString()}</span>\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       <span>\n//                         Task Status <br /> {task.status}\n//                       </span>\n//                     </p>\n//                   </div>\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                   >\n//                     <p>\n//                       <span className=\"fw-bold\">Remarks : </span> {task.comment}\n//                     </p>\n//                   </div>\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                   >\n//                     <h6 className=\"fw-bold\">Forwarded Members Status</h6>\n//                     <Table striped bordered hover>\n//                       <thead>\n//                         <tr>\n//                           <th>S. No</th>\n//                           <th>Name</th>\n//                           <th>Email</th>\n//                           <th>Designation</th>\n//                           <th>Task Status</th>\n//                           <th>Remarks</th>\n//                         </tr>\n//                       </thead>\n//                       <tbody>\n//                         {task.employees.map((taskemp, i) => (\n//                           <tr key={i}>\n//                             <td\n//                               style={{\n//                                 backgroundColor:\n//                                   taskemp.emptaskStatus === \"Completed\"\n//                                     ? \"rgba(25, 201, 84, 0.436)\"\n//                                     : taskemp.emptaskStatus === \"Rejected\"\n//                                     ? \"rgba(214, 92, 44, 0.636)\"\n//                                     : \"inherit\"\n//                               }}\n//                             >\n//                               {i + 1}\n//                             </td>\n//                             <td\n//                               style={{\n//                                 backgroundColor:\n//                                   taskemp.emptaskStatus === \"Completed\"\n//                                     ? \"rgba(25, 201, 84, 0.436)\"\n//                                     : taskemp.emptaskStatus === \"Rejected\"\n//                                     ? \"rgba(214, 92, 44, 0.636)\"\n//                                     : \"inherit\"\n//                               }}\n//                             >\n//                               {taskemp.empname}\n//                             </td>\n//                             <td\n//                               style={{\n//                                 backgroundColor:\n//                                   taskemp.emptaskStatus === \"Completed\"\n//                                     ? \"rgba(25, 201, 84, 0.436)\"\n//                                     : taskemp.emptaskStatus === \"Rejected\"\n//                                     ? \"rgba(214, 92, 44, 0.636)\"\n//                                     : \"inherit\"\n//                               }}\n//                             >\n//                               {taskemp.empemail}\n//                             </td>\n//                             <td\n//                               style={{\n//                                 backgroundColor:\n//                                   taskemp.emptaskStatus === \"Completed\"\n//                                     ? \"rgba(25, 201, 84, 0.436)\"\n//                                     : taskemp.emptaskStatus === \"Rejected\"\n//                                     ? \"rgba(214, 92, 44, 0.636)\"\n//                                     : \"inherit\"\n//                               }}\n//                             >\n//                               {taskemp.empdesignation}\n//                             </td>\n//                             <td\n//                               style={{\n//                                 backgroundColor:\n//                                   taskemp.emptaskStatus === \"Completed\"\n//                                     ? \"rgba(25, 201, 84, 0.436)\"\n//                                     : taskemp.emptaskStatus === \"Rejected\"\n//                                     ? \"rgba(214, 92, 44, 0.636)\"\n//                                     : \"inherit\"\n//                               }}\n//                             >\n//                               {taskemp.emptaskStatus}\n//                             </td>\n//                             <td\n//                               style={{\n//                                 backgroundColor:\n//                                   taskemp.emptaskStatus === \"Completed\"\n//                                     ? \"rgba(25, 201, 84, 0.436)\"\n//                                     : taskemp.emptaskStatus === \"Rejected\"\n//                                     ? \"rgba(214, 92, 44, 0.636)\"\n//                                     : \"inherit\"\n//                               }}\n//                             >\n//                               {taskemp.empTaskComment}\n//                             </td>\n//                           </tr>\n//                         ))}\n//                       </tbody>\n//                     </Table>\n//                   </div>\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                   >\n//                     <button\n//                       className=\"btn btn-primary col-2 d-flex justify-center aline-center gap-2\"\n//                       onClick={() => forwordTaskToEmployee(task._id)}\n//                     >\n//                       <IoCheckmarkDoneSharp /> Forward Task\n//                     </button>\n//                     <button\n//                       className=\"btn btn-warning col-2 d-flex justify-center aline-center gap-2\"\n//                       onClick={() => askStatus(task._id)}\n//                     >\n//                       <PiInfoFill /> Ask Status\n//                     </button>\n//                     <button\n//                       className=\"btn btn-success col-2 d-flex justify-center aline-center gap-2\"\n//                       onClick={() => completeTask(task._id)}\n//                       disabled={calculateProgress(task) !== 100}\n//                     >\n//                       <FaCheck />\n//                       Complete Task\n//                     </button>\n//                   </div>\n//                 </div>\n//               </div>\n//             </details>\n//           ))}\n//       </div>\n\n//       <Modal\n//         fullscreen={true}\n//         show={modalShow}\n//         onHide={() => setModalShow(false)}\n//       >\n//         <Modal.Header closeButton>\n//           <Modal.Title>Forward Task to Employees</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <div className=\"row\">\n//             <form className=\"d-flex col-8 flex-column gap-3\">\n//               <input\n//                 className=\"w-100 py-1 px-2 rounded-5 border\"\n//                 type=\"search\"\n//                 name=\"\"\n//                 placeholder=\"Search...\"\n//                 id=\"\"\n//                 value={inputEmail}\n//                 onChange={(e) => {\n//                   handleInputChange(e);\n//                   handleSearch(e);\n//                 }}\n//               />\n//               <div>\n//                 <div className=\" p-2\">\n//                   {\" \"}\n//                   <input\n//                     type=\"checkbox\"\n//                     name=\"\"\n//                     id=\"\"\n//                     onChange={toggleSelectAll}\n//                     checked={selectAll}\n//                   />{\" \"}\n//                   <span>Select All</span>\n//                 </div>\n//                 <table class=\"table\">\n//                   <thead>\n//                     <tr>\n//                       <th scope=\"col\">Select</th>\n//                       <th scope=\"col\">Name</th>\n//                       <th scope=\"col\">Email</th>\n//                       <th scope=\"col\">Contact</th>\n//                       <th scope=\"col\">Designation</th>\n//                     </tr>\n//                   </thead>\n\n//                   <tbody>\n//                     {rowData.map((row, index) => (\n//                       <tr key={index}>\n//                         <th scope=\"row\">\n//                           <input\n//                             type=\"checkbox\"\n//                             name=\"\"\n//                             id=\"\"\n//                             onChange={() => addSelectedEmployee(row)}\n//                             checked={selectedEmployees.some(\n//                               (emp) => emp.Email === row.Email\n//                             )}\n//                           />\n//                         </th>\n//                         <td>{row.FirstName}</td>\n//                         <td>{row.Email}</td>\n//                         <td>{row.ContactNo}</td>\n//                         <td>{row.PositionName}</td>\n//                       </tr>\n//                     ))}\n//                   </tbody>\n//                 </table>\n//               </div>\n//             </form>\n//             <div className=\"d-flex flex-column col-4 gap-2\">\n//               <div className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\">\n//                 <div>\n//                   <span className=\"fw-bold\">Selected Employees:</span>\n//                   {selectedEmployees.map((employee, index) => (\n//                     <div key={index} className=\"d-flex\">\n//                       <span\n//                         style={{\n//                           boxShadow: \"-3px 3px 5px rgba(204, 201, 201, 0.767)\",\n//                           width: \"fit-content\"\n//                         }}\n//                         className=\"selected-employee-email d-flex btn gap-2 aline-center  btn-light py-1 px-2 m-1\"\n//                         onClick={() => removeSelectedEmployee(employee.Email)}\n//                       >\n//                         {employee.FirstName} - {employee.PositionName}\n//                         <span className=\"text-danger d-none\">\n//                           <MdDeleteForever />\n//                         </span>\n//                       </span>\n//                     </div>\n//                   ))}\n//                 </div>\n//               </div>\n//               <button\n//                 className=\"btn  btn-primary\"\n//                 onClick={() =>\n//                   forwardTaskToEmployees(selectedTaskId, selectedEmployees)\n//                 }\n//                 disabled={isForwardButtonDisabled}\n//               >\n//                 Forward Task to Employees\n//               </button>\n//               <button\n//                 className=\"btn btn-secondary\"\n//                 onClick={() => setModalShow(false)}\n//               >\n//                 Cancel\n//               </button>\n//             </div>\n//           </div>\n//         </Modal.Body>\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default ManagerActiveTask;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PiInfoFill } from \"react-icons/pi\";\nimport { FaCheck } from \"react-icons/fa6\";\nimport { IoCheckmarkDoneSharp } from \"react-icons/io5\";\nimport { MdDeleteForever } from \"react-icons/md\";\n// import { toast } from \"react-toastify\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Table from \"react-bootstrap/esm/Table\";\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\nimport { BsFiletypeDoc } from \"react-icons/bs\";\n\nconst ManagerActiveTask = () => {\n  const [modalShow, setModalShow] = React.useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [, setIsCompleting] = useState(false);\n  const [getEmployee, setGetEmployee] = useState([]);\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\n  const [inputEmail, setInputEmail] = useState(\"\");\n  const [originalEmployeeData, setOriginalEmployeeData] = useState([]);\n  const [selectedTaskId, setSelectedTaskId] = useState(null);\n  const [selectAll, setSelectAll] = useState(false);\n  const [isForwardButtonDisabled, setIsForwardButtonDisabled] = useState(true);\n\n  const [employeeData, setEmployeeData] = useState([]);\n  const [searchData, setSearchData] = useState(\"\");\n  const [rowData, setRowData] = useState([]);\n  const [rowIndex, setRowIndex] = useState(null);\n  const [moreInfo, setMoreInfo] = useState(false);\n  const [taskDepartment, setTaskDepartment] = useState(\"\");\n  const loadEmployeeData = () => {\n    axios\n      .get(\"http://localhost:4000/api/employee\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        const employeeObj = response.data;\n        console.log(\"response\", response.data);\n        setEmployeeData(employeeObj);\n        setLoading(false);\n        const rowDataT = employeeObj.map((data) => {\n          return {\n            data,\n            Email: data[\"Email\"],\n            department: data[\"department\"][0][\"DepartmentName\"],\n            FirstName: data[\"FirstName\"] + \"\" + data[\"LastName\"],\n            ContactNo: data[\"ContactNo\"],\n            PositionName: data[\"position\"][0]\n              ? data[\"position\"][0][\"PositionName\"]\n              : \"\"\n          };\n        });\n        console.log(rowDataT);\n        setRowData(rowDataT);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    loadEmployeeData();\n  }, []);\n\n  const calculateRemainingTime = (endDate) => {\n    const now = new Date();\n    const endDateTime = new Date(endDate);\n    let remainingTime = endDateTime - now;\n\n    if (remainingTime < 0) {\n      // If remaining time is negative, consider it as delay\n      remainingTime = Math.abs(remainingTime);\n      return { delay: true, days: 0, hours: 0, minutes: 0 };\n    } else {\n      // Calculate remaining days, hours, minutes, and seconds\n      const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(\n        (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const minutes = Math.floor(\n        (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\n      );\n      return { delay: false, days, hours, minutes };\n    }\n  };\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\");\n      // console.log(response.data)\n      setTasks(response.data);\n      setError(null);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error.message);\n      setError(\"Error fetching tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    console.log(\"getEmployee:\", getEmployee);\n  }, [getEmployee]);\n\n  const forwordTaskToEmployee = async (taskId, dep) => {\n    let filteredData = rowData.filter((val) => {\n      return val.department === dep;\n    });\n    setRowData(filteredData);\n    setTaskDepartment(dep);\n    setSelectedTaskId(taskId);\n    setModalShow(true);\n  };\n\n  const forwardTaskToEmployees = async (selectedTaskId) => {\n    try {\n      for (const employee of selectedEmployees) {\n        try {\n          const employeeData = {\n            empname: employee.FirstName,\n            empemail: employee.Email,\n            empdesignation: employee.PositionName,\n            emptaskStatus: \"Task Assigned\"\n          };\n\n          await axios.post(\n            `http://localhost:4000/api/tasks/${selectedTaskId}/employees`,\n            {\n              employees: [employeeData]\n            }\n          );\n        } catch (error) {\n          console.error(\n            `Error forwarding task to ${employee.FirstName}:`,\n            error.message\n          );\n        }\n      }\n\n      fetchData();\n\n      setSelectedEmployees([]);\n      setModalShow(false);\n    } catch (error) {\n      console.error(\"Error forwarding task:\", error.message);\n      alert(\"Failed to forward task. Please try again.\");\n    }\n  };\n\n  const askStatus = async (taskId) => {};\n  const completeTask = async (taskId) => {\n    try {\n      setIsCompleting(true);\n\n      const CompleteRemarks = prompt(\"Enter remarks to Complete Task:\");\n\n      if (CompleteRemarks === null) {\n        setIsCompleting(false);\n        return;\n      }\n\n      await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n        status: \"Completed\",\n        comment: CompleteRemarks\n      });\n\n      alert(\"Task completed successfully!\");\n\n      fetchData();\n    } catch (error) {\n      console.error(\"Error completing task:\", error.message);\n      alert(\"Failed to complete task. Please try again.\");\n    } finally {\n      setIsCompleting(false);\n    }\n  };\n\n  const handleSearch = (e) => {\n    const searchValue = e.target.value.toLowerCase();\n\n    if (searchValue === \"\") {\n      setGetEmployee(originalEmployeeData);\n    } else {\n      const filteredEmployees = originalEmployeeData.filter(\n        (employee) =>\n          employee.name.toLowerCase().includes(searchValue) ||\n          employee.email.toLowerCase().includes(searchValue) ||\n          employee.designation.toLowerCase().includes(searchValue)\n      );\n\n      setGetEmployee(filteredEmployees);\n    }\n  };\n\n  const handleInputChange = (e) => {\n    setInputEmail(e.target.value);\n  };\n\n  const removeSelectedEmployee = (email) => {\n    setSelectedEmployees(\n      selectedEmployees.filter((employee) => employee.Email !== email)\n    );\n  };\n\n  const addSelectedEmployee = (employee) => {\n    const isChecked = selectedEmployees.some(\n      (emp) => emp.Email === employee.Email\n    );\n\n    if (isChecked) {\n      setSelectedEmployees((prevEmployees) =>\n        prevEmployees.filter((emp) => emp.Email !== employee.Email)\n      );\n    } else {\n      setSelectedEmployees([...selectedEmployees, employee]);\n    }\n    if (selectedEmployees.length < 0) {\n      setIsForwardButtonDisabled(true);\n    } else {\n      setIsForwardButtonDisabled(false); // Disable the button when there is at least one selected employee\n    }\n\n    setInputEmail(\"\");\n  };\n\n  const toggleSelectAll = () => {\n    setSelectAll(!selectAll);\n    setSelectedEmployees(selectAll ? [] : [...rowData]);\n  };\n\n  const calculateProgress = (task) => {\n    const totalEmployees =\n      task.employees.length -\n      task.employees.filter((emp) => emp.emptaskStatus === \"Rejected\").length;\n    const completedTasks = task.employees.filter(\n      (emp) => emp.emptaskStatus === \"Completed\"\n    ).length;\n    return (completedTasks / totalEmployees) * 100;\n  };\n  return (\n    <div className=\"py-2\">\n      <h1 className=\"fs-3 fw-bolder text-uppercase mb-4\">All Active Tasks</h1>\n\n      {loading && (\n        <div className=\"d-flex align-items-center gap-2\">\n          <div className=\"spinner-grow text-primary\" role=\"status\"></div>\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n\n      {error && <p className=\"text-danger\">{error}</p>}\n\n      <div className=\"overflow-auto\" style={{ maxHeight: \"80vh\" }}>\n        {tasks\n          .filter((task) => task.status === \"Pending\")\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{ height: \"fit-content\" }}\n                className=\"d-flex justify-content-between aline-center form-control bg-dark  text-white\"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-primary fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div className=\"d-flex gap-2 RemainingTimeHandel justify-content-between \">\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div>\n                      <div className=\"text-center d-none\">\n                        <div className=\"form-control  fw-bold p-0\">\n                          {calculateRemainingTime(task.endDate).days}{\" \"}\n                        </div>{\" \"}\n                        <div>Day</div>\n                      </div>\n                      <h5 className=\"btn btn-danger p-1 px-3 fw-bold\">Late</h5>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).days}{\" \"}\n                      </div>{\" \"}\n                      <div>Day</div>\n                    </div>\n                  )}\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div className=\"text-center d-none\">\n                      <div className=\"form-control  fw-bold p-0\">\n                        {calculateRemainingTime(task.endDate).hours}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).hours}{\" \"}\n                      </div>{\" \"}\n                      <div>Hrs</div>\n                    </div>\n                  )}\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div className=\"text-center d-none\">\n                      <div className=\"form-control fw-bold p-0\">\n                        {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  )}\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"text-start fs-6 form-control\"\n                  >\n                    <h6 className=\"fw-bold\">Task Discription</h6>\n                    <div className=\"row justify-between\">\n                      <div className=\"col-10\">{task.description}</div>\n                      <div\n                        className=\"col-2 d-flex\"\n                        style={{ width: \"6rem\", borderRadius: \"50%\" }}\n                      >\n                        <CircularProgressbar\n                          className=\"fw-bold\"\n                          value={calculateProgress(task)}\n                          text={`${calculateProgress(task).toFixed(2)}%`}\n                          styles={buildStyles({\n                            pathColor: \"#28a745\",\n                            textColor: \"#28a745\"\n                          })}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Created By <br /> <span>{task.managerEmail}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Start Date <br />{\" \"}\n                      <span>\n                        {new Date(task.startDate).toLocaleDateString()}\n                      </span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      End Date <br />{\" \"}\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <span>\n                        Task Status <br /> {task.status}\n                      </span>\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p>\n                      <span className=\"fw-bold\">Remarks : </span> {task.comment}\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <h6 className=\"fw-bold\">Forwarded Members Status</h6>\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>S. No</th>\n                          <th>Name</th>\n                          <th>Email</th>\n                          <th>Designation</th>\n                          <th>Task Status</th>\n                          <th>Remarks</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {task.employees.map((taskemp, i) => (\n                          <tr key={i}>\n                            <td\n                              style={{\n                                backgroundColor:\n                                  taskemp.emptaskStatus === \"Completed\"\n                                    ? \"rgba(25, 201, 84, 0.436)\"\n                                    : taskemp.emptaskStatus === \"Rejected\"\n                                    ? \"rgba(214, 92, 44, 0.636)\"\n                                    : \"inherit\"\n                              }}\n                            >\n                              {i + 1}\n                            </td>\n                            <td\n                              style={{\n                                backgroundColor:\n                                  taskemp.emptaskStatus === \"Completed\"\n                                    ? \"rgba(25, 201, 84, 0.436)\"\n                                    : taskemp.emptaskStatus === \"Rejected\"\n                                    ? \"rgba(214, 92, 44, 0.636)\"\n                                    : \"inherit\"\n                              }}\n                            >\n                              {taskemp.empname}\n                            </td>\n                            <td\n                              style={{\n                                backgroundColor:\n                                  taskemp.emptaskStatus === \"Completed\"\n                                    ? \"rgba(25, 201, 84, 0.436)\"\n                                    : taskemp.emptaskStatus === \"Rejected\"\n                                    ? \"rgba(214, 92, 44, 0.636)\"\n                                    : \"inherit\"\n                              }}\n                            >\n                              {taskemp.empemail}\n                            </td>\n                            <td\n                              style={{\n                                backgroundColor:\n                                  taskemp.emptaskStatus === \"Completed\"\n                                    ? \"rgba(25, 201, 84, 0.436)\"\n                                    : taskemp.emptaskStatus === \"Rejected\"\n                                    ? \"rgba(214, 92, 44, 0.636)\"\n                                    : \"inherit\"\n                              }}\n                            >\n                              {taskemp.empdesignation}\n                            </td>\n                            <td\n                              style={{\n                                backgroundColor:\n                                  taskemp.emptaskStatus === \"Completed\"\n                                    ? \"rgba(25, 201, 84, 0.436)\"\n                                    : taskemp.emptaskStatus === \"Rejected\"\n                                    ? \"rgba(214, 92, 44, 0.636)\"\n                                    : \"inherit\"\n                              }}\n                            >\n                              {taskemp.emptaskStatus}\n                            </td>\n                            <td\n                              style={{\n                                backgroundColor:\n                                  taskemp.emptaskStatus === \"Completed\"\n                                    ? \"rgba(25, 201, 84, 0.436)\"\n                                    : taskemp.emptaskStatus === \"Rejected\"\n                                    ? \"rgba(214, 92, 44, 0.636)\"\n                                    : \"inherit\"\n                              }}\n                            >\n                              {taskemp.empTaskComment}\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </Table>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <button\n                      className=\"btn btn-primary col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() =>\n                        forwordTaskToEmployee(task._id, task.department)\n                      }\n                    >\n                      <IoCheckmarkDoneSharp /> Forward Task\n                    </button>\n                    <button\n                      className=\"btn btn-warning col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() => askStatus(task._id)}\n                    >\n                      <BsFiletypeDoc /> Ask Status\n                    </button>\n                    <button\n                      className=\"btn btn-success col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() => completeTask(task._id)}\n                      disabled={calculateProgress(task) !== 100}\n                    >\n                      <FaCheck />\n                      Complete Task\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n\n      <Modal\n        fullscreen={true}\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Forward Task to Employees</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row\">\n            <form className=\"d-flex col-8 flex-column gap-3\">\n              <input\n                className=\"w-100 py-1 px-2 rounded-5 border\"\n                type=\"search\"\n                name=\"\"\n                placeholder=\"Search...\"\n                id=\"\"\n                value={inputEmail}\n                onChange={(e) => {\n                  handleInputChange(e);\n                  handleSearch(e);\n                }}\n              />\n              <div>\n                <div className=\" p-2\">\n                  {\" \"}\n                  <input\n                    type=\"checkbox\"\n                    name=\"\"\n                    id=\"\"\n                    onChange={toggleSelectAll}\n                    checked={selectAll}\n                  />{\" \"}\n                  <span>Select All</span>\n                </div>\n                <table class=\"table\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">Select</th>\n                      <th scope=\"col\">Name</th>\n                      <th scope=\"col\">Email</th>\n                      <th scope=\"col\">Contact</th>\n                      <th scope=\"col\">Designation</th>\n                    </tr>\n                  </thead>\n\n                  <tbody>\n                    {rowData.map((row, index) => (\n                      <tr key={index}>\n                        <th scope=\"row\">\n                          <input\n                            type=\"checkbox\"\n                            name=\"\"\n                            id=\"\"\n                            onChange={() => addSelectedEmployee(row)}\n                            checked={selectedEmployees.some(\n                              (emp) => emp.Email === row.Email\n                            )}\n                          />\n                        </th>\n                        <td>{row.FirstName}</td>\n                        <td>{row.Email}</td>\n                        <td>{row.ContactNo}</td>\n                        <td>{row.PositionName}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </form>\n            <div className=\"d-flex flex-column col-4 gap-2\">\n              <div className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\">\n                <div>\n                  <span className=\"fw-bold\">Selected Employees:</span>\n                  {selectedEmployees.map((employee, index) => (\n                    <div key={index} className=\"d-flex\">\n                      <span\n                        style={{\n                          boxShadow: \"-3px 3px 5px rgba(204, 201, 201, 0.767)\",\n                          width: \"fit-content\"\n                        }}\n                        className=\"selected-employee-email d-flex btn gap-2 aline-center  btn-light py-1 px-2 m-1\"\n                        onClick={() => removeSelectedEmployee(employee.Email)}\n                      >\n                        {employee.FirstName} - {employee.PositionName}\n                        <span className=\"text-danger d-none\">\n                          <MdDeleteForever />\n                        </span>\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <button\n                className=\"btn  btn-primary\"\n                onClick={() =>\n                  forwardTaskToEmployees(selectedTaskId, selectedEmployees)\n                }\n                disabled={isForwardButtonDisabled}\n              >\n                Forward Task to Employees\n              </button>\n              <button\n                className=\"btn btn-secondary\"\n                onClick={() => setModalShow(false)}\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ManagerActiveTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\ManagerTaskManagement\\ManagerCencelledTask.jsx",["1051","1052"],"import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n\nconst ManagerCencelledTask = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\", {\n        params: { status: \"Cancelled\" }\n      });\n\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching cancelled tasks:\", error.message);\n      setError(\"Error fetching cancelled tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const fetchDataWithTimeout = async () => {\n      await fetchData();\n    };\n\n    fetchDataWithTimeout();\n  }, []);\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\n        ❌ Cancelled Task\n      </h1>\n      <p className=\"text-muted\">You can view all Cancelled task here!</p>{\" \"}\n      {loading && (\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          className=\"d-flex aline-center gap-2\"\n        >\n          <div\n            className=\"spinner-grow bg-primary\"\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            role=\"status\"\n          ></div>\n\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n      >\n        {tasks\n          .filter((task) => task.status === \"Cancelled\")\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{\n                  height: \"fit-content\",\n                  background:\n                    \"linear-gradient(165deg,#11009E, #700B97, 90%, #C84B31)\"\n                }}\n                className=\"d-flex justify-content-between aline-center form-control text-white\"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-danger fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div className=\"\">\n                  <p className=\"btn btn-danger m-auto fw-bold\">Cancelled</p>\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div\n                  style={{\n                    width: \"99.4%\",\n                    height: \"100%\",\n                    zIndex: \"5\",\n                    backgroundColor: \"rgba(128, 128, 128, 0.422)\",\n                    textShadow: \"-5px 5px 5px rgba(128, 128, 128, 0.422)\"\n                  }}\n                  className=\"watermark form-control position-absolute d-flex justify-content-center aline-center\"\n                >\n                  <h1 className=\"text-uppercase text-light fw-bolder\">\n                    c a n c e l l e d\n                  </h1>\n                </div>\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <div\n                    style={{ position: \"relative\" }}\n                    className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n                  >\n                    <div\n                      style={{\n                        width: \"99.4%\",\n                        height: \"100%\",\n                        zIndex: \"5\",\n                        backgroundColor: \"rgba(128, 128, 128, 0.422)\",\n                        textShadow: \"-5px 5px 5px rgba(128, 128, 128, 0.422)\"\n                      }}\n                      className=\"watermark form-control   position-absolute d-flex justify-content-center aline-center\"\n                    >\n                      <h1 className=\"text-uppercase text-light fw-bolder\">\n                        c a n c e l l e d\n                      </h1>\n                    </div>\n                    <div\n                      style={{ height: \"fit-content\" }}\n                      className=\"form-control\"\n                    >\n                      <p\n                        style={{ height: \"fit-content\" }}\n                        className=\"text-start fs-6 form-control\"\n                      >\n                        <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                        {task.description}\n                      </p>\n                      <div\n                        style={{ height: \"fit-content\" }}\n                        className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                      >\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          Task Durations <br />{\" \"}\n                          <span>{task.duration} days</span>{\" \"}\n                        </p>\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          Created By <br /> <span> {task.managerEmail}</span>\n                        </p>\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          Start Date <br />{\" \"}\n                          <span>\n                            {new Date(task.startDate).toLocaleDateString()}\n                          </span>\n                        </p>\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          End Date <br />{\" \"}\n                          <span>\n                            {new Date(task.endDate).toLocaleDateString()}\n                          </span>\n                        </p>\n                        <p\n                          style={{ fontSize: \"1rem\" }}\n                          className=\"col-6 col-sm-6 col-md-2\"\n                        >\n                          <span>\n                            Task Status <br /> {task.status}\n                          </span>\n                        </p>\n                      </div>\n                      <div\n                        style={{ height: \"fit-content\" }}\n                        className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                      >\n                        <p>\n                          <span className=\"fw-bold\">Remarks : </span>{\" \"}\n                          {task.comment}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ManagerCencelledTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\ManagerTaskManagement\\ManagerNewTask.jsx",["1053","1054"],"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { MdCancel } from \"react-icons/md\";\n// import { IoCheckmarkDoneSharp } from \"react-icons/io5\";\n// // import { toast } from \"react-toastify\";\n\n// const ManagerNewTask = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [, setIsAccepted] = useState(false);\n//   const [, setIsRejected] = useState(false);\n\n//   const calculateRemainingTime = (endDate) => {\n//     const now = new Date();\n//     const endDateTime = new Date(endDate);\n//     let remainingTime = endDateTime - now;\n\n//     if (remainingTime < 0) {\n//       // If remaining time is negative, consider it as delay\n//       remainingTime = Math.abs(remainingTime);\n//       return { delay: true, days: 0, hours: 0, minutes: 0 };\n//     } else {\n//       // Calculate remaining days, hours, minutes, and seconds\n//       const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\n//       const hours = Math.floor(\n//         (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n//       );\n//       const minutes = Math.floor(\n//         (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\n//       );\n//       return { delay: false, days, hours, minutes };\n//     }\n//   };\n//   const fetchData = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:4000/api/tasks\");\n//       setTasks(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching tasks:\", error.message);\n//       setError(\"Error fetching tasks. Please try again later.\");\n//     } finally {\n//       setLoading(false);\n//       // Schedule the next update after 1 minute (adjust as needed)\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchData();\n\n//     return () => clearTimeout();\n//   }, []);\n\n//   const AcceptTask = async (taskId) => {\n//     try {\n//       setIsAccepted(true);\n\n//       // Prompt the user for Accept remarks\n//       const AcceptTaskRemark = prompt(\"Enter remarks for Accept Task:\");\n\n//       if (AcceptTaskRemark === null) {\n//         // If the user clicks Cancel in the prompt, do nothing\n//         setIsAccepted(false);\n//         return;\n//       }\n\n//       // Update the task status to \"Cancelled\" in the database\n//       await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n//         status: \"Pending\",\n//         comment: AcceptTaskRemark\n//       });\n\n//       // Display success notification\n//       alert(\"Task Accepteed successfully!\");\n\n//       // Update the UI by fetching the latest tasks\n//       fetchData();\n//     } catch (error) {\n//       console.error(\"Error canceling task:\", error.message);\n//       alert(\"Failed to cancel task. Please try again.\");\n//     } finally {\n//       setIsAccepted(false);\n//     }\n//   };\n//   const RejectTask = async (taskId) => {\n//     try {\n//       setIsRejected(true);\n//       const RejectRemarks = prompt(\"Enter remarks for Reject Task:\");\n\n//       if (RejectRemarks === null) {\n//         setIsRejected(false);\n//         return;\n//       }\n\n//       await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n//         status: \"Rejected\",\n//         comment: RejectRemarks\n//       });\n\n//       alert(\"Task Rejected\");\n\n//       fetchData();\n//     } catch (error) {\n//       console.error(\"Error Rejecting task:\", error.message);\n//       alert(\"Failed to Reject task. Please try again.\");\n//     } finally {\n//       setIsRejected(false);\n//     }\n//   };\n//   // Add this line inside the ManagerNewTask component, before the return statement\n//   const newTasks = tasks.filter((task) => task.status === \"Assigned\");\n//   const totalNewTasks = newTasks.length;\n\n//   return (\n//     <div className=\"p-4\">\n//       <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">\n//         ⭐ New Task ({totalNewTasks}){\" \"}\n//       </h1>\n//       <p className=\"text-muted\">You can view all New task here!</p>{\" \"}\n//       <h1 className=\"fs-3 fw-bolder text-uppercase \"></h1>\n//       {loading && (\n//         <div\n//           style={{ width: \"100%\", height: \"100%\" }}\n//           className=\"d-flex aline-center gap-2\"\n//         >\n//           <div\n//             className=\"spinner-grow bg-primary\"\n//             style={{ width: \"1rem\", height: \"1rem\" }}\n//             role=\"status\"\n//           ></div>\n\n//           <span className=\"text-primary fw-bold\">Loading...</span>\n//         </div>\n//       )}\n//       <div\n//         style={{\n//           overflowY: \"scroll\",\n//           height: \"80vh\",\n//           scrollbarWidth: \"thin\",\n//           scrollbarGutter: \"stable\",\n//           scrollMargin: \"1rem\"\n//         }}\n//       >\n//         {tasks\n//           .filter((task) => task.status === \"Assigned\")\n//           .map((task, index) => (\n//             <details\n//               style={{\n//                 boxShadow: \"-1px 1px 10px gray\"\n//               }}\n//               className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n//               key={task.id}\n//             >\n//               <summary\n//                 style={{\n//                   height: \"fit-content\",\n//                   background:\n//                     \"linear-gradient(165deg,#11009E, #700B97, 90%, #C84B31)\"\n//                 }}\n//                 className=\"d-flex justify-content-between aline-center form-control text-white \"\n//               >\n//                 <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n//                   # Task {index + 1} : {task.Taskname}\n//                 </div>\n//                 <div\n//                   style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n//                   className=\"fw-bold bg-white rounded-5 px-3 text-primary fs-6 d-flex justify-content-center aline-center flex-column\"\n//                 >\n//                   {task.department}\n//                 </div>\n//                 <div className=\"d-flex gap-2 RemainingTimeHandel justify-content-between \">\n//                   {calculateRemainingTime(task.endDate).delay ? (\n//                     <div>\n//                       <div className=\"text-center d-none\">\n//                         <div className=\"form-control  fw-bold p-0\">\n//                           {calculateRemainingTime(task.endDate).days}{\" \"}\n//                         </div>{\" \"}\n//                         <div>Day</div>\n//                       </div>\n//                       <h5 className=\"btn btn-danger p-1 px-3 fw-bold\">Late</h5>\n//                     </div>\n//                   ) : (\n//                     <div className=\"text-center\">\n//                       <div\n//                         style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                         className=\"form-control fw-bold px-1 py-0\"\n//                       >\n//                         {calculateRemainingTime(task.endDate).days}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Day</div>\n//                     </div>\n//                   )}\n//                   {calculateRemainingTime(task.endDate).delay ? (\n//                     <div className=\"text-center d-none\">\n//                       <div className=\"form-control  fw-bold p-0\">\n//                         {calculateRemainingTime(task.endDate).hours}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Min</div>\n//                     </div>\n//                   ) : (\n//                     <div className=\"text-center\">\n//                       <div\n//                         style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                         className=\"form-control fw-bold px-1 py-0\"\n//                       >\n//                         {calculateRemainingTime(task.endDate).hours}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Hrs</div>\n//                     </div>\n//                   )}\n//                   {calculateRemainingTime(task.endDate).delay ? (\n//                     <div className=\"text-center d-none\">\n//                       <div className=\"form-control fw-bold p-0\">\n//                         {calculateRemainingTime(task.endDate).minutes}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Min</div>\n//                     </div>\n//                   ) : (\n//                     <div className=\"text-center\">\n//                       <div\n//                         style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n//                         className=\"form-control fw-bold px-1 py-0\"\n//                       >\n//                         {calculateRemainingTime(task.endDate).minutes}{\" \"}\n//                       </div>{\" \"}\n//                       <div>Min</div>\n//                     </div>\n//                   )}\n//                 </div>\n//               </summary>\n//               <div\n//                 style={{ position: \"relative\" }}\n//                 className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n//               >\n//                 <div style={{ height: \"fit-content\" }} className=\"form-control\">\n//                   <p\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"text-start fs-6 form-control\"\n//                   >\n//                     <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n//                     {task.description}\n//                   </p>\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                   >\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       Created By <br /> <span>{task.managerEmail}</span>\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       Start Date <br />{\" \"}\n//                       <span>\n//                         {new Date(task.startDate).toLocaleDateString()}\n//                       </span>\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       End Date <br />{\" \"}\n//                       <span>{new Date(task.endDate).toLocaleDateString()}</span>\n//                     </p>\n//                     <p\n//                       style={{ fontSize: \"1rem\" }}\n//                       className=\"col-6 col-sm-6 col-md-2\"\n//                     >\n//                       <span>\n//                         Task Status <br /> {task.status}\n//                       </span>\n//                     </p>\n//                   </div>\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                   >\n//                     <p>\n//                       <span className=\"fw-bold\">Remarks : </span> {task.comment}\n//                     </p>\n//                   </div>\n//                   <div\n//                     style={{ height: \"fit-content\" }}\n//                     className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n//                   >\n//                     <button\n//                       className=\"btn btn-info col-2 d-flex justify-center aline-center gap-2\"\n//                       onClick={() => AcceptTask(task._id)}\n//                     >\n//                       <IoCheckmarkDoneSharp />\n//                       Accept\n//                     </button>\n//                     <button\n//                       className=\"btn btn-primary col-2 d-flex justify-center aline-center gap-2\"\n//                       onClick={() => RejectTask(task._id)}\n//                     >\n//                       <MdCancel />\n//                       Reject\n//                     </button>\n//                   </div>\n//                 </div>\n//               </div>\n//             </details>\n//           ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ManagerNewTask;\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { MdCancel } from \"react-icons/md\";\nimport { IoCheckmarkDoneSharp } from \"react-icons/io5\";\nimport { v4 as uuidv4 } from 'uuid';\n// import { toast } from \"react-toastify\";\nimport { BsFiletypeDoc } from \"react-icons/bs\";\nimport { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\n\nconst ManagerNewTask = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [, setIsAccepted] = useState(false);\n  const [, setIsRejected] = useState(false);\n  const taskId = uuidv4();\n  const email = localStorage.getItem(\"Email\");\n  const {socket} = useContext(AttendanceContext);\n\n\n  const calculateRemainingTime = (endDate) => {\n    const now = new Date();\n    const endDateTime = new Date(endDate);\n    let remainingTime = endDateTime - now;\n\n    if (remainingTime < 0) {\n      // If remaining time is negative, consider it as delay\n      remainingTime = Math.abs(remainingTime);\n      return { delay: true, days: 0, hours: 0, minutes: 0 };\n    } else {\n      // Calculate remaining days, hours, minutes, and seconds\n      const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(\n        (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const minutes = Math.floor(\n        (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\n      );\n      return { delay: false, days, hours, minutes };\n    }\n  };\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/tasks\");\n      console.log(response.data);\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error.message);\n      setError(\"Error fetching tasks. Please try again later.\");\n    } finally {\n      setLoading(false);\n      // Schedule the next update after 1 minute (adjust as needed)\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n\n    return () => clearTimeout();\n  }, []);\n\n  const AcceptTask = async (taskID, taskName, adminMail) => {\n    try {\n      setIsAccepted(true);\n\n      // Prompt the user for Accept remarks\n      const AcceptTaskRemark = prompt(\"Enter remarks for Accept Task:\");\n\n      if (AcceptTaskRemark === null) {\n        // If the user clicks Cancel in the prompt, do nothing\n        setIsAccepted(false);\n        return;\n      }\n\n      // Update the task status to \"Cancelled\" in the database\n      await axios.put(`http://localhost:4000/api/tasks/${taskID}`, {\n        status: \"Pending\",\n        comment: AcceptTaskRemark\n      });\n\n      // Display success notification\n      alert(\"Task Accepteed successfully!\");\n      const data = {\n        taskId,\n        status: \"unseen\",\n        path: \"taskstatus\",\n        senderMail: email,\n        taskName,\n        message: `${taskName} Accepted by ${email}`,\n        adminMail,\n        Account: 1,\n        taskStatus: \"Accepted\",\n      \n      }\n            // Update the UI by fetching the latest tasks;\n            socket.emit(\"adminTaskNotification\", data);\n      // Update the UI by fetching the latest tasks\n      fetchData();\n    } catch (error) {\n      console.error(\"Error canceling task:\", error.message);\n      alert(\"Failed to cancel task. Please try again.\");\n    } finally {\n      setIsAccepted(false);\n    }\n  };\n  const RejectTask = async (taskId) => {\n    try {\n      setIsRejected(true);\n      const RejectRemarks = prompt(\"Enter remarks for Reject Task:\");\n\n      if (RejectRemarks === null) {\n        setIsRejected(false);\n        return;\n      }\n\n      await axios.put(`http://localhost:4000/api/tasks/${taskId}`, {\n        status: \"Rejected\",\n        comment: RejectRemarks\n      });\n\n      alert(\"Task Rejected\");\n\n      fetchData();\n    } catch (error) {\n      console.error(\"Error Rejecting task:\", error.message);\n      alert(\"Failed to Reject task. Please try again.\");\n    } finally {\n      setIsRejected(false);\n    }\n  };\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"fs-2 text-muted fw-bolder text-uppercase\">⭐ New Task</h1>\n      <p className=\"text-muted\">You can view all New task here!</p>{\" \"}\n      <h1 className=\"fs-3 fw-bolder text-uppercase \"></h1>\n      {loading && (\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          className=\"d-flex aline-center gap-2\"\n        >\n          <div\n            className=\"spinner-grow bg-primary\"\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            role=\"status\"\n          ></div>\n\n          <span className=\"text-primary fw-bold\">Loading...</span>\n        </div>\n      )}\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"80vh\",\n          scrollbarWidth: \"thin\",\n          scrollbarGutter: \"stable\",\n          scrollMargin: \"1rem\"\n        }}\n      >\n        {tasks\n          .filter(\n            (task) => task.status === \"Assigned\" && task.managerEmail === email\n          )\n          .map((task, index) => (\n            <details\n              style={{\n                boxShadow: \"-1px 1px 10px gray\"\n              }}\n              className=\"p-1 position-relative mt-3 fs-4 rounded mx-3\"\n              key={task.id}\n            >\n              <summary\n                style={{\n                  height: \"fit-content\",\n                  background:\n                    \"linear-gradient(165deg,#11009E, #700B97, 90%, #C84B31)\"\n                }}\n                className=\"d-flex justify-content-between aline-center form-control text-white \"\n              >\n                <div className=\"fw-bold fs-5 d-flex justify-content-center flex-column\">\n                  # Task {index + 1} : {task.Taskname}\n                </div>\n                <div\n                  style={{ position: \"absolute\", top: \"-10px\", left: \"20px\" }}\n                  className=\"fw-bold bg-white rounded-5 px-3 text-primary fs-6 d-flex justify-content-center aline-center flex-column\"\n                >\n                  {task.department}\n                </div>\n                <div className=\"d-flex gap-2 RemainingTimeHandel justify-content-between \">\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div>\n                      <div className=\"text-center d-none\">\n                        <div className=\"form-control  fw-bold p-0\">\n                          {calculateRemainingTime(task.endDate).days}{\" \"}\n                        </div>{\" \"}\n                        <div>Day</div>\n                      </div>\n                      <h5 className=\"btn btn-danger p-1 px-3 fw-bold\">Late</h5>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).days}{\" \"}\n                      </div>{\" \"}\n                      <div>Day</div>\n                    </div>\n                  )}\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div className=\"text-center d-none\">\n                      <div className=\"form-control  fw-bold p-0\">\n                        {calculateRemainingTime(task.endDate).hours}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).hours}{\" \"}\n                      </div>{\" \"}\n                      <div>Hrs</div>\n                    </div>\n                  )}\n                  {calculateRemainingTime(task.endDate).delay ? (\n                    <div className=\"text-center d-none\">\n                      <div className=\"form-control fw-bold p-0\">\n                        {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div\n                        style={{ boxShadow: \"0 0 5px 2px gray inset\" }}\n                        className=\"form-control fw-bold px-1 py-0\"\n                      >\n                        {calculateRemainingTime(task.endDate).minutes}{\" \"}\n                      </div>{\" \"}\n                      <div>Min</div>\n                    </div>\n                  )}\n                </div>\n              </summary>\n              <div\n                style={{ position: \"relative\" }}\n                className=\"row p-1 my-2 mx-0 bg-light text-dark rounded\"\n              >\n                <div style={{ height: \"fit-content\" }} className=\"form-control\">\n                  <p\n                    style={{ height: \"fit-content\" }}\n                    className=\"text-start fs-6 form-control\"\n                  >\n                    <h6 className=\"fw-bold\">Task Discription</h6>{\" \"}\n                    {task.description}\n                  </p>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Task Durations <br /> <span>{task.duration} days</span>{\" \"}\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Created By <br /> <span>{task.managerEmail}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      Start Date <br />{\" \"}\n                      <span>\n                        {new Date(task.startDate).toLocaleDateString()}\n                      </span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      End Date <br />{\" \"}\n                      <span>{new Date(task.endDate).toLocaleDateString()}</span>\n                    </p>\n                    <p\n                      style={{ fontSize: \"1rem\" }}\n                      className=\"col-6 col-sm-6 col-md-2\"\n                    >\n                      <span>\n                        Task Status <br /> {task.status}\n                      </span>\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <p>\n                      <span className=\"fw-bold\">Remarks : </span> {task.comment}\n                    </p>\n                  </div>\n                  <div\n                    style={{ height: \"fit-content\" }}\n                    className=\"row form-control d-flex pt-3 rounded mx-1 justify-content-between\"\n                  >\n                    <button\n                      className=\"btn btn-info col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() => AcceptTask(task._id,task.Taskname, task.adminMail)}\n                    >\n                      <IoCheckmarkDoneSharp />\n                      Accept\n                    </button>\n                    <button\n                      className=\"btn btn-primary col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() => RejectTask(task._id, task.Taskname, task.adminMail)}\n                    >\n                      <BsFiletypeDoc />\n                      View Docs\n                    </button>\n                    <button\n                      className=\"btn btn-primary col-2 d-flex justify-center aline-center gap-2\"\n                      onClick={() => RejectTask(task._id)}\n                    >\n                      <MdCancel />\n                      Reject\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </details>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ManagerNewTask;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\Dashboard\\HRDash.jsx",["1055"],"import React from \"react\";\nimport UpcomingBirthdays from \"../../../Pages/AddEmployee/UpcomingBirthdays\";\nimport TaskChart from \"../../../Pages/Chart/TaskChart\";\nimport DepartmentChart from \"../../../Pages/Chart/DepartmentChart\";\nimport HolidayList from \"../../../Pages/LeaveCalendar/HolidayList\";\nimport LeaveCount from \"./CountData/LeavesCount\";\nimport EmplolyeeCount from \"./CountData/EmployeeCount\";\nimport InnerDashContainer from \"../../InnerDashContainer\";\nimport NoticeBoard from \"../Notification/NoticeBoard\"\nconst HRDash = () => {\n  return (\n    // <InnerDashContainer>\n    <div>\n      <div className=\"row gap-0 mx-0\">\n        <div className=\"col-lg-9\">\n          <EmplolyeeCount />\n          <LeaveCount />\n\n          <div className=\"row row_flex mt-5\">\n            <div className=\"col-lg-6\">\n              <TaskChart />\n            </div>\n            <div className=\"col-lg-6\">\n              <DepartmentChart />\n            </div>\n          </div>\n          <div className=\"row row_flex\">\n            <div className=\"col-lg-12\">{/* <TodatAttendance /> */}</div>\n          </div>\n        </div>\n        <div className=\"col-lg-3\">\n          <UpcomingBirthdays />\n          <NoticeBoard/>\n          <div className=\"holiday mt-3\">\n            <HolidayList />\n          </div>\n          <div className=\"col-md-9\"></div>\n        </div>\n      </div>\n    </div>\n    // </InnerDashContainer>\n  );\n};\n\nexport default HRDash;\n\n// import React, { useState } from \"react\";\n// import \"../DashboardHR.css\";\n// import { Link } from \"react-router-dom\";\n// import AdminEmployeeTable from \"../../../Pages/AddEmployee/EmployeeTable\";\n// import LeaveApplicationHRTable from \"../LeaveApplicationHRTable\";\n// import PositionTable from \"../../../Pages/Department/PositionTable\";\n// import RoleTable from \"../../../Pages/Department/RoleTable\";\n// // import EmpCharts from \"../../Pages/Charts/EmpCharts\";\n// import HrCharts from \"../Chart/HrCharts\";\n// import HolidayList from \"../../../Pages/LeaveCalendar/HolidayList\";\n// import ManagerCompletedTask from \"../ManagerTaskManagement/ManagerCompletedTask\";\n// import UpcomingBirthdays from \"../../../Pages/AddEmployee/UpcomingBirthdays\";\n\n// import Chart from \"react-apexcharts\";\n\n// import { IoIosArrowDroprightCircle } from \"react-icons/io\";\n// import Login from \"../../../Pages/Login/Login\";\n// const HRDash = (props) => {\n//   const [totalCompletedTasks, setTotalCompletedTasks] = useState(0);\n\n//   const [totalEmployees, setTotalEmployees] = useState(0);\n//   const [totalLeaves, setTotalLeaves] = useState(0);\n//   const [totalPositions, setTotalPositions] = useState(0);\n//   const [totalRole, setTotalRole] = useState(0);\n\n//   const updateTotalEmployees = (totalEmployees) => {\n//     setTotalEmployees(totalEmployees);\n//   };\n\n//   const updateTotalLeaves = (totalLeaves) => {\n//     setTotalLeaves(totalLeaves);\n//   };\n\n//   const updateTotalPositions = (totalPositions) => {\n//     setTotalPositions(totalPositions);\n//   };\n\n//   const updateTotalRole = (totalRole) => {\n//     setTotalRole(totalRole);\n//   };\n\n//   const updateTotalCompletedTasks = (totalCompletedTasks) => {\n//     setTotalCompletedTasks(totalCompletedTasks);\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"container-fluid  mt-4\">\n//         <h2 className=\"text-muted fw-bolder mb-4\">🪟 HRD DASHBOARD</h2>\n\n//         <div className=\"row row-gap-4\">\n//           <div className=\"col-md-3\">\n//             <div\n//               style={{ backgroundColor: \"#FED2AA\" }}\n//               className=\" DashboardCard position-relative\"\n//             >\n//               <div className=\" d-flex flex-column gap-3\">\n//                 <p className=\"fw-bold pt-2 text-muted\">\n//                   Total Employees\n//                   <span\n//                     className=\"fw-bolder text-info position-absolute\"\n//                     style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\n//                   >\n//                     {totalEmployees}\n//                   </span>\n//                 </p>\n//                 <Link\n//                   className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\n//                   to=\"/hr/employee\"\n//                 >\n//                   <p className=\"my-auto\">More Info</p>{\" \"}\n//                   <p className=\"my-auto fs-4 d-flex\">\n//                     <IoIosArrowDroprightCircle />\n//                   </p>\n//                 </Link>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"col-md-3\">\n//             <div\n//               style={{ backgroundColor: \"#DFFFD8\" }}\n//               className=\"DashboardCard position-relative\"\n//             >\n//               <div className=\"d-flex flex-column gap-3\">\n//                 <p className=\"fw-bold pt-2 text-muted\">\n//                   Total Leave Applications{\" \"}\n//                   <span\n//                     className=\"fw-bolder text-info position-absolute\"\n//                     style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\n//                   >\n//                     {totalLeaves}\n//                   </span>\n//                 </p>\n//                 <Link\n//                   className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\n//                   to=\"/hr/leave-application-hr\"\n//                 >\n//                   <p className=\"my-auto\">More Info</p>{\" \"}\n//                   <p className=\"my-auto fs-4 d-flex\">\n//                     <IoIosArrowDroprightCircle />\n//                   </p>\n//                 </Link>\n//               </div>\n//             </div>\n//           </div>\n\n//           {/* <div className=\"row row-gap-4\"></div> */}\n//           <div className=\"col-md-3\">\n//             <div\n//               style={{ backgroundColor: \"#FEBBCC\" }}\n//               className=\"DashboardCard position-relative\"\n//             >\n//               <div className=\"d-flex flex-column gap-3\">\n//                 <p className=\"fw-bold pt-2 text-muted\">\n//                   Total Position\n//                   <span\n//                     className=\"fw-bolder text-info position-absolute\"\n//                     style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\n//                   >\n//                     {totalPositions}\n//                   </span>\n//                 </p>\n//                 <Link\n//                   className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\n//                   to=\"/hr/position\"\n//                 >\n//                   <p className=\"my-auto\">More Info</p>{\" \"}\n//                   <p className=\"my-auto fs-4 d-flex\">\n//                     <IoIosArrowDroprightCircle />\n//                   </p>\n//                 </Link>\n//               </div>\n//             </div>\n//           </div>\n//           {/* <div className=\"col-md-3\">\n//             <div\n//               style={{ backgroundColor: \"#BCCEF8\" }}\n//               className=\"DashboardCard position-relative\"\n//             >\n//               <div className=\"d-flex flex-column gap-3\">\n//                 <p className=\"fw-bold pt-2 text-muted\">\n//                   Total Role\n//                   <span\n//                     className=\"fw-bolder text-info position-absolute\"\n//                     style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\n//                   >\n//                     {totalRole}\n//                   </span>\n//                 </p>\n//                 <Link\n//                   className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\n//                   to=\"/hr/role\"\n//                 >\n//                   <p className=\"my-auto\">More Info</p>{\" \"}\n//                   <p className=\"my-auto fs-4 d-flex\">\n//                     <IoIosArrowDroprightCircle />\n//                   </p>\n//                 </Link>\n//               </div>\n//             </div>\n//           </div> */}\n//           <div className=\"col-md-3\">\n//             {\" \"}\n//             <UpcomingBirthdays />\n//           </div>\n//           <div className=\"row row-gap-4\">\n//             <div className=\"col-md-6\">\n//               {\" \"}\n//               <HolidayList />\n//             </div>\n//           </div>\n//           {/* <h1>Task</h1>\n//           <div className=\"col-md-3\">\n//             <div\n//               style={{ backgroundColor: \"#D0A2F7\" }}\n//               className=\" DashboardCard position-relative\"\n//             >\n//               <div className=\" d-flex flex-column gap-3\">\n//                 <p className=\"fw-bold pt-2 text-muted\">\n//                   Total Complete Task\n//                   <span\n//                     className=\"fw-bolder text-info position-absolute\"\n//                     style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\n//                   >\n//                     {totalCompletedTasks}\n//                   </span>\n//                 </p>\n//                 <Link\n//                   className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\n//                   to=\"/hr/taskcomplete\"\n//                 >\n//                   <p className=\"my-auto\">More Info</p>{\" \"}\n//                   <p className=\"my-auto fs-4 d-flex\">\n//                     <IoIosArrowDroprightCircle />\n//                   </p>\n//                 </Link>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"col-md-3\">\n//             <div\n//               style={{ backgroundColor: \"#FF9B9B\" }}\n//               className=\"DashboardCard position-relative\"\n//             >\n//               <div className=\"d-flex flex-column gap-3\">\n//                 <p className=\"fw-bold pt-2 text-muted\">\n//                   Total Logout\n//                   <span\n//                     className=\"fw-bolder text-info position-absolute\"\n//                     style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\n//                   >\n//                     {totalLeaves}\n//                   </span>\n//                 </p>\n//                 <Link\n//                   className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\n//                   to=\"/admin/leave\"\n//                 >\n//                   <p className=\"my-auto\">More Info</p>{\" \"}\n//                   <p className=\"my-auto fs-4 d-flex\">\n//                     <IoIosArrowDroprightCircle />\n//                   </p>\n//                 </Link>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"col-md-3\">\n//             <div\n//               style={{ backgroundColor: \"#FF9B9B\" }}\n//               className=\"DashboardCard position-relative\"\n//             >\n//               <div className=\"d-flex flex-column gap-3\">\n//                 <p className=\"fw-bold pt-2 text-muted\">\n//                   Total Logout\n//                   <span\n//                     className=\"fw-bolder text-info position-absolute\"\n//                     style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\n//                   >\n//                     {totalLeaves}\n//                   </span>\n//                 </p>\n//                 <Link\n//                   className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\n//                   to=\"/admin/leave\"\n//                 >\n//                   <p className=\"my-auto\">More Info</p>{\" \"}\n//                   <p className=\"my-auto fs-4 d-flex\">\n//                     <IoIosArrowDroprightCircle />\n//                   </p>\n//                 </Link>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"col-md-3\">\n//             <div\n//               style={{ backgroundColor: \"#FF9B9B\" }}\n//               className=\"DashboardCard position-relative\"\n//             >\n//               <div className=\"d-flex flex-column gap-3\">\n//                 <p className=\"fw-bold pt-2 text-muted\">\n//                   Total Logout\n//                   <span\n//                     className=\"fw-bolder text-info position-absolute\"\n//                     style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\n//                   >\n//                     {totalLeaves}\n//                   </span>\n//                 </p>\n//                 <Link\n//                   className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\n//                   to=\"/admin/leave\"\n//                 >\n//                   <p className=\"my-auto\">More Info</p>{\" \"}\n//                   <p className=\"my-auto fs-4 d-flex\">\n//                     <IoIosArrowDroprightCircle />\n//                   </p>\n//                 </Link>\n//               </div>\n//             </div>\n//           </div> */}\n\n//           {/* <div className=\"col-md-9\">\n//             <UpcomingBirthdays />\n//           </div> */}\n\n//           {/* charts */}\n//           <HrCharts />\n\n//           <div className=\"col-md-6\"></div>\n//           {/* end charts */}\n\n//           <div className=\"col-md-9\">\n//             {/* Your existing code for tables */}\n//             <div style={{ display: \"none\" }}>\n//               <AdminEmployeeTable updateTotalEmployees={updateTotalEmployees} />\n//             </div>\n\n//             <div style={{ display: \"none\" }}>\n//               <LeaveApplicationHRTable updateTotalLeaves={updateTotalLeaves} />\n//             </div>\n//             <div style={{ display: \"none\" }}>\n//               <PositionTable updateTotalPositions={updateTotalPositions} />\n//             </div>\n//             <div style={{ display: \"none\" }}>\n//               <RoleTable updateTotalRole={updateTotalRole} />\n//             </div>\n//             <div style={{ display: \"none\" }}>\n//               <ManagerCompletedTask\n//                 updateTotalCompletedTasks={updateTotalCompletedTasks}\n//               />\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default HRDash;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\ApplyLeave\\LeaveApplicationFormEdit.jsx",["1056"],"import React, { useState } from \"react\";\n// import { Form,Button } from \"react-bootstrap\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\nimport axios from \"axios\";\n// import \"./LeaveApplicationEmp.css\";\n\nconst LeaveApplicationEmpForm = (props) => {\n  const [FromDateData, setFromDateData] = useState(\n    props.editData[\"FromDate\"].slice(0, 10)\n  );\n  const [ToDateData, setToDateData] = useState(\n    props.editData[\"ToDate\"].slice(0, 10)\n  );\n  const [ReasonforleaveData, setReasonforleaveData] = useState(\n    props.editData[\"Reasonforleave\"]\n  );\n\n  const onFromDateDataChange = (e) => {\n    setFromDateData(e.target.value);\n  };\n\n  const onToDateDataChange = (e) => {\n    setToDateData(e.target.value);\n  };\n\n  const onReasonforleaveDataChange = (e) => {\n    setReasonforleaveData(e.target.value);\n  };\n\n  return (\n    <div>\n      <h2 id=\"role-form-title\">Edit LeaveApplicationEmp Details</h2>\n\n      <div id=\"role-form-outer-div\">\n        <Form\n          id=\"form\"\n          onSubmit={(e) =>\n            props.onLeaveApplicationEmpEditUpdate(props.editData, e)\n          }\n        >\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Leave Type\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control as=\"select\" required>\n                <option value=\"\" disabled selected>\n                  Select your option\n                </option>\n                <option\n                  value=\"Sick Leave\"\n                  selected={props.editData[\"Leavetype\"] === \"Sick Leave\"}\n                >\n                  Sick Leave\n                </option>\n                <option\n                  value=\"Casual Leave\"\n                  selected={props.editData[\"Leavetype\"] === \"Casual Leave\"}\n                >\n                  Casual Leave\n                </option>\n                <option\n                  value=\"Privilege Leave\"\n                  selected={props.editData[\"Leavetype\"] === \"Privilege Leave\"}\n                >\n                  Privilege Leave\n                </option>\n              </Form.Control>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              FromDate\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control\n                type=\"date\"\n                required\n                value={FromDateData}\n                onChange={(e) => onFromDateDataChange(e)}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              ToDate\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control\n                type=\"date\"\n                required\n                value={ToDateData}\n                onChange={(e) => onToDateDataChange(e)}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Reason for leave\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control\n                type=\"Text\"\n                placeholder=\"Reason for leave\"\n                required\n                value={ReasonforleaveData}\n                onChange={(e) => onReasonforleaveDataChange(e)}\n              />\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Leave Status\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control as=\"select\" required>\n                <option value=\"1\" selected disabled>\n                  Pending\n                </option>\n              </Form.Control>\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row} id=\"form-submit-button\">\n            <Col sm={{ span: 10, offset: 2 }}>\n              <Button type=\"submit\">Update</Button>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} id=\"form-cancel-button\">\n            <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n              <Button type=\"reset\" onClick={props.onFormEditClose}>\n                cancel\n              </Button>\n            </Col>\n          </Form.Group>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default LeaveApplicationEmpForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\ApplyLeave\\LeaveApplicationForm.jsx",["1057"],"import React from \"react\";\nimport { Form, Button, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nconst LeaveApplicationEmpForm = (props) => {\n  return (\n    <div\n      style={{ height: \"100vh\", width: \"100%\" }}\n      className=\"registration-page py-4\"\n    >\n      <h2\n        id=\"role-form-title\"\n        className=\"text-center text-black text-uppercase fw-bold my-4\"\n      >\n        Add LeaveApplicationEmp Details\n      </h2>\n\n      <div id=\"role-form-outer-div\">\n        <Form id=\"form\" onSubmit={props.onLeaveApplicationEmpSubmit}>\n          <div className=\"d-flex w-100 flex-column gap-2 rounded \">\n            <div className=\"row row-gap-3 \">\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  Leave Type\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control as=\"select\" required>\n                    <option value=\"\" disabled selected>\n                      Select your option\n                    </option>\n                    <option value=\"Sick Leave\">Sick Leave</option>\n                    <option value=\"Casual Leave\">Casual Leave</option>\n                    <option value=\"Privilege Leave\">Privilege Leave</option>\n                  </Form.Control>\n                </Col>\n              </div>\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  FromDate\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control type=\"date\" required />\n                </Col>\n              </div>\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  ToDate\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control type=\"date\" placeholder=\"ToDate\" required />\n                </Col>\n              </div>\n\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  Leave Status\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control as=\"select\" required>\n                    <option value=\"1\" selected>\n                      Pending\n                    </option>\n                  </Form.Control>\n                </Col>\n              </div>\n\n              <div className=\"form-group col-12\">\n                <Form.Label column sm={6}>\n                  Reason for leave\n                </Form.Label>\n                <Col sm={11} className=\"form-input\">\n                  <Form.Control\n                    as=\"textarea\"\n                    rows={3}\n                    required\n                    className=\"form-control\"\n                    placeholder=\"Please Describe your reasion....\"\n                  />\n                </Col>\n              </div>\n\n              <div\n                className=\"form-group col-12 col-md-6\"\n                id=\"form-submit-button\"\n              >\n                <Col sm={{ span: 10, offset: 2 }}>\n                  <Button type=\"submit\">Submit</Button>\n                </Col>\n              </div>\n              <div\n                className=\"form-group col-12 col-md-6\"\n                id=\"form-cancel-button\"\n              >\n                <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                  <Button type=\"reset\" onClick={props.onFormClose}>\n                    cancel\n                  </Button>\n                </Col>\n              </div>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default LeaveApplicationEmpForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\ApplyLeave\\LeaveApplicationTable.jsx",["1058","1059","1060","1061","1062","1063","1064","1065"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport { Button, Table } from \"react-bootstrap\";\nimport InnerDashContainer from \"../../Component/InnerDashContainer\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nconst LeaveApplicationEmpTable = (props) => {\n  const [leaveApplicationEmpData, setLeaveApplicationEmpData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [rowData, setRowData] = useState([]);\n  const userId = props.data && props.data._id;\n\n  const loadLeaveApplicationEmpData = () => {\n    axios\n      .get(\n        `http://localhost:4000/api/leave-application-emp/` +\n          localStorage.getItem(\"_id\"),\n        {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        }\n      )\n      .then((response) => {\n        const leaveApplicationEmpObj = response.data;\n        console.log(\"response\", response.data);\n        setLeaveApplicationEmpData(response.data);\n        setLoading(false);\n\n        const newRowsData = leaveApplicationEmpObj.leaveApplication.map(\n          (data) => {\n            return {\n              data,\n              Leavetype: data[\"Leavetype\"],\n              FromDate: data[\"FromDate\"].slice(0, 10),\n              ToDate: data[\"ToDate\"].slice(0, 10),\n              Reasonforleave: data[\"Reasonforleave\"],\n              Status: data[\"Status\"]\n            };\n          }\n        );\n\n        setRowData(newRowsData);\n\n        props.updateTotalLeaves(newRowsData.length);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const onLeaveApplicationEmpDelete = (e1, e2) => {\n    console.log(e1, e2);\n    if (window.confirm(\"Are you sure to delete this record? \")) {\n      axios\n        .delete(`http://localhost:4000/api/leave-application-emp/${e1}/${e2}`, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then((res) => {\n          loadLeaveApplicationEmpData();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const status = (s) => {\n    if (s == 1) {\n      return \"Pending\";\n    }\n    if (s == 2) {\n      return \"Approved\";\n    }\n    if (s == 3) {\n      return \"Rejected\";\n    }\n    return \"Unknown Status\";\n  };\n\n  const onEdit = (data) => {\n    if (data[\"Status\"] === 1) {\n      props.onEditLeaveApplicationEmp(data);\n    } else {\n      window.alert(\n        \"You cannot edit the application after it's approved or rejected\"\n      );\n    }\n  };\n\n  useEffect(() => {\n    loadLeaveApplicationEmpData();\n  }, []);\n\n  // const getTotalLeaveCount = () => {\n  //   // Check if leaveApplicationEmpData is defined before accessing its properties\n  //   return leaveApplicationEmpData && leaveApplicationEmpData.leaveApplication\n  //     ? leaveApplicationEmpData.leaveApplication.length\n  //     : 0;\n  // };\n  // // In LeaveApplicationEmpTable component\n  // useEffect(() => {\n  //   if (typeof props.updateTotalEmployeeLeave !== \"function\") {\n  //     console.error(\"updateTotalEmployeeLeave is not a function\");\n  //   }\n  // }, [props.updateTotalEmployeeLeave]);\n\n  return (\n    <InnerDashContainer>\n      <h2 id=\"role-title\"> Leave Application</h2>\n      <Button\n        variant=\"primary\"\n        id=\"add-button\"\n        onClick={props.onAddLeaveApplicationEmp}\n      >\n        <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n        Apply Leave\n      </Button>\n\n      <div id=\"clear-both\" />\n      {!loading ? (\n        <div>\n          <Table className=\"table table-bordered\">\n            <thead>\n              <tr>\n                <th className=\"bg-success text-white\">Leave Type</th>\n                <th className=\"bg-success text-white\">Start Date</th>\n                <th className=\"bg-success text-white\">End Date</th>\n                <th className=\"bg-success text-white\">Remarks</th>\n                <th className=\"bg-success text-white\">Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              {rowData.map((data, index) => (\n                <tr key={index}>\n                  <td>{data.Leavetype}</td>\n                  <td>{data.FromDate}</td>\n                  <td>{data.ToDate}</td>\n                  <td>{data.Reasonforleave}</td>\n                  <td>{status(data.Status)}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n      ) : (\n        <div id=\"loading-bar\">\n          <RingLoader\n            css={override}\n            sizeUnit={\"px\"}\n            size={50}\n            color={\"#0000ff\"}\n            loading={true}\n          />\n        </div>\n      )}\n    </InnerDashContainer>\n  );\n};\n\nexport default LeaveApplicationEmpTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\CityFormEdit.jsx",["1066","1067","1068","1069","1070","1071"],"import React, { Component } from \"react\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\n// import { Form,Button } from \"react-bootstrap\";\n// import \"./CityForm.css\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nclass CityForm extends Component {\n  state = {\n    CityData: this.props.editData[\"CityName\"],\n    stateData: [],\n    filteredStateData: [],\n    countryData: [],\n    filteredCountryData: []\n  };\n\n  onChange(e) {\n    this.setState({ CityData: e.target.value });\n  }\n  loadCountryInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/country\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then(response => {\n        this.setState({ countryData: response.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  loadStateInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/state\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then(response => {\n        this.setState({ stateData: response.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  componentWillMount() {\n    this.loadCountryInfo();\n    this.loadStateInfo();\n  }\n  onCountryChange(e) {\n    console.log(e.target.value);\n    let currentCountry = e.target.value;\n    let filteredState = this.state.stateData.filter(\n      data => data[\"country\"][0][\"_id\"] == currentCountry\n    );\n    this.setState({ filteredStateData: filteredState });\n  }\n\n  onSelectCountry = (e, data) => {\n    return this.props.editData[\"state\"][0][\"country\"][0][\"_id\"] == data[\"_id\"];\n  };\n\n  render() {\n    return (\n      <div>\n        <h2 id=\"role-form-title\">Edit City Details</h2>\n\n        <div id=\"role-form-outer-div\">\n          <Form\n            id=\"form\"\n            onSubmit={e => this.props.onCityEditUpdate(this.props.editData, e)}\n          >\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Country\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  as=\"select\"\n                  name=\"country\"\n                  onChange={this.onCountryChange.bind(this)}\n                >\n                  <option value=\"\" disabled selected>\n                    Select your option\n                  </option>\n                  {this.state.countryData.map((data, index) => (\n                    <option value={data[\"_id\"]}>{data[\"CountryName\"]}</option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                State\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" name=\"state\" required>\n                  <option value=\"\" disabled selected>\n                    Select your option\n                  </option>\n                  {this.state.filteredStateData.map((data, index) => (\n                    <option\n                      value={data[\"_id\"]}\n                      selected={\n                        this.props.editData[\"state\"][0][\"_id\"] == data[\"_id\"]\n                      }\n                    >\n                      {data[\"StateName\"]}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                City\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"City\"\n                  name=\"City\"\n                  required\n                  onChange={value => this.onChange(value)}\n                  value={this.state.CityData}\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} id=\"form-submit-button\">\n              <Col sm={{ span: 10, offset: 2 }}>\n                <Button type=\"submit\">Update</Button>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} id=\"form-cancel-button\">\n              <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                <Button type=\"reset\" onClick={this.props.onFormEditClose}>\n                  cancel\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CityForm;\n// onChange={value => this.onChange(value)}\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\CityForm.jsx",["1072"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./CityForm.css\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\n\nclass CityForm extends Component {\n  state = {\n    stateData: [],\n    filteredStateData: [],\n    countryData: [],\n    filteredCountryData: []\n  };\n\n  onChange(e) {\n    this.setState({ CityData: e.target.value });\n  }\n  loadCountryInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/country\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then(response => {\n        this.setState({ countryData: response.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  loadStateInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/state\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then(response => {\n        this.setState({ stateData: response.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  componentWillMount() {\n    this.loadCountryInfo();\n    this.loadStateInfo();\n  }\n  onCountryChange(e) {\n    console.log(e.target.value);\n    let currentCountry = e.target.value;\n    let filteredState = this.state.stateData.filter(\n      data => data[\"country\"][0][\"_id\"] == currentCountry\n    );\n    this.setState({ filteredStateData: filteredState });\n  }\n  render() {\n    return (\n      <div>\n        <h2 id=\"role-form-title\">Add City Details</h2>\n\n        <div id=\"role-form-outer-div\">\n          <Form id=\"form\" onSubmit={this.props.onCitySubmit}>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Country\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  as=\"select\"\n                  name=\"country\"\n                  onChange={this.onCountryChange.bind(this)}\n                >\n                  <option value=\"\" disabled selected>\n                    Select your option\n                  </option>\n                  {this.state.countryData.map((data, index) => (\n                    <option value={data[\"_id\"]}>{data[\"CountryName\"]}</option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                State\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" name=\"state\" required>\n                  <option value=\"\" disabled selected>\n                    Select your option\n                  </option>\n                  {this.state.filteredStateData.map((data, index) => (\n                    <option value={data[\"_id\"]}>{data[\"StateName\"]}</option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                City\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"City\"\n                  name=\"City\"\n                  required\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} id=\"form-submit-button\">\n              <Col sm={{ span: 10, offset: 2 }}>\n                <Button type=\"submit\">Submit</Button>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} id=\"form-cancel-button\">\n              <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                <Button type=\"reset\" onClick={this.props.onFormClose}>\n                  cancel\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CityForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\CityTable.jsx",["1073","1074","1075"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./CityTable.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport { Button } from \"react-bootstrap\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\nclass CityTable extends Component {\n  state = {\n    cityData: [],\n    loading: true,\n    rowData: []\n  };\n  cityObj = [];\n  rowDataT = [];\n\n  // stateDataArray;\n  loadCityData = () => {\n    axios\n      .get(\"http://localhost:4000/api/city\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        // if(response.data.length==0){this.cityObj=[\"temp\"];}\n        // else{\n        this.cityObj = response.data;\n        // }\n        console.log(\"response\", response.data);\n        this.setState({ cityData: response.data });\n        this.setState({ loading: false });\n        this.rowDataT = [];\n\n        this.cityObj.map((data) => {\n          let temp = {\n            data,\n            CountryName: data[\"state\"][0][\"country\"][0][\"CountryName\"],\n            StateName: data[\"state\"][0][\"StateName\"],\n            CityName: data[\"CityName\"]\n          };\n\n          this.rowDataT.push(temp);\n        });\n        this.setState({ rowData: this.rowDataT });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  onCityDelete = (e) => {\n    console.log(e);\n    // let body= \"ID=\" + e;\n    if (window.confirm(\"Are you sure to delete this record ? \") == true) {\n      axios\n        .delete(\"http://localhost:4000/api/city/\" + e, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then((res) => {\n          this.componentDidMount();\n        })\n        .catch((err) => {\n          console.log(err);\n          console.log(err.response);\n          if (err.response.status == 403) {\n            window.alert(err.response.data);\n          }\n        });\n    }\n  };\n  componentDidMount() {\n    this.loadCityData();\n  }\n  renderButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() => this.onCityDelete(params.data.data[\"_id\"])}\n      />\n    );\n  }\n  renderEditButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => this.props.onEditCity(params.data.data)}\n      />\n    );\n  }\n\n  render() {\n    // let value=(this.props.pass) ? undefined : \"\";<i class=\"fas fa-plus\"></i>\n    return (\n      <div className=\"p-4\">\n        <div className=\"d-flex justify-between aline-items-start mb-3\">\n          <div className=\" my-auto\">\n            <h3 className=\"fw-bold text-muted\">City Details</h3>\n            <p>You can create new city and view all cities details here !</p>\n          </div>\n\n          <Button\n            variant=\"primary\"\n            className=\"my-auto\"\n            id=\"add-button\"\n            onClick={this.props.onAddCity}\n          >\n            <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n            Add new City\n          </Button>\n        </div>\n        <div id=\"clear-both\" />\n\n        {!this.state.loading ? (\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th\n                  style={{\n                    background:\n                      \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                    color: \"white\"\n                  }}\n                  className=\"py-1\"\n                >\n                  Country\n                </th>\n                <th\n                  style={{\n                    background:\n                      \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                    color: \"white\"\n                  }}\n                  className=\"py-1\"\n                >\n                  State\n                </th>\n                <th\n                  style={{\n                    background:\n                      \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                    color: \"white\"\n                  }}\n                  className=\"py-1\"\n                >\n                  City\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.cityData.map((items, index) => (\n                <tr key={index}>\n                  <td>{items.state[0].country[0].CountryName}</td>\n                  <td>{items.state[0].StateName}</td>\n                  <td>{items.CityName}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <div id=\"loading-bar\">\n            <RingLoader\n              css={override}\n              sizeUnit={\"px\"}\n              size={50}\n              color={\"#0000ff\"}\n              loading={true}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default CityTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpLeave\\LeaveApplicationEmpForm.jsx",["1076","1077","1078","1079"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Button, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport \"./LeaveApplicationEmpForm.css\";\nimport LeaveImg from \"./Leave.svg\";\nimport InnerDashContainer from \"../../InnerDashContainer\";\n\nconst LeaveApplicationEmpForm = (props) => {\n  const id = localStorage.getItem(\"_id\");\n  const [empData, setEmpData] = useState([])\n  const loadEmployeeData = () => {\n    axios\n      .get(`http://localhost:4000/api/particularEmployee/${id}`, {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n       \n        console.log(response.data)\n        setEmpData(response.data)\n        \n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  useEffect(()=>{\n    loadEmployeeData()\n  },[]);\n  return (\n    // <div\n    //   style={{ height: \"100vh\", width: \"100%\" }}\n    //   className=\"registration-page py-4\"\n    // >\n    //   <h2\n    //     id=\"role-form-title\"\n    //     className=\"text-center text-black text-uppercase fw-bold my-4\"\n    //   >\n    //     Add LeaveApplicationEmp Details\n    //   </h2>\n\n    //   <div id=\"role-form-outer-div\">\n    //     <Form id=\"form\" onSubmit={props.onLeaveApplicationEmpSubmit}>\n    //       <div className=\"d-flex w-100 flex-column gap-2 rounded \">\n    //         <div className=\"row row-gap-3 \">\n    //           <div className=\"form-group col-12 col-md-6\">\n    //             <Form.Label column sm={6}>\n    //               Leave Type\n    //             </Form.Label>\n    //             <Col sm={10} className=\"form-input\">\n    //               <Form.Control as=\"select\" required>\n    //                 <option value=\"\" disabled selected>\n    //                   Select your option\n    //                 </option>\n    //                 <option value=\"Sick Leave\">Sick Leave</option>\n    //                 <option value=\"Casual Leave\">Casual Leave</option>\n    //                 <option value=\"Privilege Leave\">Privilege Leave</option>\n    //               </Form.Control>\n    //             </Col>\n    //           </div>\n    //           <div className=\"form-group col-12 col-md-6\">\n    //             <Form.Label column sm={6}>\n    //               FromDate\n    //             </Form.Label>\n    //             <Col sm={10} className=\"form-input\">\n    //               <Form.Control type=\"date\" required />\n    //             </Col>\n    //           </div>\n    //           <div className=\"form-group col-12 col-md-6\">\n    //             <Form.Label column sm={6}>\n    //               ToDate\n    //             </Form.Label>\n    //             <Col sm={10} className=\"form-input\">\n    //               <Form.Control type=\"date\" placeholder=\"ToDate\" required />\n    //             </Col>\n    //           </div>\n\n    //           <div className=\"form-group col-12 col-md-6\">\n    //             <Form.Label column sm={6}>\n    //               Leave Status\n    //             </Form.Label>\n    //             <Col sm={10} className=\"form-input\">\n    //               <Form.Control as=\"select\" required>\n    //                 <option value=\"1\" selected>\n    //                   Pending\n    //                 </option>\n    //               </Form.Control>\n    //             </Col>\n    //           </div>\n\n    //           <div className=\"form-group col-12\">\n    //             <Form.Label column sm={6}>\n    //               Reason for leave\n    //             </Form.Label>\n    //             <Col sm={11} className=\"form-input\">\n    //               <Form.Control\n    //                 as=\"textarea\"\n    //                 rows={3}\n    //                 required\n    //                 className=\"form-control\"\n    //                 placeholder=\"Please Describe your reasion....\"\n    //               />\n    //             </Col>\n    //           </div>\n\n    //           <div\n    //             className=\"form-group col-12 col-md-6\"\n    //             id=\"form-submit-button\"\n    //           >\n    //             <Col sm={{ span: 10, offset: 2 }}>\n    //               <Button type=\"submit\">Submit</Button>\n    //             </Col>\n    //           </div>\n    //           <div\n    //             className=\"form-group col-12 col-md-6\"\n    //             id=\"form-cancel-button\"\n    //           >\n    //             <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n    //               <Button type=\"reset\" onClick={props.onFormClose}>\n    //                 cancel\n    //               </Button>\n    //             </Col>\n    //           </div>\n    //         </div>\n    //       </div>\n    //     </Form>\n    //   </div>\n    // </div>\n    \n \n    <InnerDashContainer>\n      <div style={{ overflow: \"auto\" }} className=\"row\">\n        <div className=\"col-5\">\n          <img style={{ width: \"130%\" }} src={LeaveImg} alt=\"\" />\n        </div>\n        <div className=\"col-6\">\n          <form\n            className=\"text-white shadow bg-dark px-3 py-4 rounded row\"\n            onSubmit={props.onLeaveApplicationEmpSubmit}\n          >\n            <h4 className=\"fw-bolder text-white mb-5\">Create Leave Request</h4>\n\n            <div className=\"mb-3 col-12\">\n              <label htmlFor=\"leaveType\" className=\"form-label\">\n                Select Leave Type\n              </label>\n              <select\n                className=\"form-select\"\n                id=\"leaveType\"\n                name=\"leaveType\"\n                // value={formData.leaveType}\n                // onChange={handleInputChange}\n              >\n                <option value=\"\" disabled selected>\n                  -- Select --\n                </option>\n                <option value=\"Sick Leave\">Sick Leave</option>\n                <option value=\"Casual Leave\">Casual Leave</option>\n                <option value=\"Privilege Leave\">Privilege Leave</option>\n              </select>\n            </div>\n            <div className=\"mb-3 col-6\">\n              <label htmlFor=\"startDate\" className=\"form-label\">\n                Start Date:\n              </label>\n              <input\n                type=\"date\"\n                className=\"form-control\"\n                id=\"startDate\"\n                name=\"startDate\"\n                // value={formData.startDate}\n                // onChange={handleInputChange}\n                required\n              />\n            </div>\n            <div className=\"mb-3 col-6\">\n              <label htmlFor=\"endDate\" className=\"form-label\">\n                End Date:\n              </label>\n              <input\n                type=\"date\"\n                className=\"form-control\"\n                id=\"endDate\"\n                name=\"endDate\"\n                // value={formData.endDate}\n                // onChange={handleInputChange}\n                required\n              />\n            </div>\n            <div className=\"mb-3 col-12\">\n              <label htmlFor=\"leaveType\" className=\"form-label\">\n                Leave Status\n              </label>\n              <select\n                className=\"form-select\"\n                id=\"leaveStatus\"\n                name=\"leaveStatus\"\n              >\n                <option value=\"1\" selected>\n                  Pending\n                </option>\n              </select>\n            </div>\n\n      \n            \n           \n             <div className=\"mb-3\">\n              <label htmlFor=\"manager\" className=\"form-label\">\n              Reporting Manager:\n              </label>\n              <input\n                className=\"form-control\"\n                id=\"manager\"\n                name=\"manager\"\n                value={empData.reportManager}\n                // onChange={handleInputChange}\n                required\n                disabled\n                placeholder={empData.reportManager}\n              />\n            </div>\n\n             \n            <div className=\"mb-3\">\n              <label htmlFor=\"hr\" className=\"form-label\">\n              Reporting Hr:\n              </label>\n              <input\n                className=\"form-control\"\n                id=\"hr\"\n                name=\"hr\"\n                value={empData.reportHr}\n                // onChange={handleInputChange}\n                required\n                disabled\n                placeholder={empData.reportHr}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"reason\" className=\"form-label\">\n                Reason:\n              </label>\n              <textarea\n                className=\"form-control\"\n                id=\"reason\"\n                name=\"reason\"\n                // value={formData.reason}\n                // onChange={handleInputChange}\n                required\n                placeholder=\"Please mention the reason for leave\"\n              />\n            </div>\n\n            <div className=\"row mt-3 mx-1 justify-content-between\">\n              <button type=\"submit\" className=\"btn btn-primary col-5 \">\n                Submit\n              </button>\n              <button type=\"button\" className=\"btn btn-danger col-5\">\n                Cancel\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </InnerDashContainer>\n  );\n};\n\nexport default LeaveApplicationEmpForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpLeave\\LeaveApplicationEmpTable.jsx",["1080","1081","1082","1083","1084","1085","1086","1087"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport { Button, Table } from \"react-bootstrap\";\nimport InnerDashContainer from \"../../InnerDashContainer\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nconst LeaveApplicationEmpTable = (props) => {\n  const [leaveApplicationEmpData, setLeaveApplicationEmpData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [rowData, setRowData] = useState([]);\n  const userId = props.data && props.data._id;\n\n  const loadLeaveApplicationEmpData = () => {\n    axios\n      .get(\n        `http://localhost:4000/api/leave-application-emp/${props.data[\"_id\"]}`,\n        {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        }\n      )\n      .then((response) => {\n        const leaveApplicationEmpObj = response.data;\n        console.log(\"response\", response.data);\n        setLeaveApplicationEmpData(response.data);\n        setLoading(false);\n\n        const newRowsData = leaveApplicationEmpObj.leaveApplication.map(\n          (data) => {\n            return {\n              data,\n              Leavetype: data[\"Leavetype\"],\n              FromDate: data[\"FromDate\"].slice(0, 10),\n              ToDate: data[\"ToDate\"].slice(0, 10),\n              Reasonforleave: data[\"Reasonforleave\"],\n              Status: data[\"Status\"]\n            };\n          }\n        );\n\n        setRowData(newRowsData);\n\n        props.updateTotalLeaves(newRowsData.length);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const onLeaveApplicationEmpDelete = (e1, e2) => {\n    console.log(e1, e2);\n    if (window.confirm(\"Are you sure to delete this record? \")) {\n      axios\n        .delete(`http://localhost:4000/api/leave-application-emp/${e1}/${e2}`, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then((res) => {\n          loadLeaveApplicationEmpData();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const status = (s) => {\n    if (s == 1) {\n      return \"Pending\";\n    }\n    if (s == 2) {\n      return \"Approved\";\n    }\n    if (s == 3) {\n      return \"Rejected\";\n    }\n    return \"Unknown Status\";\n  };\n\n  const onEdit = (data) => {\n    if (data[\"Status\"] === 1) {\n      props.onEditLeaveApplicationEmp(data);\n    } else {\n      window.alert(\n        \"You cannot edit the application after it's approved or rejected\"\n      );\n    }\n  };\n\n  useEffect(() => {\n    loadLeaveApplicationEmpData();\n  }, [props.leaveRequestDone]);\n\n  // const getTotalLeaveCount = () => {\n  //   // Check if leaveApplicationEmpData is defined before accessing its properties\n  //   return leaveApplicationEmpData && leaveApplicationEmpData.leaveApplication\n  //     ? leaveApplicationEmpData.leaveApplication.length\n  //     : 0;\n  // };\n  // // In LeaveApplicationEmpTable component\n  // useEffect(() => {\n  //   if (typeof props.updateTotalEmployeeLeave !== \"function\") {\n  //     console.error(\"updateTotalEmployeeLeave is not a function\");\n  //   }\n  // }, [props.updateTotalEmployeeLeave]);\n\n  return (\n    <InnerDashContainer>\n      <h2 id=\"role-title\"> Leave Application</h2>\n      <Button\n        variant=\"primary\"\n        id=\"add-button\"\n        onClick={props.onAddLeaveApplicationEmp}\n      >\n        <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n        Add\n      </Button>\n\n      <div id=\"clear-both\" />\n      {!loading ? (\n        <div>\n          <Table className=\"table table-bordered\">\n            <thead>\n              <tr>\n                <th className=\"bg-success text-white\">Leave Type</th>\n                <th className=\"bg-success text-white\">Start Date</th>\n                <th className=\"bg-success text-white\">End Date</th>\n                <th className=\"bg-success text-white\">Remarks</th>\n                <th className=\"bg-success text-white\">Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              {rowData.map((data, index) => (\n                <tr key={index}>\n                  <td>{data.Leavetype}</td>\n                  <td>{data.FromDate}</td>\n                  <td>{data.ToDate}</td>\n                  <td>{data.Reasonforleave}</td>\n                  <td>{status(data.Status)}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n      ) : (\n        <div id=\"loading-bar\">\n          <RingLoader\n            css={override}\n            sizeUnit={\"px\"}\n            size={50}\n            color={\"#0000ff\"}\n            loading={true}\n          />\n        </div>\n      )}\n    </InnerDashContainer>\n  );\n};\n\nexport default LeaveApplicationEmpTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpLeave\\LeaveApplicationEmpFormEdit.jsx",["1088"],"// import React, { Component } from \"react\";\n// // import \"./LeaveApplicationEmpFormEdit.css\";\n// // import { Form,Button } from \"react-bootstrap\";\n// import { Form, Button, Col, Row } from \"react-bootstrap\";\n// import axios from \"axios\";\n\n// class LeaveApplicationEmpForm extends Component {\n//   state = {\n//     // LeaveApplicationEmpData: this.props.editData[\"LeaveApplicationEmpName\"],\n\n//     // LeavetypeData: this.props.editData[\"Leavetype\"],\n//     FromDateData: this.props.editData[\"FromDate\"].slice(0, 10),\n//     ToDateData: this.props.editData[\"ToDate\"].slice(0, 10),\n//     ReasonforleaveData: this.props.editData[\"Reasonforleave\"]\n//     // StatusData: this.props.editData[\"Status\"],\n\n//     // value={this.state.CompanyNameData}\n//     // onChange={value => this.onCompanyNameDataChange(value)}\n//   };\n//   //   onLeavetypeDataChange(e) {\n//   //     this.setState({ CLeavetypeData: e.target.value });\n//   //   }\n\n//   onFromDateDataChange(e) {\n//     this.setState({ FromDateData: e.target.value });\n//   }\n//   onToDateDataChange(e) {\n//     this.setState({ ToDateData: e.target.value });\n//   }\n//   onReasonforleaveDataChange(e) {\n//     this.setState({ ReasonforleaveData: e.target.value });\n//   }\n//   //   onStatusDataChange(e) {\n//   //     this.setState({StatusData: e.target.value });\n//   //   }\n\n//   componentWillMount() {}\n\n//   render() {\n//     return (\n//       <div>\n//         <h2 id=\"role-form-title\">Edit LeaveApplicationEmp Details</h2>\n\n//         <div id=\"role-form-outer-div\">\n//           <Form\n//             id=\"form\"\n//             onSubmit={(e) =>\n//               this.props.onLeaveApplicationEmpEditUpdate(this.props.editData, e)\n//             }\n//           >\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//                 Leave Type\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control as=\"select\" required>\n//                   <option value=\"\" disabled selected>\n//                     Select your option\n//                   </option>\n//                   <option\n//                     value=\"Sick Leave\"\n//                     selected={this.props.editData[\"Leavetype\"] == \"Sick Leave\"}\n//                   >\n//                     Sick Leave\n//                   </option>\n//                   <option\n//                     value=\"Casual Leave\"\n//                     selected={\n//                       this.props.editData[\"Leavetype\"] == \"Casual Leave\"\n//                     }\n//                   >\n//                     Casual Leave\n//                   </option>\n//                   <option\n//                     value=\"Privilege Leave\"\n//                     selected={\n//                       this.props.editData[\"Leavetype\"] == \"Privilege Leave\"\n//                     }\n//                   >\n//                     Privilege Leave\n//                   </option>\n//                 </Form.Control>\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//                 FromDate\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control\n//                   type=\"date\"\n//                   required\n//                   value={this.state.FromDateData}\n//                   onChange={(value) => this.onFromDateDataChange(value)}\n//                 />\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//                 ToDate\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control\n//                   type=\"date\"\n//                   required\n//                   value={this.state.ToDateData}\n//                   onChange={(value) => this.onToDateDataChange(value)}\n//                 />\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//                 Reason for leave\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control\n//                   type=\"Text\"\n//                   placeholder=\"Reason for leave\"\n//                   required\n//                   value={this.state.ReasonforleaveData}\n//                   onChange={(value) => this.onReasonforleaveDataChange(value)}\n//                 />\n//               </Col>\n//             </Form.Group>\n\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//                 Leave Status\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control as=\"select\" required>\n//                   <option value=\"1\" selected disabled>\n//                     Pending\n//                   </option>\n//                 </Form.Control>\n//               </Col>\n//             </Form.Group>\n\n//             <Form.Group as={Row} id=\"form-submit-button\">\n//               <Col sm={{ span: 10, offset: 2 }}>\n//                 <Button type=\"submit\">Update</Button>\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row} id=\"form-cancel-button\">\n//               <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n//                 <Button type=\"reset\" onClick={this.props.onFormEditClose}>\n//                   cancel\n//                 </Button>\n//               </Col>\n//             </Form.Group>\n//           </Form>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default LeaveApplicationEmpForm;\n\nimport React, { useState } from \"react\";\n// import \"./LeaveApplicationEmpFormEdit.css\";\n// import { Form,Button } from \"react-bootstrap\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nconst LeaveApplicationEmpForm = (props) => {\n  const [FromDateData, setFromDateData] = useState(\n    props.editData[\"FromDate\"].slice(0, 10)\n  );\n  const [ToDateData, setToDateData] = useState(\n    props.editData[\"ToDate\"].slice(0, 10)\n  );\n  const [ReasonforleaveData, setReasonforleaveData] = useState(\n    props.editData[\"Reasonforleave\"]\n  );\n\n  const onFromDateDataChange = (e) => {\n    setFromDateData(e.target.value);\n  };\n\n  const onToDateDataChange = (e) => {\n    setToDateData(e.target.value);\n  };\n\n  const onReasonforleaveDataChange = (e) => {\n    setReasonforleaveData(e.target.value);\n  };\n\n  return (\n    <div>\n      <h2 id=\"role-form-title\">Edit LeaveApplicationEmp Details</h2>\n\n      <div id=\"role-form-outer-div\">\n        <Form\n          id=\"form\"\n          onSubmit={(e) =>\n            props.onLeaveApplicationEmpEditUpdate(props.editData, e)\n          }\n        >\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Leave Type\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control as=\"select\" required>\n                <option value=\"\" disabled selected>\n                  Select your option\n                </option>\n                <option\n                  value=\"Sick Leave\"\n                  selected={props.editData[\"Leavetype\"] === \"Sick Leave\"}\n                >\n                  Sick Leave\n                </option>\n                <option\n                  value=\"Casual Leave\"\n                  selected={props.editData[\"Leavetype\"] === \"Casual Leave\"}\n                >\n                  Casual Leave\n                </option>\n                <option\n                  value=\"Privilege Leave\"\n                  selected={props.editData[\"Leavetype\"] === \"Privilege Leave\"}\n                >\n                  Privilege Leave\n                </option>\n              </Form.Control>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              FromDate\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control\n                type=\"date\"\n                required\n                value={FromDateData}\n                onChange={(e) => onFromDateDataChange(e)}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              ToDate\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control\n                type=\"date\"\n                required\n                value={ToDateData}\n                onChange={(e) => onToDateDataChange(e)}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Reason for leave\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control\n                type=\"Text\"\n                placeholder=\"Reason for leave\"\n                required\n                value={ReasonforleaveData}\n                onChange={(e) => onReasonforleaveDataChange(e)}\n              />\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Leave Status\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control as=\"select\" required>\n                <option value=\"1\" selected disabled>\n                  Pending\n                </option>\n              </Form.Control>\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row} id=\"form-submit-button\">\n            <Col sm={{ span: 10, offset: 2 }}>\n              <Button type=\"submit\">Update</Button>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} id=\"form-cancel-button\">\n            <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n              <Button type=\"reset\" onClick={props.onFormEditClose}>\n                cancel\n              </Button>\n            </Col>\n          </Form.Group>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default LeaveApplicationEmpForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpPresonal\\PersonalInfoFormEdit.jsx",["1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103"],"import React, { useState } from \"react\";\nimport \"./PersonalInfoFormEdit.css\";\nimport axios from \"axios\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\nimport personalinfoimage from \"./Personalinfo.svg\";\n\nconst PersonalInfoFormEdit = (props) => {\n  const [state, setState] = useState({\n    GenderData: props.editData[\"Gender\"],\n    EmailData: props.editData[\"Email\"],\n    FirstNameData: props.editData[\"FirstName\"],\n    MiddleNameData: props.editData[\"MiddleName\"],\n    LastNameData: props.editData[\"LastName\"],\n    DOBData: props.editData[\"DOB\"].slice(0, 10),\n    ContactNoData: props.editData[\"ContactNo\"],\n    EmergencyContactNoData: props.editData[\"EmergencyContactNo\"] || \"\",\n    PANcardNoData: props.editData[\"PANcardNo\"] || \"\",\n    HobbiesData: props.editData[\"Hobbies\"] || \"\",\n    PresentAddressData: props.editData[\"PresentAddress\"] || \"\",\n    PermanetAddressData: props.editData[\"PermanetAddress\"] || \"\",\n    presonalEmail: props.editData[\"presonalEmail\"] || \"\",\n    role: props.editData[\"role\"] || \"\"\n  });\n  const onEmailDataChange = (e) => {\n    setState({ ...state, EmailData: e.target.value });\n  };\n\n  const onFirstNameDataChange = (e) => {\n    setState({ ...state, FirstNameData: e.target.value });\n  };\n  const onMiddleNameDataChange = (e) => {\n    setState({ ...state, MiddleNameData: e.target.value });\n  };\n  const onLastNameDataChange = (e) => {\n    setState({ ...state, LastNameData: e.target.value });\n  };\n  const onContactNoDataChange = (e) => {\n    setState({ ...state, ContactNoData: e.target.value });\n  };\n  const onPANcardNoDataChange = (e) => {\n    setState({ ...state, PANcardNoData: e.target.value });\n  };\n  const onpresonalemailDataChange = (e) => {\n    setState({ presonalEmail: e.target.value });\n  };\n  const onEmergencyContactNoDataChange = (e) => {\n    setState({ ...state, EmergencyContactNoData: e.target.value });\n  };\n  const onHobbiesDataChange = (e) => {\n    setState({ ...state, HobbiesData: e.target.value });\n  };\n  const onPresentAddressDataChange = (e) => {\n    setState({ ...state, PresentAddressData: e.target.value });\n  };\n  const onPermanentAddressDataChange = (e) => {\n    setState({ ...state, PermanetAddressData: e.target.value });\n  };\n\n  const onGenderChange = (e) => {\n    setState({ ...state, GenderData: e.target.value });\n    props.onGenderChange(e);\n  };\n  const onDOBDataChange = (e) => {\n    console.log(e.target.value);\n    setState({ ...state, DOBData: e.target.value });\n  };\n\n  return (\n    <div className=\"container-fluid position-relative\">\n      <div\n        style={{ marginTop: \"-.5rem\", minHeight: \"95vh\" }}\n        className=\"row bg-light p-2\"\n      >\n        <div className=\"col-md-4 col-0\">\n          <img src={personalinfoimage} alt=\"\" />\n        </div>\n        <div className=\"col-md-8 col-0 \">\n          <div className=\"\">\n            <Form\n              style={{ overflow: \"auto\", maxHeight: \"600px\" }}\n              className=\"row row-gap-2 rounded-2 shadow-sm m-auto justify-content-between bg-white\"\n              onSubmit={(e) =>\n                props.onPersonalInfoEditUpdate(props.editData, e)\n              }\n            >\n              <h4\n                style={{ position: \"sticky\", top: \"0\", zIndex: \"2\" }}\n                className=\"fw-bold text-muted py-3 w-100 bg-light \"\n              >\n                Edit Employee info\n              </h4>\n              <Form.Group\n                className=\"col-12 col-md-6 d-flex flex-column gap-1\"\n                as={Row}\n              >\n                <Form.Label className=\"fw-bold text-muted\" column>\n                  First Name\n                </Form.Label>\n                <Col className=\"form-input\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"First Name\"\n                    required\n                    disabled\n                    value={state.FirstNameData}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Group\n                className=\"col-12 col-md-6 d-flex flex-column gap-1\"\n                as={Row}\n              >\n                <Form.Label className=\"fw-bold text-muted\" column>\n                  Middle Name\n                </Form.Label>\n                <Col className=\"form-input\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Middle Name\"\n                    required\n                    disabled\n                    value={state.MiddleNameData}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Group\n                className=\"col-12 col-md-6 d-flex flex-column gap-1\"\n                as={Row}\n              >\n                <Form.Label className=\"fw-bold text-muted\" column>\n                  Last Name\n                </Form.Label>\n                <Col className=\"form-input\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Last Name\"\n                    disabled\n                    required\n                    value={state.LastNameData}\n                  />\n                </Col>\n              </Form.Group>\n\n              <Form.Group\n                className=\"col-12 col-md-6 d-flex flex-column gap-1\"\n                as={Row}\n              >\n                <Form.Label className=\"fw-bold text-muted\" as=\"legend\" column>\n                  Gender\n                </Form.Label>\n                <Col className=\"d-flex gap-3\">\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    label=\"Male\"\n                    value=\"male\"\n                    name=\"gender\"\n                    className=\"d-flex gap-1 shadow-sm py-1 px-5 rounded-5\"\n                    onChange={onGenderChange}\n                    checked={state.GenderData == \"male\"}\n                    required\n                  />\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    label=\"Female\"\n                    value=\"female\"\n                    name=\"gender\"\n                    className=\"d-flex gap-1 shadow-sm py-1 px-5 rounded-5\"\n                    onChange={onGenderChange}\n                    checked={state.GenderData == \"female\"}\n                    required\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Group\n                className=\"col-12 col-md-6 d-flex flex-column gap-1\"\n                as={Row}\n              >\n                <Form.Label className=\"fw-bold text-muted\" column>\n                  Contact No\n                </Form.Label>\n                <Col className=\"form-input\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Contact No \"\n                    required\n                    value={state.ContactNoData}\n                    onChange={(value) => onContactNoDataChange(value)}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Group\n                className=\"col-12 col-md-6 d-flex flex-column gap-1\"\n                as={Row}\n              >\n                <Form.Label className=\"fw-bold text-muted\" column>\n                  Emergency Contact\n                </Form.Label>\n                <Col className=\"form-input\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Emergency Contact No\"\n                    required\n                    value={state.EmergencyContactNoData}\n                    onChange={(value) => onEmergencyContactNoDataChange(value)}\n                  />\n                </Col>\n              </Form.Group>\n\n              <Form.Group\n                className=\"col-12 col-md-6 d-flex flex-column gap-1\"\n                as={Row}\n              >\n                <Form.Label className=\"fw-bold text-muted\" column>\n                  Work Email\n                </Form.Label>\n                <Col className=\"form-input\">\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    disabled\n                    required\n                    value={state.EmailData}\n                    onChange={(value) => onEmailDataChange(value)}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Group\n                className=\"col-12 col-md-6 d-flex flex-column gap-1\"\n                as={Row}\n              >\n                <Form.Label className=\"fw-bold text-muted\" column>\n                  PAN Card No\n                </Form.Label>\n                <Col className=\"form-input\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"PAN Card No\"\n                    required\n                    value={state.PANcardNoData}\n                    onChange={(value) => onPANcardNoDataChange(value)}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Group\n                className=\"col-12 col-md-6 d-flex flex-column gap-1\"\n                as={Row}\n              >\n                <Form.Label className=\"fw-bold text-muted\" column>\n                  Presonal Email\n                </Form.Label>\n                <Col className=\"form-input\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Presonal Email\"\n                    required\n                    value={state.presonalEmail}\n                    onChange={(value) => onpresonalemailDataChange(value)}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Group\n                className=\"col-12 col-md-6 d-flex flex-column gap-1\"\n                as={Row}\n              >\n                <Form.Label className=\"fw-bold text-muted\" column>\n                  DOB\n                </Form.Label>\n                <Col className=\"form-input\">\n                  <Form.Control\n                    type=\"date\"\n                    placeholder=\"DOB\"\n                    required\n                    //   value={props.editData[\"DOB\"].slice(0, 10)}\n                    value={state.DOBData}\n                    onChange={(value) => onDOBDataChange(value)}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Group\n                className=\"col-12 col-md-6 d-flex flex-column gap-1\"\n                as={Row}\n              >\n                <Form.Label className=\"fw-bold text-muted\" column>\n                  Blood Group\n                </Form.Label>\n\n                <Col className=\"form-input\">\n                  <Form.Control as=\"select\" required>\n                    <option value=\"\" disabled selected>\n                      Select your option\n                    </option>\n                    <option\n                      value=\"A+\"\n                      selected={props.editData[\"BloodGroup\"] == \"A+\"}\n                    >\n                      A+\n                    </option>\n                    <option\n                      value=\"A-\"\n                      selected={props.editData[\"BloodGroup\"] == \"A-\"}\n                    >\n                      A-\n                    </option>\n                    <option\n                      value=\"B+\"\n                      selected={props.editData[\"BloodGroup\"] == \"B+\"}\n                    >\n                      B+\n                    </option>\n                    <option\n                      value=\"B-\"\n                      selected={props.editData[\"BloodGroup\"] == \"B-\"}\n                    >\n                      B-\n                    </option>\n                    <option\n                      value=\"AB+\"\n                      selected={props.editData[\"BloodGroup\"] == \"AB+\"}\n                    >\n                      AB+\n                    </option>\n                    <option\n                      value=\"AB-\"\n                      selected={props.editData[\"BloodGroup\"] == \"AB-\"}\n                    >\n                      AB-\n                    </option>\n                    <option\n                      value=\"O+\"\n                      selected={props.editData[\"BloodGroup\"] == \"O+\"}\n                    >\n                      O+\n                    </option>\n                    <option\n                      value=\"O-\"\n                      selected={props.editData[\"BloodGroup\"] == \"O-\"}\n                    >\n                      O-\n                    </option>\n                  </Form.Control>\n                </Col>\n              </Form.Group>\n\n              <Form.Group\n                className=\"col-12 col-md-6 d-flex flex-column gap-1\"\n                as={Row}\n              >\n                <Form.Label className=\"fw-bold text-muted\" column>\n                  Hobbies\n                </Form.Label>\n                <Col className=\"form-input\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Hobbies\"\n                    required\n                    value={state.HobbiesData}\n                    onChange={(value) => onHobbiesDataChange(value)}\n                  />\n                </Col>\n              </Form.Group>\n\n              <Form.Group\n                className=\"col-12 col-md-6 d-flex flex-column gap-1\"\n                as={Row}\n              >\n                <Form.Label className=\"fw-bold text-muted\" column>\n                  Present Address\n                </Form.Label>\n                <Col className=\"form-input\">\n                  <Form.Control\n                    as=\"textarea\"\n                    rows=\"3\"\n                    plassholder=\"Present Address\"\n                    required\n                    value={state.PresentAddressData}\n                    onChange={(value) => onPresentAddressDataChange(value)}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Group\n                className=\"col-12 col-md-6 d-flex flex-column gap-1\"\n                as={Row}\n              >\n                <Form.Label className=\"fw-bold text-muted\" column>\n                  Permanet Address\n                </Form.Label>\n                <Col className=\"form-input\">\n                  <Form.Control\n                    as=\"textarea\"\n                    rows=\"3\"\n                    plassholder=\" Permanet Address\"\n                    value={state.PermanetAddressData}\n                    onChange={(value) => onPermanentAddressDataChange(value)}\n                  />\n                </Col>\n              </Form.Group>\n\n              <div className=\"d-flex m-0 gap-3 py-2\">\n                <button className=\"btn btn-primary px-5\" type=\"submit\">\n                  Submit\n                </button>\n                <button\n                  className=\"btn btn-danger px-5\"\n                  type=\"reset\"\n                  onClick={props.onFormEditClose}\n                >\n                  cancel\n                </button>\n              </div>\n            </Form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PersonalInfoFormEdit;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpPresonal\\PersonalInfoTable.jsx",["1104","1105","1106","1107","1108","1109"],"import React, { useEffect, useState } from \"react\";\nimport \"./PersonalInfoTable.css\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport { Link } from \"react-router-dom\";\nimport \"./profilePage.css\";\nimport { FaCamera, FaEye, FaFilePdf, FaRegEdit } from \"react-icons/fa\";\nimport { IoMdDownload } from \"react-icons/io\";\nimport FloralAbstract from \"./FloralAbstract.jpg\";\nimport { GoDotFill } from \"react-icons/go\";\nimport { IoArrowBackCircle, IoEye } from \"react-icons/io5\";\nimport Education from \"../EmpEducation/Education\";\nimport WorkExperience from \"../EmpWorkExp/WorkExperience\";\nimport FamilyInfo from \"../EmpFamily/FamilyInfo\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nconst PersonalInfoTable = (props) => {\n  const [personalInfoData, setPersonalInfoData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [rowData, setRowData] = useState([]);\n  const [activeSection, setActiveSection] = useState(\"personalInfo\");\n  const [showDownloadbtn, setShowDownloadbtn] = useState(false);\n  const [visibleDocs, setVisibleDocs] = useState(true);\n\n  const loadPersonalInfoData = () => {\n    axios\n      .get(`http://localhost:4000/api/personal-info/${props.data[\"_id\"]}`, {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        const data = response.data;\n        setPersonalInfoData(data);\n        setLoading(false);\n\n        const temp = {\n          data,\n          FirstName: data[\"FirstName\"] || \"Not Avaiable\",\n          MiddleName: data[\"MiddleName\"] || \"Not Avaiable\",\n          LastName: data[\"LastName\"] || \"Not Avaiable\",\n          empID: data[\"empID\"] || \"Not Avaiable\",\n          Gender: data[\"Gender\"] || \"Not Avaiable\",\n          ContactNo: data[\"ContactNo\"] || \"Not Avaiable\",\n          Email: data[\"Email\"] || \"Not Avaiable\",\n          PANcardNo: data[\"PANcardNo\"] || \"Not Avaiable\",\n          DOB: data[\"DOB\"].slice(0, 10) || \"Not Avaiable\",\n          BloodGroup: data[\"BloodGroup\"] || \"Not Avaiable\",\n          EmergencyContactNo: data[\"EmergencyContactNo\"] || \"Not Avaiable\",\n          Hobbies: data[\"Hobbies\"] || \"Not Avaiable\",\n          PresentAddress: data[\"PresentAddress\"] || \"Not Avaiable\",\n          PermanetAddress: data[\"PermanetAddress\"] || \"Not Avaiable\",\n          RoleName: data[\"role\"][0] ? data[\"role\"][0][\"RoleName\"] : \"\",\n          DateOfJoining: data[\"DateOfJoining\"].slice(0, 10),\n\n          DepartmentName: data[\"department\"][0]\n            ? data[\"department\"][0][\"DepartmentName\"]\n            : \"\",\n          Account:\n            data[\"Account\"] === 1\n              ? \"Admin\"\n              : data[\"Account\"] === 2\n              ? \"HR\"\n              : data[\"Account\"] === 3\n              ? \"Employee\"\n              : data[\"Account\"] === 4\n              ? \"Manager\"\n              : \"\",\n          PositionName: data[\"position\"][0]\n            ? data[\"position\"][0][\"PositionName\"]\n            : \"\"\n        };\n\n        setRowData([temp]);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    loadPersonalInfoData();\n  }, [props.data]);\n\n  const onToggleSection = (section) => {\n    setActiveSection(section);\n  };\n\n  const onPersonalInfoDelete = (e) => {\n    console.log(e);\n    if (window.confirm(\"Are you sure to delete this record? \")) {\n      axios\n        .delete(`http://localhost:4000/api/personalInfo/${e}`, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then(() => {\n          loadPersonalInfoData();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const renderEditButton = (params) => {\n    if (props.back) {\n      return <React.Fragment />;\n    }\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => props.onEditPersonalInfo(params.data.data)}\n      />\n    );\n  };\n  const getBackgroundColor = (accountType) => {\n    switch (accountType) {\n      case \"Admin\":\n        return \"#8EAC50\";\n      case \"HR\":\n        return \"#0079FF\";\n      case \"Employee\":\n        return \"purple\";\n      default:\n        return \"#FF9B50\";\n    }\n  };\n\n  return (\n    <div style={{ minHeight: \"50vh\", overflow: \"auto\", marginTop: \"-.5rem\" }}>\n      <div id=\"clear-both\" />\n      {!loading ? (\n        <div style={{ position: \"relative\" }} className=\"row\">\n          <div\n            style={{\n              height: \"25rem\",\n              background:\n                \"url(https://images.unsplash.com/photo-1621947081720-86970823b77a?q=80&w=1932&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)\",\n              backgroundPosition: \"center\",\n              backgroundSize: \"cover\",\n              marginTop: \"-.5rem\"\n            }}\n            className=\"col-12\"\n          >\n            {\" \"}\n            <Link to=\"/hr/employee\">\n              <button\n                className=\"btn fw-bold d-flex gap-3 \"\n                style={{ background: \"white\", color: \"black\" }}\n                id=\"add-button\"\n              >\n                <IoArrowBackCircle className=\"my-auto fs-5\" />{\" \"}\n                <span my-auto>Back</span>\n              </button>\n            </Link>\n          </div>\n          <div\n            style={{\n              height: \"35rem\",\n              position: \"fixed\",\n              top: \"20%\",\n              zIndex: \"5\"\n            }}\n            className=\"col-12 row mx-auto justify-content-center gap-4 w-100\"\n          >\n            <div\n              style={{\n                height: \"33rem\",\n                background: `url(${FloralAbstract})`,\n                backgroundPosition: \"center\",\n                backgroundSize: \"cover\",\n                overflow: \"hidden\"\n              }}\n              className=\"col-12 m-0 p-0 rounded-3 col-lg-3 bg-white shadow\"\n            >\n              {rowData.map((items, index) => {\n                return (\n                  <div\n                    style={{\n                      backgroundColor: \"rgba(258,258,258,.95)\",\n                      position: \"relative\"\n                    }}\n                    className=\"d-flex flex-column gap-3 py-2 h-100\"\n                    key={index}\n                  >\n                    <div\n                      className=\"d-flex flex-column gap-2\"\n                      style={{ width: \"100%\", padding: \"1rem 1rem\" }}\n                    >\n                      <div\n                        className=\"mx-auto\"\n                        style={{\n                          height: \"120px\",\n                          width: \"120px\",\n                          border: \"6px solid #39A7FF\",\n                          borderRadius: \"50%\",\n                          position: \"relative\"\n                        }}\n                      >\n                        <img\n                          style={{\n                            height: \"100%\",\n                            width: \"100%\",\n                            borderRadius: \"50%\",\n                            objectFit: \"cover\"\n                          }}\n                          src={\n                            items?.data?.profile?.image_url\n                              ? items?.data?.profile?.image_url\n                              : \"https://a.storyblok.com/f/191576/1200x800/215e59568f/round_profil_picture_after_.webp\"\n                          }\n                          alt=\"employee\"\n                        />\n                        <button\n                          style={{\n                            height: \"30px\",\n                            width: \"30px\",\n                            borderRadius: \"50%\",\n                            border: \"3px solid white\",\n                            position: \"absolute\",\n                            bottom: \"0\",\n                            right: \"0\"\n                          }}\n                          className=\"btn btn-primary text-white d-flex p-1 \"\n                        >\n                          <FaCamera className=\"m-auto\" />\n                        </button>\n                      </div>\n                      <p\n                        style={{ position: \"absolute\", top: \"0\", left: \"0\" }}\n                        className=\"btn btn-success px-2 py-0 m-2 rounded-5 fw-bold shadow\"\n                      >\n                        {items.empID}\n                      </p>\n                      {/* <p className=\"m-auto fw-bold fs-6\">{items.empID}</p> */}\n                      <h3 className=\"text-capitalize my-0 fw-bold text-muted text-center\">\n                        {items.FirstName} {personalInfoData.LastName}\n                      </h3>\n                      <p className=\"text-capitalize my-0 fw-bold text-center\">\n                        {items.RoleName} {items.DepartmentName}\n                      </p>\n                    </div>\n                    <div className=\"d-flex flex-column justify-content-between gap-2\">\n                      <div className=\"p-2 fw-bold mx-3 d-flex bg-white justify-content-between shadow rounded-5\">\n                        <span\n                          style={{ alignItems: \"center\" }}\n                          className=\"my-auto d-flex gap-2 \"\n                        >\n                          <GoDotFill className=\"text-primary fs-4\" />\n                          Total Assigned Task\n                        </span>{\" \"}\n                        <span className=\"fw-bold  text-primary my-auto\">\n                          123\n                        </span>\n                      </div>\n                      <div className=\"p-2 fw-bold mx-3 d-flex bg-white justify-content-between shadow rounded-5\">\n                        <span\n                          style={{ alignItems: \"center\" }}\n                          className=\"my-auto d-flex gap-2 \"\n                        >\n                          <GoDotFill className=\"text-warning fs-4\" />\n                          Total Active Task\n                        </span>{\" \"}\n                        <span className=\"fw-bold text-warning my-auto\">\n                          123\n                        </span>\n                      </div>\n                      <div className=\"p-2 fw-bold mx-3 d-flex  bg-white justify-content-between shadow rounded-5\">\n                        <span\n                          style={{ alignItems: \"center\" }}\n                          className=\"my-auto d-flex gap-2 \"\n                        >\n                          {\" \"}\n                          <GoDotFill className=\"text-danger fs-4\" />\n                          Total Cancelled Task\n                        </span>{\" \"}\n                        <span className=\"fw-bold my-auto text-danger\">123</span>\n                      </div>\n                      <div className=\"p-2 fw-bold  bg-white mx-3 d-flex justify-content-between shadow rounded-5\">\n                        <span\n                          style={{ alignItems: \"center\" }}\n                          className=\"my-auto d-flex gap-2 \"\n                        >\n                          <GoDotFill className=\"text-success fs-4\" />\n                          Total Completed Task\n                        </span>{\" \"}\n                        <span className=\"fw-bold my-auto text-success\">\n                          123\n                        </span>\n                      </div>\n                    </div>\n                    <span\n                      onClick={() => props.onEditPersonalInfo(items.data)}\n                      style={{\n                        borderBottom:\n                          activeSection === \"documentDetails\"\n                            ? \"3px solid blue\"\n                            : \"none\",\n                        borderRadius: \"0\",\n                        position: \"absolute\",\n                        bottom: \"0\",\n                        left: \"0\",\n                        cursor: \"pointer\"\n                      }}\n                      className=\"btn px-3 w-100 fw-bold btn-primary \"\n                    >\n                      Update Details\n                    </span>\n                  </div>\n                );\n              })}\n            </div>\n            <div\n              id=\"personalinfo\"\n              style={{ height: \"33rem\" }}\n              className=\"col-12 rounded col-lg-7 p-0 m-0 bg-white shadow\"\n            >\n              <div className=\"shift-pages w-100 shadow-sm d-flex gap-3 px-2 mb-1\">\n                <span\n                  onClick={() => onToggleSection(\"personalInfo\")}\n                  style={{\n                    borderBottom:\n                      activeSection === \"personalInfo\"\n                        ? \"3px solid blue\"\n                        : \"none\",\n                    borderRadius: \"0\"\n                  }}\n                  className=\"btn py-3 px-2 fw-bold\"\n                >\n                  Personal Info\n                </span>\n                <span\n                  onClick={() => onToggleSection(\"companyInfo\")}\n                  style={{\n                    borderBottom:\n                      activeSection === \"companyInfo\"\n                        ? \"3px solid blue\"\n                        : \"none\",\n                    borderRadius: \"0\"\n                  }}\n                  className=\"btn py-3 px-2 fw-bold\"\n                >\n                  Company Info\n                </span>\n                <span\n                  onClick={() => onToggleSection(\"Educationalinfo\")}\n                  style={{\n                    borderBottom:\n                      activeSection === \"Educationalinfo\"\n                        ? \"3px solid blue\"\n                        : \"none\",\n                    borderRadius: \"0\"\n                  }}\n                  className=\"btn py-3 px-2 fw-bold\"\n                >\n                  Education Details\n                </span>\n                <span\n                  onClick={() => onToggleSection(\"documentDetails\")}\n                  style={{\n                    borderBottom:\n                      activeSection === \"documentDetails\"\n                        ? \"3px solid blue\"\n                        : \"none\",\n                    borderRadius: \"0\"\n                  }}\n                  className=\"btn py-3 px-2 fw-bold\"\n                >\n                  Documents\n                </span>\n                <span\n                  onClick={() => onToggleSection(\"WorkExperience\")}\n                  style={{\n                    borderBottom:\n                      activeSection === \"WorkExperience\"\n                        ? \"3px solid blue\"\n                        : \"none\",\n                    borderRadius: \"0\"\n                  }}\n                  className=\"btn py-3 px-2 fw-bold\"\n                >\n                  Work Experience{\" \"}\n                </span>\n                <span\n                  onClick={() => onToggleSection(\"otherInfo\")}\n                  style={{\n                    borderBottom:\n                      activeSection === \"otherInfo\" ? \"3px solid blue\" : \"none\",\n                    borderRadius: \"0\"\n                  }}\n                  className=\"btn py-3 px-3 fw-bold\"\n                >\n                  Others\n                </span>\n              </div>\n              {activeSection === \"personalInfo\" && (\n                <div className=\"row\">\n                  <div\n                    id=\"companyinfo\"\n                    style={{\n                      overflow: \"hidden auto\",\n                      height: \"29rem\",\n                      scrollbarWidth: \"thin\"\n                    }}\n                  >\n                    {rowData.map((items, index) => {\n                      return (\n                        <div className=\"row justify-content-evenly py-3 row-gap-3\">\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              First Name\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm text-capitalize\"\n                              value={items.FirstName}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Last Name\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm text-capitalize\"\n                              value={items.LastName}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Phone Number\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm\"\n                              value={items.ContactNo}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Emergency Contact\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm\"\n                              value={items.EmergencyContactNo}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Email Address\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm\"\n                              value={items.Email}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Date of Birth\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm\"\n                              value={items.DOB.slice(0, 10)}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Blood Group\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm\"\n                              value={items.BloodGroup}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              PAN Number\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm text-uppercase\"\n                              value={items.PANcardNo}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Present Address\n                            </label>\n\n                            <textarea\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm text-capitalize\"\n                              value={items.PresentAddress}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Permanent Address\n                            </label>\n\n                            <textarea\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm text-capitalize\"\n                              value={items.PermanetAddress}\n                            />\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n              {activeSection === \"companyInfo\" && (\n                <div className=\"row\">\n                  <div\n                    style={{\n                      overflow: \"hidden auto\",\n                      height: \"29rem\",\n                      scrollbarWidth: \"thin\"\n                    }}\n                  >\n                    {rowData.map((items, index) => {\n                      return (\n                        <div className=\"row justify-content-evenly py-3 row-gap-3\">\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Employee ID\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm text-uppercase\"\n                              value={items.empID}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Email\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm\"\n                              value={items.Email}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Role\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm text-capitalize\"\n                              value={items.RoleName}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Position\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm text-capitalize\"\n                              value={items.PositionName}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Department\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm text-capitalize\"\n                              value={items.DepartmentName}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Date of Joining\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm\"\n                              value={items.DateOfJoining}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Account Access\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm\"\n                              value={items.Account}\n                            />\n                          </div>\n                          <div className=\"col-12 col-sm-5 d-flex flex-column\">\n                            <label htmlFor=\"\" className=\" fw-bold text-muted\">\n                              Reporting Manager\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control rounded-1 shadow-sm\"\n                              value={items.BloodGroup}\n                            />\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n              {activeSection === \"Educationalinfo\" && (\n                // <div className=\"w-100 container \">Education</div>\n                <div className=\"w-100 container \">\n                  <Education />\n                </div>\n              )}\n              {activeSection === \"documentDetails\" && (\n                <div\n                  style={{ overflow: \"hidden\", height: \"29rem\" }}\n                  className=\" row px-4  py-2 gap-2\"\n                >\n                  <div\n                    onMouseEnter={() => setShowDownloadbtn(true)}\n                    onMouseLeave={() => setShowDownloadbtn(false)}\n                    className=\"col-12 col-sm-6 col-md-4 d-flex flex-column gap-2  rounded px-2 py-1 shadow\"\n                    style={{ height: \"fit-content\" }}\n                  >\n                    <div\n                      style={{\n                        height: \"150px\",\n                        width: \"100%\",\n                        overflow: \"hidden\",\n                        background:\n                          \"url(https://pdfimages.wondershare.com/pdfelement/7-guide/background.jpg)\",\n                        backgroundPosition: \"center\",\n                        backgroundSize: \"cover\",\n                        opacity: \"85%\",\n                        boxShadow:\n                          \"0 0 10px 1px rgba(192, 185, 185, 0.758) inset\"\n                      }}\n                      className=\"bg-primary m-auto position-relative \"\n                    >\n                      <div\n                        style={{\n                          height: \"100%\",\n                          width: \"100%\",\n                          position: \"absolute\",\n                          top: \"0\",\n                          left: \"0\",\n                          background: \"rgba(0,0,0,.4)\",\n                          display: showDownloadbtn ? \"flex\" : \"none\",\n                          justifyContent: \"center\",\n                          alignItems: \"center\",\n                          gap: \"1rem\"\n                        }}\n                      >\n                        <a\n                          target=\"_blank\"\n                          href={FloralAbstract}\n                          style={{ height: \"40px\", width: \"40px\" }}\n                          className=\"btn p-0 btn bg-white text-primary shadow d-flex\"\n                        >\n                          <IoEye className=\"m-auto fs-4\" />\n                        </a>\n                        <a\n                          download={\"floraAbstract\"}\n                          href={FloralAbstract}\n                          style={{ height: \"40px\", width: \"40px\" }}\n                          className=\"btn p-0 btn bg-white text-primary shadow d-flex\"\n                        >\n                          <IoMdDownload className=\"m-auto fs-4\" />\n                        </a>\n                      </div>\n                      <div\n                        style={{\n                          height: \"30px\",\n                          width: \"30px\",\n                          position: \"absolute\",\n                          bottom: \"0\",\n                          right: \"0\",\n                          opacity: \"100%\"\n                        }}\n                        className=\"bg-white d-flex shadow-sm text-danger\"\n                      >\n                        <FaFilePdf className=\"m-auto fs-3\" />\n                      </div>\n                    </div>\n                    <p\n                      style={{ fontSize: \".9rem\" }}\n                      className=\"text-muted fw-bold m-0\"\n                    >\n                      Addhar Card\n                    </p>\n                    <div className=\"row m-auto\">\n                      <input\n                        style={{ border: \"none\" }}\n                        type={visibleDocs ? \"password\" : \"text\"}\n                        className=\"m-0 p-0 text-primary col-9\"\n                        value={125445584250}\n                      />{\" \"}\n                      <span\n                        onClick={() =>\n                          !visibleDocs\n                            ? setVisibleDocs(true)\n                            : setVisibleDocs(false)\n                        }\n                        style={{ cursor: \"pointer\" }}\n                        className=\"btn p-0 col-3\"\n                      >\n                        <FaEye />\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              )}\n              {activeSection === \"WorkExperience\" && (\n                <div className=\"w-100 container \">\n                  <WorkExperience />\n                </div>\n              )}\n              {activeSection === \"otherInfo\" && (\n                <div className=\"w-100 container \">\n                  <FamilyInfo />\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div id=\"loading-bar\">\n          <RingLoader\n            css={override}\n            sizeUnit={\"px\"}\n            size={50}\n            color={\"#0000ff\"}\n            loading={true}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PersonalInfoTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpEducation\\EducationFormEdit.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\attendance\\SelfAttendance.jsx",["1110","1111","1112","1113","1114","1115"],"import React, { useState, useEffect, memo } from \"react\";\r\nimport axios from \"axios\";\r\nimport { TfiReload } from \"react-icons/tfi\";\r\nimport { FaCircleInfo } from \"react-icons/fa6\";\r\nimport { MdOutlineRefresh } from \"react-icons/md\";\r\n\r\nconst SelfAttendance = () => {\r\n  const [employees, setEmployees] = useState([]);\r\n  const [attendanceData, setAttendanceData] = useState(null);\r\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\r\n  const [isButtonClicked, setIsButtonClicked] = useState(false);\r\n  const [hoveredDate, setHoveredDate] = useState(null);\r\n  const [isInfoHovering, setIsInfoHovering] = useState(false);\r\n  const empMail = localStorage.getItem(\"Email\");\r\n  const employeeId = localStorage.getItem(\"_id\");\r\n\r\n  const handleMouseEnter = (date) => {\r\n    setHoveredDate(date);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoveredDate(null);\r\n  };\r\n\r\n  const handleInfoMouseEnter = () => {\r\n    setIsInfoHovering(true);\r\n  };\r\n\r\n  const handleInfoMouseLeave = () => {\r\n    setIsInfoHovering(false);\r\n  };\r\n\r\n  //   useEffect(() => {\r\n  //     fetchEmployees();\r\n  //   }, []);\r\n\r\n  //   const fetchEmployees = async () => {\r\n  //     try {\r\n  //       const response = await axios.get(\"http://localhost:4000/api/employee\", {\r\n  //         headers: {\r\n  //           authorization: localStorage.getItem(\"token\") || \"\"\r\n  //         }\r\n  //       });\r\n  //       setEmployees(response.data);\r\n  //     } catch (error) {\r\n  //       console.error(\"Error fetching employees:\", error);\r\n  //     }\r\n  //   };\r\n\r\n  // const handleFetchAttendance = async () => {\r\n  //   try {\r\n  //     const response = await axios.get(\r\n  //       `http://localhost:4000/api/attendance/${employeeId}`,\r\n  //       {\r\n  //         headers: {\r\n  //           Authorization: `Bearer ${localStorage.getItem(\"token\") || \"\"}`\r\n  //         }\r\n  //       }\r\n  //     );\r\n  //     let singleUser = response.data.filter((val) => {\r\n  //       return val.employeeObjID._id === employeeId;\r\n  //     });\r\n  //     setAttendanceData(singleUser.length > 0 ? singleUser[0] : null);\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching attendance data:\", error);\r\n  //   }\r\n  // };\r\n\r\n  // setIsButtonClicked(true);\r\n  useEffect(() => {\r\n    const handleFetchAttendance = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:4000/api/attendance/${employeeId}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem(\"token\") || \"\"}`\r\n            }\r\n          }\r\n        );\r\n\r\n        let singleUser = response.data.filter((val) => {\r\n          return val.employeeObjID && val.employeeObjID.Email === empMail;\r\n        });\r\n\r\n        setAttendanceData(() => {\r\n          return singleUser.length > 0 ? singleUser[0] : null;\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error fetching attendance data:\", error);\r\n      }\r\n    };\r\n\r\n    handleFetchAttendance();\r\n  }, [employeeId, empMail]);\r\n\r\n  const getTotalHolidays = () => {\r\n    if (\r\n      attendanceData &&\r\n      attendanceData.user &&\r\n      attendanceData.user.holidayObjID\r\n    ) {\r\n      return attendanceData.user.holidayObjID.holidays.length;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  const getMonthName = (monthNumber) => {\r\n    switch (monthNumber) {\r\n      case 1:\r\n        return \"January\";\r\n      case 2:\r\n        return \"February\";\r\n      case 3:\r\n        return \"March\";\r\n      case 4:\r\n        return \"April\";\r\n      case 5:\r\n        return \"May\";\r\n      case 6:\r\n        return \"June\";\r\n      case 7:\r\n        return \"July\";\r\n      case 8:\r\n        return \"August\";\r\n      case 9:\r\n        return \"September\";\r\n      case 10:\r\n        return \"October\";\r\n      case 11:\r\n        return \"November\";\r\n      case 12:\r\n        return \"December\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const getMonthsForYear = (year) => {\r\n    if (year === new Date().getFullYear()) {\r\n      return Array.from({ length: new Date().getMonth() + 1 }, (_, i) => i + 1);\r\n    }\r\n    return Array.from({ length: 12 }, (_, i) => i + 1);\r\n  };\r\n\r\n  const getYears = () => {\r\n    if (attendanceData && attendanceData.years) {\r\n      const currentYear = new Date().getFullYear();\r\n      return attendanceData.years.filter((year) => year.year <= currentYear);\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const millisecondsToTime = (milliseconds) => {\r\n    const millisecond = Math.floor(milliseconds);\r\n    const seconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n\r\n    const formattedHours = String(hours).padStart(2, \"0\");\r\n    const formattedMinutes = String(minutes % 60).padStart(2, \"0\");\r\n    const formattedSeconds = String(seconds % 60).padStart(2, \"0\");\r\n    const formattedMillisecond = String(millisecond % 60).padStart(2, \"0\");\r\n\r\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}:${formattedMillisecond}`;\r\n  };\r\n\r\n  const getAttendanceMark = (date) => {\r\n    const loginTime = date && date.loginTime[0];\r\n    if (loginTime) {\r\n      const [loginHour, loginMinute] = loginTime.split(\":\").map(Number);\r\n      if (loginHour > 9 || (loginHour === 9 && loginMinute > 45)) {\r\n        return \"H\";\r\n      } else if (loginHour > 9 || (loginHour === 9 && loginMinute > 30)) {\r\n        return \"L\";\r\n      }\r\n    }\r\n    return loginTime ? \"P\" : \"A\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column p-5 gap-3\">\r\n      {/* <div className=\"d-flex gap-3 \">\r\n        <div>\r\n          <select\r\n            className=\"form-select w-100 shadow-sm text-muted\"\r\n            id=\"employeeId\"\r\n            value={employeeId}\r\n            onChange={handleEmployeeChange}\r\n          >\r\n            <option value=\"\" disabled>\r\n              --Select an employee--\r\n            </option>\r\n\r\n            {employees\r\n              .sort((a, b) => a.empID - b.empID)\r\n              .map((employee) => (\r\n                <option\r\n                  className=\"text-uppercase\"\r\n                  key={employee._id}\r\n                  value={employee._id}\r\n                >\r\n                  🪪 ({employee.empID}) {employee.FirstName}-{employee.LastName}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n\r\n        <button\r\n          className=\"btn shadow btn-dark fw-bolder\"\r\n          style={{ width: \"fit-content\" }}\r\n          onClick={handleFetchAttendance}\r\n        >\r\n          Fetch Attendance\r\n        </button>\r\n      </div> */}\r\n      <div className=\"d-flex gap-3 justify-content-between\">\r\n        {/* <div>\r\n          <select\r\n            className=\"form-select w-100 shadow-sm text-muted\"\r\n            id=\"employeeId\"\r\n            value={employeeId}\r\n            onChange={handleEmployeeChange}\r\n          >\r\n            <option value=\"\" disabled>\r\n              --Select an employee--\r\n            </option>\r\n            {employees\r\n              .sort((a, b) => a.empID - b.empID)\r\n              .map((employee) => (\r\n                <option\r\n                  className=\"text-uppercase\"\r\n                  key={employee._id}\r\n                  value={employee._id}\r\n                >\r\n                  <p>\r\n                    🪪 ({employee.empID}) {employee.FirstName}\r\n                  </p>\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div> */}\r\n        {/* <button\r\n          disabled={!employeeId}\r\n          style={{ display: \"flex\", alignItems: \"center\", gap: \".5rem\" }}\r\n          className=\"btn shadow btn-dark fw-bolder\"\r\n          onClick={handleFetchAttendance}\r\n        >\r\n          <MdOutlineRefresh\r\n            className={`fs-4 ${isButtonClicked ? \"rotate\" : \"\"}`}\r\n          />{\" \"}\r\n          Get\r\n        </button> */}\r\n      </div>\r\n\r\n      {attendanceData && (\r\n        <div className=\"d-flex gap-3\">\r\n          <div>\r\n            <label htmlFor=\"year\">Select a year:</label>\r\n            <select\r\n              className=\"form-select shadow\"\r\n              id=\"year\"\r\n              value={selectedYear}\r\n              onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n            >\r\n              {getYears().map((year) => (\r\n                <option key={year.year} value={year.year}>\r\n                  {year.year}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"month\">Select a month:</label>\r\n            <select\r\n              className=\"form-select shadow\"\r\n              id=\"month\"\r\n              value={selectedMonth}\r\n              onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\r\n            >\r\n              {getMonthsForYear(selectedYear).map((month) => (\r\n                <option key={month} value={month}>\r\n                  {getMonthName(month)}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {attendanceData && (\r\n        <div style={{ overflow: \"auto\", height: \"80vh\" }}>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr className=\"shadow-sm\">\r\n                <th className=\"bg-dark text-white text-center\">Date</th>\r\n                <th className=\"bg-dark text-white text-center\">Status</th>\r\n                <th className=\"bg-dark text-white\">Login Time</th>\r\n                <th className=\"bg-dark text-white\">Logout Time</th>\r\n                <th className=\"bg-dark text-white\">Break</th>\r\n                <th className=\"bg-dark text-white\">Total Login</th>\r\n                <th className=\"bg-dark text-white\">Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {getYears().map((year) =>\r\n                year.months\r\n                  .filter((month) => month.month === selectedMonth)\r\n                  .map((month) =>\r\n                    month.dates\r\n                      .sort((a, b) => a.date - b.date)\r\n                      .map((date) => (\r\n                        <tr\r\n                          className=\"shadow-sm\"\r\n                          key={date.date}\r\n                          id={`attendance-row-${date.date}`} // Assign unique ID to each row\r\n                          onMouseEnter={() => handleMouseEnter(date.date)}\r\n                          onMouseLeave={() => handleMouseLeave()}\r\n                        >\r\n                          <td className=\"text-center\">\r\n                            <span className=\"fw-bold bg-info py-1 px-2  shadow-sm text-white\">\r\n                              {date.date}\r\n                            </span>\r\n                          </td>\r\n                          <td\r\n                            style={{ whiteSpace: \"pre\", textAlign: \"center\" }}\r\n                          >\r\n                            {getAttendanceMark(date)}\r\n                          </td>\r\n                          <td className=\"text-uppercase\">\r\n                            {date.loginTime[0]}\r\n                          </td>\r\n                          <td className=\"text-uppercase\">\r\n                            {date.logoutTime[date.logoutTime.length - 1]}\r\n                          </td>\r\n                          <td className=\"position-relative bg-white\">\r\n                            <div\r\n                              style={{\r\n                                display: \"flex \",\r\n                                justifyContent: \"start\",\r\n                                alignItems: \"center\"\r\n                              }}\r\n                              className=\"fs-6 gap-2 \"\r\n                              onMouseEnter={handleInfoMouseEnter}\r\n                              onMouseLeave={handleInfoMouseLeave}\r\n                            >\r\n                              <span\r\n                                style={{ scale: \"0.7\" }}\r\n                                className=\"bg-warning py-0  text-white  px-2 rounded-5 my-auto\"\r\n                              >\r\n                                {date.breakTime.length}\r\n                              </span>\r\n                              <span className=\"fw-bold text-dark fs-6\">\r\n                                {millisecondsToTime(date.totalBrake)}\r\n                              </span>{\" \"}\r\n                              <FaCircleInfo\r\n                                style={{ fontSize: \".9rem\" }}\r\n                                className=\"text-info \"\r\n                              />\r\n                            </div>\r\n\r\n                            <div\r\n                              style={{ zIndex: \"5\", right: \"0%\" }}\r\n                              className=\"position-absolute\"\r\n                            >\r\n                              {isInfoHovering &&\r\n                                hoveredDate === date.date && ( // Check if info button is hovered and the date is the hovered date\r\n                                  <table className=\"table table-bordered table-striped\">\r\n                                    <thead>\r\n                                      <tr className=\"shadow-sm p-0\">\r\n                                        <th className=\"bg-info  py-0 text-white\">\r\n                                          Break\r\n                                        </th>\r\n                                        <th className=\"bg-info  py-0 text-white\">\r\n                                          Resume\r\n                                        </th>\r\n                                        <th\r\n                                          className=\"text-end  py-0 bg-info text-white\"\r\n                                          style={{ whiteSpace: \"pre\" }}\r\n                                        >\r\n                                          Total Break\r\n                                        </th>\r\n                                      </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                      {date.breakTime.map(\r\n                                        (breakTime, index) => (\r\n                                          <tr className=\"shadow-sm\" key={index}>\r\n                                            <td\r\n                                              className=\"text-uppercase  py-1 text-center\"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {breakTime}\r\n                                            </td>\r\n                                            <td\r\n                                              className=\"text-uppercase  py-1 text-center\"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {date.ResumeTime[index]}\r\n                                            </td>\r\n                                            <td\r\n                                              className=\"text-end py-1 \"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {millisecondsToTime(\r\n                                                date.BreakData[index]\r\n                                              )}\r\n                                            </td>\r\n                                          </tr>\r\n                                        )\r\n                                      )}\r\n                                    </tbody>\r\n                                  </table>\r\n                                )}\r\n                            </div>\r\n                          </td>\r\n                          <td>{millisecondsToTime(date.totalLogAfterBreak)}</td>\r\n                          <td>{date.status}</td>\r\n                        </tr>\r\n                      ))\r\n                  )\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n      {attendanceData === null && (\r\n        <div\r\n          style={{\r\n            height: \"80vh\",\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            wordSpacing: \"5px\",\r\n            flexDirection: \"column\",\r\n            gap: \"1rem\"\r\n          }}\r\n        >\r\n          <div className=\"fs-2 fw-bolder\">\r\n            <TfiReload className=\"spinner-border text-info\" />\r\n          </div>\r\n          <p className=\"text-muted\">\r\n            User not selected. To view data, please select a user.\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(SelfAttendance);\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\attendance\\TodaysAttendance.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\LeaveCalendar\\HolidayList.jsx",["1116"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { GiIndianPalace, GiPartyPopper } from \"react-icons/gi\"; // Importing necessary icons\r\nimport { PiBankBold } from \"react-icons/pi\";\r\n\r\nfunction HolidayList() {\r\n  const [holidaysData, setHolidaysData] = useState([]);\r\n  const [isListVisible, setListVisibility] = useState(true);\r\n\r\n  const toggleListVisibility = () => {\r\n    setListVisibility(!isListVisible);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchHolidays = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:4000/api/holidays\");\r\n\r\n        if (response.status === 200) {\r\n          const data = response.data;\r\n          setHolidaysData(data);\r\n        } else {\r\n          console.error(\"Failed to fetch holiday data:\", response.statusText);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching holiday data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchHolidays();\r\n  }, []);\r\n\r\n  const getHolidayIcons = (holidayType) => {\r\n    switch (holidayType) {\r\n      case \"National Holiday\":\r\n        return (\r\n          <span\r\n            style={{\r\n              height: \"40px\",\r\n              width: \"40px\",\r\n              display: \"flex\",\r\n              margin: \"auto\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              fontSize: \"30px\"\r\n            }}\r\n            className=\"rounded-5 bg-danger text-white\"\r\n          >\r\n            <GiIndianPalace />\r\n          </span>\r\n        );\r\n      case \"Restricted Holiday\":\r\n        return (\r\n          <span\r\n            style={{\r\n              height: \"40px\",\r\n              width: \"40px\",\r\n              display: \"flex\",\r\n              margin: \"auto\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              fontSize: \"30px\"\r\n            }}\r\n            className=\"rounded-5 bg-primary text-white\"\r\n          >\r\n            <GiPartyPopper />\r\n          </span>\r\n        );\r\n      case \"Gazetted Holiday\":\r\n        return (\r\n          <span\r\n            style={{\r\n              height: \"40px\",\r\n              width: \"40px\",\r\n              display: \"flex\",\r\n              margin: \"auto\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              fontSize: \"30px\"\r\n            }}\r\n            className=\"rounded-5 bg-warning text-white\"\r\n          >\r\n            <PiBankBold />\r\n          </span>\r\n        );\r\n      default:\r\n        return (\r\n          <span\r\n            style={{\r\n              height: \"40px\",\r\n              width: \"40px\",\r\n              display: \"flex\",\r\n              margin: \"auto\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              fontSize: \"30px\"\r\n            }}\r\n            className=\"rounded-5 bg-danger text-white\"\r\n          >\r\n            <GiIndianPalace />\r\n          </span>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"birthday shadow position-relative\">\r\n        <div>\r\n          <h5\r\n            style={{\r\n              position: \"sticky\",\r\n              top: \"0\",\r\n              zIndex: \"5\",\r\n              backgroundColor: \"var(--primaryDashColorDark)\",\r\n              color: \"var(--primaryDashMenuColor)\"\r\n            }}\r\n            className=\"fw-bolder pb-3 px-3 pt-3 d-flex justify-content-between gap-0 text-center\"\r\n          >\r\n            Holiday List\r\n          </h5>\r\n          <div>\r\n            {holidaysData.map((holiday, index) => (\r\n              <div className=\"row p-2\" key={index}>\r\n                <span className=\"col-3 border-0 text-center\">\r\n                  {getHolidayIcons(holiday.holidayType)}\r\n                </span>\r\n                <span className=\"col-5 border-0 fw-bold text-muted\">\r\n                  {holiday.holidayName}\r\n                </span>\r\n                <span\r\n                  style={{ whiteSpace: \"pre\" }}\r\n                  className=\"col-3 border-0 fw-bold text-primary\"\r\n                >{`${holiday.holidayDate}-${holiday.holidayMonth}-${holiday.holidayYear}`}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HolidayList;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\AddEmployee\\UpcomingBirthdays.jsx",["1117","1118","1119","1120","1121","1122","1123","1124","1125"],"import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { GiPartyPopper } from \"react-icons/gi\";\r\nimport HappyBirthday from \"./HappyBirthday.svg\";\r\n\r\nconst UpcomingBirthdays = () => {\r\n  const [employeeData, setEmployeeData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [rowData, setRowData] = useState([]);\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  const [isIdFilterActive, setIsIdFilterActive] = useState(false);\r\n  const [isIdSortAscending, setIsIdSortAscending] = useState(true);\r\n  const [upcomingBirthdays, setUpcomingBirthdays] = useState([]);\r\n\r\n  const loadEmployeeData = () => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/employee\", {\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        // Ensure that response.data is an array\r\n        if (Array.isArray(response.data)) {\r\n          setEmployeeData(response.data);\r\n          setLoading(false);\r\n\r\n          // Clear the state arrays\r\n          setRowData([]);\r\n\r\n          response.data.forEach((data) => {\r\n            let temp = {\r\n              data,\r\n              Email: data[\"Email\"],\r\n              Password: data[\"Password\"],\r\n              Account:\r\n                data[\"Account\"] === 1\r\n                  ? \"Admin\"\r\n                  : data[\"Account\"] === 2\r\n                  ? \"HR\"\r\n                  : data[\"Account\"] === 3\r\n                  ? \"Employee\"\r\n                  : \"\",\r\n              RoleName: data[\"role\"][0] ? data[\"role\"][0][\"RoleName\"] : \"\",\r\n              FirstName: data[\"FirstName\"],\r\n              MiddleName: data[\"MiddleName\"],\r\n              LastName: data[\"LastName\"],\r\n              DOB: data[\"DOB\"].slice(0, 10),\r\n              ContactNo: data[\"ContactNo\"],\r\n              EmployeeCode: data[\"EmployeeCode\"],\r\n              empID: data[\"empID\"],\r\n              DepartmentName: data[\"department\"][0]\r\n                ? data[\"department\"][0][\"DepartmentName\"]\r\n                : \"\",\r\n              PositionName: data[\"position\"][0]\r\n                ? data[\"position\"][0][\"PositionName\"]\r\n                : \"\",\r\n              DateOfJoining: data[\"DateOfJoining\"].slice(0, 10)\r\n            };\r\n\r\n            // Use set function to update state\r\n            setRowData((prevData) => [...prevData, temp]);\r\n          });\r\n        } else {\r\n          console.error(\"Data received is not an array:\", response.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployeeData();\r\n  }, []);\r\n\r\n  const calculateUpcomingBirthdays = () => {\r\n    const today = new Date();\r\n    const upcomingBirthdaysData = rowData.filter((employee) => {\r\n      const dob = new Date(employee.DOB);\r\n      dob.setFullYear(today.getFullYear());\r\n\r\n      // Check if the upcoming birthday is within the next 7 days\r\n      const timeDiff = dob - today;\r\n      const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));\r\n      return daysDiff >= 0 && daysDiff <= 7;\r\n    });\r\n\r\n    setUpcomingBirthdays(upcomingBirthdaysData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    calculateUpcomingBirthdays();\r\n  }, [rowData]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"birthday shadow position-relative\">\r\n        <h5\r\n          style={{\r\n            position: \"sticky\",\r\n            top: \"0\",\r\n            backgroundColor: \"var(--primaryDashColorDark)\",\r\n            color: \"var(--primaryDashMenuColor)\"\r\n          }}\r\n          className=\"fw-bolder pb-3 px-3 pt-3 d-flex justify-content-between gap-0 text-center\"\r\n        >\r\n          <GiPartyPopper /> Upcoming Birthdays{\" \"}\r\n          <span className=\"text-primary\">({upcomingBirthdays.length})</span>\r\n        </h5>\r\n        <div>\r\n          {upcomingBirthdays.length > 0 ? (\r\n            <div className=\"d-flex flex-column gap-3 py-3 px-3\">\r\n              {upcomingBirthdays.map((employee) => (\r\n                <div\r\n                  style={{ borderBottom: \"1px solid #E3F4F4\" }}\r\n                  className=\"\"\r\n                  key={employee.empID}\r\n                >\r\n                  <div className=\"row\" style={{ verticalAlign: \"middle\" }}>\r\n                    <div className=\"d-flex justify-content-between \">\r\n                      <div className=\"d-flex gap-2\">\r\n                        <div style={{ height: \"45px\", width: \"45px\" }}>\r\n                          <img\r\n                            style={{\r\n                              height: \"100%\",\r\n                              width: \"100%\",\r\n                              border: \"3px solid gray\",\r\n                              borderRadius: \"50%\",\r\n                              overflow: \"hidden\",\r\n                              objectFit: \"cover\"\r\n                            }}\r\n                            src={\r\n                              employee?.data?.profile?.image_url\r\n                                ? employee?.data?.profile?.image_url\r\n                                : \"https://a.storyblok.com/f/191576/1200x800/215e59568f/round_profil_picture_after_.webp\"\r\n                            }\r\n                            alt=\"\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"d-flex flex-column my-auto\">\r\n                          <span\r\n                            style={{ fontSize: \"12px\", fontWeight: \"bold\" }}\r\n                          >\r\n                            {employee.empID}\r\n                          </span>\r\n                          <span\r\n                            style={{ fontSize: \"13px\", fontWeight: \"bold\" }}\r\n                            className=\"text-uppercase fw-bold\"\r\n                          >{`${employee.FirstName} ${employee.LastName}`}</span>\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        style={{ fontSize: \"13px\" }}\r\n                        className=\"my-auto fw-bolder text-muted\"\r\n                      >\r\n                        Date <br />\r\n                        {employee.DOB}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div\r\n              className=\"d-flex flex-column justify-content-center aline-items-center gap-3\"\r\n              style={{ height: \"100%\", width: \"100%\" }}\r\n            >\r\n              <img\r\n                style={{ height: \"60%\", width: \"60%\" }}\r\n                className=\"mx-auto\"\r\n                src={HappyBirthday}\r\n                alt=\"Happy Birthday\"\r\n              />\r\n              <p\r\n                style={{ opacity: \"60%\", fontSize: \"13px\" }}\r\n                className=\"text-center w-75 mx-auto  fw-bold text-muted \"\r\n              >\r\n                No upcoming birthdays in the next 7 days.\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpcomingBirthdays;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Dashboard\\Chart\\DepartmentChart.jsx",["1126","1127","1128","1129","1130"],"import React, { useState, useEffect } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport \"./chart.css\";\r\nimport axios from \"axios\";\r\n\r\nconst DepartmentChart = () => {\r\n  const [departmentData, setDepartmentData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [chartOption, setChartOption] = useState({\r\n    options: {\r\n      labels: [],\r\n      plotOptions: {\r\n        pie: {\r\n          donut: {\r\n            labels: {\r\n              show: true,\r\n              total: {\r\n                show: true\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    series: []\r\n  });\r\n\r\n  const loadEmployeeData = () => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/employee\", {\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        if (Array.isArray(response.data)) {\r\n          setDepartmentData(\r\n            response.data.map(\r\n              (data) => data[\"department\"][0]?.DepartmentName || \"\"\r\n            )\r\n          );\r\n        } else {\r\n          console.error(\"Data received is not an array:\", response.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployeeData();\r\n  }, []);\r\n\r\n  const updateChartOptions = () => {\r\n    const departmentCounts = {};\r\n    departmentData.forEach((department) => {\r\n      departmentCounts[department] = (departmentCounts[department] || 0) + 1;\r\n    });\r\n\r\n    const labels = Object.keys(departmentCounts);\r\n    const series = labels.map((label) => departmentCounts[label]);\r\n\r\n    setChartOption({\r\n      options: {\r\n        labels: labels,\r\n        plotOptions: {\r\n          pie: {\r\n            donut: {\r\n              labels: {\r\n                show: true,\r\n                total: {\r\n                  show: true\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      series: series\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateChartOptions();\r\n  }, [departmentData]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"ChartCard shadow-sm \">\r\n        <div className=\"ChartHeader\">\r\n          <h5 className=\"fw-bolder d-flex gap-3\">Employee By Department</h5>\r\n        </div>\r\n        <Chart\r\n          options={chartOption.options}\r\n          series={chartOption.series}\r\n          type=\"donut\"\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DepartmentChart;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Dashboard\\Chart\\TaskChart.jsx",["1131","1132","1133"],"// EmployeeChart.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { FaChartLine } from \"react-icons/fa\";\r\n\r\nconst TaskChart = () => {\r\n  const [departmentData, setDepartmentData] = useState([]);\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const email = localStorage.getItem(\"Email\");\r\n\r\n  const loadEmployeeData = () => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/employee\", {\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        if (Array.isArray(response.data)) {\r\n          setDepartmentData(\r\n            response.data.map(\r\n              (data) => data[\"department\"][0]?.DepartmentName || \"\"\r\n            )\r\n          );\r\n        } else {\r\n          console.error(\"Data received is not an array:\", response.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const loadTaskData = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:4000/api/tasks\");\r\n      // console.log(response.data)\r\n      setTasks(response.data);\r\n      setError(null);\r\n    } catch (error) {\r\n      console.error(\"Error fetching tasks:\", error.message);\r\n      setError(\"Error fetching tasks. Please try again later.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployeeData();\r\n    loadTaskData();\r\n  }, []);\r\n\r\n  const calculateRemainingTime = (endDate) => {\r\n    const now = new Date();\r\n    const endDateTime = new Date(endDate);\r\n    let remainingTime = endDateTime - now;\r\n\r\n    if (remainingTime < 0) {\r\n      // If remaining time is negative, consider it as delay\r\n      remainingTime = Math.abs(remainingTime);\r\n      return { delay: true, days: 0, hours: 0, minutes: 0 };\r\n    } else {\r\n      // Calculate remaining days, hours, minutes, and seconds\r\n      const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\r\n      const hours = Math.floor(\r\n        (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n      );\r\n      const minutes = Math.floor(\r\n        (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\r\n      );\r\n      return { delay: false, days, hours, minutes };\r\n    }\r\n  };\r\n\r\n  const departmentCounts = {};\r\n  departmentData.forEach((department) => {\r\n    departmentCounts[department] = (departmentCounts[department] || 0) + 1;\r\n  });\r\n\r\n  const taskStatusCounts = {\r\n    Total: tasks.filter((task) => task.managerEmail === email).length,\r\n\r\n    newTasks: tasks.filter(\r\n      (task) => task.status === \"Assigned\" && task.managerEmail === email\r\n    ).length,\r\n\r\n    Completed: tasks.filter(\r\n      (task) => task.status === \"Completed\" && task.managerEmail === email\r\n    ).length,\r\n    Rejected: tasks.filter(\r\n      (task) => task.status === \"Rejected\" && task.managerEmail === email\r\n    ).length,\r\n    canceled: tasks.filter(\r\n      (task) => task.status === \"Cancelled\" && task.managerEmail === email\r\n    ).length,\r\n    Active: tasks.filter(\r\n      (task) => task.status === \"Pending\" && task.managerEmail === email\r\n    ).length,\r\n    Overdue: tasks.filter(\r\n      (task) =>\r\n        task.status === \"Pending\" &&\r\n        task.managerEmail === email &&\r\n        calculateRemainingTime(task.endDate).delay\r\n    ).length,\r\n    Ontime: tasks.filter(\r\n      (task) =>\r\n        task.status === \"Pending\" &&\r\n        task.managerEmail === email &&\r\n        !calculateRemainingTime(task.endDate).delay\r\n    ).length\r\n  };\r\n\r\n  const chartData = {\r\n    series: [\r\n      {\r\n        name: \"Total Employee\",\r\n        data: Object.values(departmentCounts)\r\n      }\r\n    ],\r\n    options: {\r\n      chart: {\r\n        type: \"bar\",\r\n        height: 350\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          horizontal: false,\r\n          columnWidth: \"40%\",\r\n          endingShape: \"rounded\"\r\n        }\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        show: true,\r\n        width: 2,\r\n        colors: [\"transparent\"]\r\n      },\r\n      xaxis: {\r\n        categories: Object.keys(departmentCounts),\r\n        title: {\r\n          text: \"Department Wise Employee\"\r\n        }\r\n      },\r\n      yaxis: {\r\n        title: {\r\n          text: \"Number of Employee\"\r\n        }\r\n      },\r\n\r\n      fill: {\r\n        opacity: 1,\r\n        colors: [\"var(--primaryDashColorDark)\"]\r\n      },\r\n      tooltip: {\r\n        y: {\r\n          formatter: function (val) {\r\n            return \" \" + val + \"\";\r\n          }\r\n        },\r\n        markers: {\r\n          colors: \"yellow\"\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const taskStatusChartData = {\r\n    options: {\r\n      chart: {\r\n        id: \"task-status-chart\",\r\n        type: \"bar\"\r\n      },\r\n      xaxis: {\r\n        categories: Object.keys(taskStatusCounts),\r\n        title: {\r\n          text: \"Task Status\"\r\n        }\r\n      },\r\n      yaxis: {\r\n        title: {\r\n          text: \"Number of Tasks\"\r\n        }\r\n      }\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Task Status\",\r\n        data: Object.values(taskStatusCounts)\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div className=\"ChartCard shadow-sm\">\r\n      <div className=\"ChartHeader\">\r\n        <h5 className=\"fw-bolder d-flex gap-3 \">\r\n          <FaChartLine className=\"my-auto\" />\r\n          Task Progress Report\r\n        </h5>\r\n      </div>\r\n      <div className=\"chartBody\">\r\n        <Chart\r\n          options={taskStatusChartData.options}\r\n          series={taskStatusChartData.series}\r\n          type=\"bar\"\r\n          height=\"85%\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskChart;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Dashboard\\CountData\\EmployeeCount.jsx",["1134","1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150"],"import React, { useState, useEffect } from \"react\";\r\n// import \"./EmployeeTable.css\";\r\n\r\nimport axios from \"axios\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTrash,\r\n  faEdit,\r\n  faInfoCircle\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { RingLoader } from \"react-spinners\";\r\nimport { css } from \"@emotion/core\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { IoIosArrowDroprightCircle } from \"react-icons/io\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// *************csv & pdf **************//\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n// import { Link } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { FiSearch } from \"react-icons/fi\";\r\n// *************csv & pdf **************//\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  margin-top: 45px;\r\n  border-color: red;\r\n`;\r\n\r\nconst AdminEmployeeTable = (props) => {\r\n  const [employeeData, setEmployeeData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [rowData, setRowData] = useState([]);\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  const [isIdFilterActive, setIsIdFilterActive] = useState(false);\r\n  const [isIdSortAscending, setIsIdSortAscending] = useState(true);\r\n  const [upcomingBirthdays, setUpcomingBirthdays] = useState([]);\r\n  const [selectedFilter, setSelectedFilter] = useState(\"\");\r\n\r\n  const loadEmployeeData = () => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/employee\", {\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        // Ensure that response.data is an array\r\n        if (Array.isArray(response.data)) {\r\n          setEmployeeData(response.data);\r\n          setLoading(false);\r\n\r\n          // Clear the state arrays\r\n          setRowData([]);\r\n\r\n          response.data.forEach((data) => {\r\n            let temp = {\r\n              data,\r\n              Email: data[\"Email\"],\r\n              Password: data[\"Password\"],\r\n              Account:\r\n                data[\"Account\"] === 1\r\n                  ? \"Admin\"\r\n                  : data[\"Account\"] === 2\r\n                  ? \"HR\"\r\n                  : data[\"Account\"] === 3\r\n                  ? \"Employee\"\r\n                  : data[\"Account\"] === 4\r\n                  ? \"Manager\"\r\n                  : \"\",\r\n\r\n              RoleName: data[\"role\"][0] ? data[\"role\"][0][\"RoleName\"] : \"\",\r\n              FirstName: data[\"FirstName\"],\r\n              MiddleName: data[\"MiddleName\"],\r\n              LastName: data[\"LastName\"],\r\n              DOB: data[\"DOB\"].slice(0, 10),\r\n              ContactNo: data[\"ContactNo\"],\r\n              // EmployeeCode: data[\"EmployeeCode\"],\r\n              empID: data[\"empID\"],\r\n              DepartmentName: data[\"department\"][0]\r\n                ? data[\"department\"][0][\"DepartmentName\"]\r\n                : \"\",\r\n              PositionName: data[\"position\"][0]\r\n                ? data[\"position\"][0][\"PositionName\"]\r\n                : \"\",\r\n              DateOfJoining: data[\"DateOfJoining\"].slice(0, 10)\r\n            };\r\n\r\n            // Use set function to update state\r\n            setRowData((prevData) => [...prevData, temp]);\r\n          });\r\n        } else {\r\n          console.error(\"Data received is not an array:\", response.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const onEmployeeDelete = (e) => {\r\n    if (window.confirm(\"Are you sure to delete this record? \")) {\r\n      axios\r\n        .delete(`http://localhost:4000/api/employee/${e}`, {\r\n          headers: {\r\n            authorization: localStorage.getItem(\"token\") || \"\"\r\n          }\r\n        })\r\n        .then(() => {\r\n          loadEmployeeData();\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const exportToPDF = () => {\r\n    window.confirm(\"Are you sure to download Employee record? \");\r\n    const doc = new jsPDF({\r\n      orientation: \"landscape\",\r\n      unit: \"mm\",\r\n      format: [297, 210]\r\n    });\r\n\r\n    doc.setFontSize(18);\r\n    doc.text(\"Employee Details\", 297 / 2, 15, \"center\");\r\n    const headers = [\r\n      \"Emp Id\",\r\n      \"Email\",\r\n      \"Account Access\",\r\n      \"First Name\",\r\n      \"Last Name\",\r\n      \"DOB\",\r\n      \"ContactNo\",\r\n      \"Role\",\r\n      \"Position\",\r\n      \"Department\",\r\n      \"D.O.J\"\r\n    ];\r\n    const data = rowData.map((row) => [\r\n      row.empID,\r\n      row.Email,\r\n      row.Account,\r\n      row.FirstName,\r\n      row.LastName,\r\n      row.DOB,\r\n      row.ContactNo,\r\n      row.RoleName,\r\n      row.PositionName,\r\n      row.DepartmentName,\r\n      row.DateOfJoining,\r\n      \"\"\r\n    ]);\r\n    doc.setFontSize(12);\r\n    doc.autoTable({\r\n      head: [headers],\r\n      body: data,\r\n      startY: 25\r\n    });\r\n\r\n    doc.save(\"employee_data.pdf \");\r\n  };\r\n\r\n  const renderInfoButton = (params) => {\r\n    if (params.data && params.data.data) {\r\n      return (\r\n        <div>\r\n          <FontAwesomeIcon\r\n            icon={faInfoCircle}\r\n            onClick={() => props.onEmpInfo(params.data.data)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const renderButton = (params) => {\r\n    if (params.data && params.data.data && params.data.data[\"_id\"]) {\r\n      return (\r\n        <FontAwesomeIcon\r\n          icon={faTrash}\r\n          onClick={() => onEmployeeDelete(params.data.data[\"_id\"])}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const renderEditButton = (params) => {\r\n    if (params.data && params.data.data) {\r\n      return (\r\n        <FontAwesomeIcon\r\n          icon={faEdit}\r\n          onClick={() => props.onEditEmployee(params.data.data)}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const getBackgroundColor = (accountType) => {\r\n    switch (accountType) {\r\n      case \"Admin\":\r\n        return \"#8EAC50\";\r\n      case \"HR\":\r\n        return \"#0079FF\";\r\n      case \"Employee\":\r\n        return \"purple\";\r\n      case \"Manager\":\r\n        return \"red\";\r\n      default:\r\n        return \"#FF9B50\";\r\n    }\r\n  };\r\n\r\n  const handleSearchInputChange = (event) => {\r\n    setSearchInput(event.target.value);\r\n  };\r\n\r\n  const handleToggleIdSort = () => {\r\n    setIsIdSortAscending(!isIdSortAscending);\r\n  };\r\n\r\n  const sortById = (a, b) => {\r\n    const idA = a.empID.toLowerCase();\r\n    const idB = b.empID.toLowerCase();\r\n\r\n    if (isIdSortAscending) {\r\n      return idA.localeCompare(idB);\r\n    } else {\r\n      return idB.localeCompare(idA);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployeeData();\r\n  }, []);\r\n\r\n  const calculateUpcomingBirthdays = () => {\r\n    const today = new Date();\r\n    const upcomingBirthdaysData = rowData.filter((employee) => {\r\n      const dob = new Date(employee.DOB);\r\n      dob.setFullYear(today.getFullYear());\r\n\r\n      // Check if the upcoming birthday is within the next 7 days\r\n      const timeDiff = dob - today;\r\n      const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));\r\n      return daysDiff >= 0 && daysDiff <= 7;\r\n    });\r\n\r\n    setUpcomingBirthdays(upcomingBirthdaysData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    calculateUpcomingBirthdays();\r\n  }, [rowData]);\r\n\r\n  let filteredData = rowData.filter((item) => {\r\n    const isMatchingId = isIdFilterActive\r\n      ? item.empID.toLowerCase() === searchInput.toLowerCase()\r\n      : true;\r\n\r\n    const isMatchingFirstName = item.FirstName.toLowerCase().includes(\r\n      searchInput.toLowerCase()\r\n    );\r\n\r\n    return isMatchingId && isMatchingFirstName;\r\n  });\r\n\r\n  filteredData = filteredData.sort(sortById);\r\n\r\n  // Calculate the total length for each status\r\n  const adminCount = filteredData.filter(\r\n    (data) => data.Account === \"Admin\"\r\n  ).length;\r\n  const hrCount = filteredData.filter((data) => data.Account === \"HR\").length;\r\n  const managerCount = filteredData.filter(\r\n    (data) => data.Account === \"Manager\"\r\n  ).length;\r\n  const employeeCount = filteredData.filter(\r\n    (data) => data.Account === \"Employee\"\r\n  ).length;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container-fluid  mt-4\">\r\n        <div className=\"row row-gap-4\">\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#FED2AA\" }}\r\n              className=\" DashboardCard position-relative\"\r\n            >\r\n              <div className=\" d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Total Admins\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {adminCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/employee\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#DFFFD8\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Total HR{\" \"}\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {hrCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/leave-application-hr\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* <div className=\"row row-gap-4\"></div> */}\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#FEBBCC\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Total Manager\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {managerCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/employee\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#BCCEF8\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Total Employee\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {employeeCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/employee\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-md-9\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminEmployeeTable;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Dashboard\\CountData\\LeavesCount.jsx",["1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177"],"import React, { useState, useEffect } from \"react\";\r\n// import \"./LeaveApplicationHRTable.css\";\r\nimport axios from \"axios\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { RingLoader } from \"react-spinners\";\r\nimport { IoIosArrowDroprightCircle } from \"react-icons/io\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { css } from \"@emotion/core\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Table,\r\n  Dropdown,\r\n  DropdownButton\r\n} from \"react-bootstrap\";\r\n\r\n// *************csv & pdf **************//\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { BsFillFileEarmarkPdfFill } from \"react-icons/bs\";\r\n// *************csv & pdf **************//\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  margin-top: 45px;\r\n  border-color: red;\r\n`;\r\n\r\nconst LeaveApplicationHRTable = (props) => {\r\n  const [leaveApplicationHRData, setLeaveApplicationHRData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchData, setSearchData] = useState(\"\");\r\n  const [totalLeaves, setTotalLeaves] = useState(0);\r\n  const [sortColumn, setSortColumn] = useState(null);\r\n  const [sortDirection, setSortDirection] = useState(\"asc\");\r\n  const [rowData, setRowData] = useState([]);\r\n\r\n  // ...\r\n\r\n  let leaveApplicationHRObj = [];\r\n  let rowDataT = [];\r\n\r\n  const loadLeaveApplicationHRData = () => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/leave-application-hr/\", {\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        leaveApplicationHRObj = response.data;\r\n        console.log(\"response\", response.data);\r\n        setLeaveApplicationHRData(response.data);\r\n        setLoading(false);\r\n\r\n        rowDataT = [];\r\n\r\n        leaveApplicationHRObj.map((data) => {\r\n          let temp = {\r\n            data,\r\n            empID:\r\n              data[\"employee\"] &&\r\n              data[\"employee\"][0] &&\r\n              data[\"employee\"][0][\"empID\"],\r\n            Name:\r\n              data[\"employee\"] &&\r\n              data[\"employee\"][0] &&\r\n              data[\"employee\"][0][\"FirstName\"] +\r\n                \" \" +\r\n                data[\"employee\"][0][\"LastName\"],\r\n            Leavetype: data[\"Leavetype\"],\r\n            FromDate: data[\"FromDate\"].slice(0, 10),\r\n            ToDate: data[\"ToDate\"].slice(0, 10),\r\n            Reasonforleave: data[\"Reasonforleave\"],\r\n            Status: status(data[\"Status\"])\r\n          };\r\n\r\n          rowDataT.push(temp);\r\n        });\r\n\r\n        setRowData(rowDataT);\r\n\r\n        setTotalLeaves(response.data.length);\r\n        props.updateTotalLeaves(response.data.length);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // ...\r\n\r\n  const onLeaveApplicationHRDelete = (e1, e2) => {\r\n    console.log(e1, e2);\r\n    if (window.confirm(\"Are you sure to delete this record? \") == true) {\r\n      axios\r\n        .delete(\r\n          \"http://localhost:4000/api/leave-application-hr/\" + e1 + \"/\" + e2,\r\n          {\r\n            headers: {\r\n              authorization: localStorage.getItem(\"token\") || \"\"\r\n            }\r\n          }\r\n        )\r\n        .then((res) => {\r\n          loadLeaveApplicationHRData();\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const exportToPDF = () => {\r\n    if (window.confirm(\"Are you sure to download Leave record? \")) {\r\n      // Set A4 landscape dimensions\r\n      const pdfWidth = 297; // A4 width in mm\r\n      const pdfHeight = 210; // A4 height in mm\r\n      const doc = new jsPDF({\r\n        orientation: \"landscape\",\r\n        unit: \"mm\",\r\n        format: [pdfWidth, pdfHeight]\r\n      });\r\n\r\n      doc.setFontSize(18);\r\n      doc.text(\"Employee Leave Details\", pdfWidth / 2, 15, \"center\");\r\n      const headers = [\r\n        \"Emp Id\",\r\n        \"Leave Type\",\r\n        \"Start Date\",\r\n        \"End Date\",\r\n        \"Remarks\",\r\n        \"Status\"\r\n      ];\r\n      const data = rowData.map((row) => [\r\n        row.empID,\r\n        row.Leavetype,\r\n        row.FromDate,\r\n        row.ToDate,\r\n        row.Reasonforleave,\r\n        row.Status,\r\n\r\n        \"\" // Action column - you can customize this based on your requirements\r\n      ]);\r\n      doc.setFontSize(12);\r\n      doc.autoTable({\r\n        head: [headers],\r\n        body: data,\r\n        startY: 25\r\n      });\r\n\r\n      doc.save(\"leaveApplication_data.pdf\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadLeaveApplicationHRData();\r\n  }, []);\r\n\r\n  const renderButton = (params) => {\r\n    console.log(params);\r\n    return (\r\n      <FontAwesomeIcon\r\n        icon={faTrash}\r\n        onClick={() =>\r\n          onLeaveApplicationHRDelete(\r\n            params.data.data[\"employee\"][0][\"_id\"],\r\n            params.data.data[\"_id\"]\r\n          )\r\n        }\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderEditButton = (params) => {\r\n    console.log(params);\r\n    return (\r\n      <FontAwesomeIcon\r\n        icon={faEdit}\r\n        onClick={() => props.onEditLeaveApplicationHR(params.data.data)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const status = (s) => {\r\n    if (s == 1) {\r\n      return \"Pending\";\r\n    }\r\n    if (s == 2) {\r\n      return \"Approved\";\r\n    }\r\n    if (s == 3) {\r\n      return \"Rejected\";\r\n    }\r\n    // Add a default case or return a meaningful value for unknown status\r\n    return \"Unknown\";\r\n  };\r\n\r\n  const renderSortIcon = (field) => {\r\n    if (sortColumn === field) {\r\n      return sortDirection === \"asc\" ? \"▴\" : \"▾\";\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const sortData = (columnName) => {\r\n    const newSortDirection =\r\n      sortColumn === columnName && sortDirection === \"asc\" ? \"desc\" : \"asc\";\r\n\r\n    const sortedData = [...rowData];\r\n\r\n    sortedData.sort((a, b) => {\r\n      const valueA = a[columnName];\r\n      const valueB = b[columnName];\r\n\r\n      let comparison = 0;\r\n\r\n      if (valueA > valueB) {\r\n        comparison = 1;\r\n      } else if (valueA < valueB) {\r\n        comparison = -1;\r\n      }\r\n\r\n      return newSortDirection === \"desc\" ? comparison * -1 : comparison;\r\n    });\r\n\r\n    setRowData(sortedData);\r\n    setSortColumn(columnName);\r\n    setSortDirection(newSortDirection);\r\n  };\r\n\r\n  // Calculate the total length for each status\r\n  const pendingLeaves = rowData.filter(\r\n    (data) => data.Status === \"Pending\"\r\n  ).length;\r\n  const approvedLeaves = rowData.filter(\r\n    (data) => data.Status === \"Approved\"\r\n  ).length;\r\n  const rejectedLeaves = rowData.filter(\r\n    (data) => data.Status === \"Rejected\"\r\n  ).length;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container-fluid  mt-4\">\r\n        <div className=\"row row-gap-4\">\r\n          <div className=\"col-md-4\">\r\n            <div\r\n              style={{ backgroundColor: \"#FED2AA\" }}\r\n              className=\" DashboardCard position-relative\"\r\n            >\r\n              <div className=\" d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  On Pending Leaves\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {pendingLeaves}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/manager/leave-application-hr\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <div\r\n              style={{ backgroundColor: \"#DFFFD8\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  On Approved Leaves{\" \"}\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {approvedLeaves}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/manager/leaveAccepted\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* <div className=\"row row-gap-4\"></div> */}\r\n          <div className=\"col-md-4\">\r\n            <div\r\n              style={{ backgroundColor: \"#FEBBCC\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  On Rejected Leaves\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {rejectedLeaves}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/manager/leaveRejected\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#BCCEF8\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Total Role\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/role\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaveApplicationHRTable;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\attendance\\SelfAttendance.jsx",["1178","1179","1180","1181","1182","1183"],"import React, { useState, useEffect, memo } from \"react\";\r\nimport axios from \"axios\";\r\nimport { TfiReload } from \"react-icons/tfi\";\r\nimport { FaCircleInfo } from \"react-icons/fa6\";\r\nimport { MdOutlineRefresh } from \"react-icons/md\";\r\n\r\nconst SelfAttendance = () => {\r\n  const [employees, setEmployees] = useState([]);\r\n  const [attendanceData, setAttendanceData] = useState(null);\r\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\r\n  const [isButtonClicked, setIsButtonClicked] = useState(false);\r\n  const [hoveredDate, setHoveredDate] = useState(null);\r\n  const [isInfoHovering, setIsInfoHovering] = useState(false);\r\n  const empMail = localStorage.getItem(\"Email\");\r\n  const employeeId = localStorage.getItem(\"_id\");\r\n\r\n  const handleMouseEnter = (date) => {\r\n    setHoveredDate(date);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoveredDate(null);\r\n  };\r\n\r\n  const handleInfoMouseEnter = () => {\r\n    setIsInfoHovering(true);\r\n  };\r\n\r\n  const handleInfoMouseLeave = () => {\r\n    setIsInfoHovering(false);\r\n  };\r\n\r\n  //   useEffect(() => {\r\n  //     fetchEmployees();\r\n  //   }, []);\r\n\r\n  //   const fetchEmployees = async () => {\r\n  //     try {\r\n  //       const response = await axios.get(\"http://localhost:4000/api/employee\", {\r\n  //         headers: {\r\n  //           authorization: localStorage.getItem(\"token\") || \"\"\r\n  //         }\r\n  //       });\r\n  //       setEmployees(response.data);\r\n  //     } catch (error) {\r\n  //       console.error(\"Error fetching employees:\", error);\r\n  //     }\r\n  //   };\r\n\r\n  // const handleFetchAttendance = async () => {\r\n  //   try {\r\n  //     const response = await axios.get(\r\n  //       `http://localhost:4000/api/attendance/${employeeId}`,\r\n  //       {\r\n  //         headers: {\r\n  //           Authorization: `Bearer ${localStorage.getItem(\"token\") || \"\"}`\r\n  //         }\r\n  //       }\r\n  //     );\r\n  //     let singleUser = response.data.filter((val) => {\r\n  //       return val.employeeObjID._id === employeeId;\r\n  //     });\r\n  //     setAttendanceData(singleUser.length > 0 ? singleUser[0] : null);\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching attendance data:\", error);\r\n  //   }\r\n  // };\r\n\r\n  // setIsButtonClicked(true);\r\n  useEffect(() => {\r\n    const handleFetchAttendance = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:4000/api/attendance/${employeeId}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem(\"token\") || \"\"}`\r\n            }\r\n          }\r\n        );\r\n\r\n        let singleUser = response.data.filter((val) => {\r\n          return val.employeeObjID && val.employeeObjID.Email === empMail;\r\n        });\r\n\r\n        setAttendanceData(() => {\r\n          return singleUser.length > 0 ? singleUser[0] : null;\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error fetching attendance data:\", error);\r\n      }\r\n    };\r\n\r\n    handleFetchAttendance();\r\n  }, [employeeId, empMail]);\r\n\r\n  const getTotalHolidays = () => {\r\n    if (\r\n      attendanceData &&\r\n      attendanceData.user &&\r\n      attendanceData.user.holidayObjID\r\n    ) {\r\n      return attendanceData.user.holidayObjID.holidays.length;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  const getMonthName = (monthNumber) => {\r\n    switch (monthNumber) {\r\n      case 1:\r\n        return \"January\";\r\n      case 2:\r\n        return \"February\";\r\n      case 3:\r\n        return \"March\";\r\n      case 4:\r\n        return \"April\";\r\n      case 5:\r\n        return \"May\";\r\n      case 6:\r\n        return \"June\";\r\n      case 7:\r\n        return \"July\";\r\n      case 8:\r\n        return \"August\";\r\n      case 9:\r\n        return \"September\";\r\n      case 10:\r\n        return \"October\";\r\n      case 11:\r\n        return \"November\";\r\n      case 12:\r\n        return \"December\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const getMonthsForYear = (year) => {\r\n    if (year === new Date().getFullYear()) {\r\n      return Array.from({ length: new Date().getMonth() + 1 }, (_, i) => i + 1);\r\n    }\r\n    return Array.from({ length: 12 }, (_, i) => i + 1);\r\n  };\r\n\r\n  const getYears = () => {\r\n    if (attendanceData && attendanceData.years) {\r\n      const currentYear = new Date().getFullYear();\r\n      return attendanceData.years.filter((year) => year.year <= currentYear);\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const millisecondsToTime = (milliseconds) => {\r\n    const millisecond = Math.floor(milliseconds);\r\n    const seconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n\r\n    const formattedHours = String(hours).padStart(2, \"0\");\r\n    const formattedMinutes = String(minutes % 60).padStart(2, \"0\");\r\n    const formattedSeconds = String(seconds % 60).padStart(2, \"0\");\r\n    const formattedMillisecond = String(millisecond % 60).padStart(2, \"0\");\r\n\r\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}:${formattedMillisecond}`;\r\n  };\r\n\r\n  const getAttendanceMark = (date) => {\r\n    const loginTime = date && date.loginTime[0];\r\n    if (loginTime) {\r\n      const [loginHour, loginMinute] = loginTime.split(\":\").map(Number);\r\n      if (loginHour > 9 || (loginHour === 9 && loginMinute > 45)) {\r\n        return \"H\";\r\n      } else if (loginHour > 9 || (loginHour === 9 && loginMinute > 30)) {\r\n        return \"L\";\r\n      }\r\n    }\r\n    return loginTime ? \"P\" : \"A\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column p-5 gap-3\">\r\n      {/* <div className=\"d-flex gap-3 \">\r\n        <div>\r\n          <select\r\n            className=\"form-select w-100 shadow-sm text-muted\"\r\n            id=\"employeeId\"\r\n            value={employeeId}\r\n            onChange={handleEmployeeChange}\r\n          >\r\n            <option value=\"\" disabled>\r\n              --Select an employee--\r\n            </option>\r\n\r\n            {employees\r\n              .sort((a, b) => a.empID - b.empID)\r\n              .map((employee) => (\r\n                <option\r\n                  className=\"text-uppercase\"\r\n                  key={employee._id}\r\n                  value={employee._id}\r\n                >\r\n                  🪪 ({employee.empID}) {employee.FirstName}-{employee.LastName}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n\r\n        <button\r\n          className=\"btn shadow btn-dark fw-bolder\"\r\n          style={{ width: \"fit-content\" }}\r\n          onClick={handleFetchAttendance}\r\n        >\r\n          Fetch Attendance\r\n        </button>\r\n      </div> */}\r\n      <div className=\"d-flex gap-3 justify-content-between\">\r\n        {/* <div>\r\n          <select\r\n            className=\"form-select w-100 shadow-sm text-muted\"\r\n            id=\"employeeId\"\r\n            value={employeeId}\r\n            onChange={handleEmployeeChange}\r\n          >\r\n            <option value=\"\" disabled>\r\n              --Select an employee--\r\n            </option>\r\n            {employees\r\n              .sort((a, b) => a.empID - b.empID)\r\n              .map((employee) => (\r\n                <option\r\n                  className=\"text-uppercase\"\r\n                  key={employee._id}\r\n                  value={employee._id}\r\n                >\r\n                  <p>\r\n                    🪪 ({employee.empID}) {employee.FirstName}\r\n                  </p>\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div> */}\r\n        {/* <button\r\n          disabled={!employeeId}\r\n          style={{ display: \"flex\", alignItems: \"center\", gap: \".5rem\" }}\r\n          className=\"btn shadow btn-dark fw-bolder\"\r\n          onClick={handleFetchAttendance}\r\n        >\r\n          <MdOutlineRefresh\r\n            className={`fs-4 ${isButtonClicked ? \"rotate\" : \"\"}`}\r\n          />{\" \"}\r\n          Get\r\n        </button> */}\r\n      </div>\r\n      <h1>Attendance List</h1>\r\n\r\n      {attendanceData && (\r\n        <div className=\"d-flex gap-3\">\r\n          <div>\r\n            <label htmlFor=\"year\">Select a year:</label>\r\n            <select\r\n              className=\"form-select shadow\"\r\n              id=\"year\"\r\n              value={selectedYear}\r\n              onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n            >\r\n              {getYears().map((year) => (\r\n                <option key={year.year} value={year.year}>\r\n                  {year.year}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"month\">Select a month:</label>\r\n            <select\r\n              className=\"form-select shadow\"\r\n              id=\"month\"\r\n              value={selectedMonth}\r\n              onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\r\n            >\r\n              {getMonthsForYear(selectedYear).map((month) => (\r\n                <option key={month} value={month}>\r\n                  {getMonthName(month)}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {attendanceData && (\r\n        <div style={{ overflow: \"auto\", height: \"80vh\" }}>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr className=\"shadow-sm\">\r\n                <th className=\"bg-dark text-white text-center\">Date</th>\r\n                <th className=\"bg-dark text-white text-center\">Status</th>\r\n                <th className=\"bg-dark text-white\">Login Time</th>\r\n                <th className=\"bg-dark text-white\">Logout Time</th>\r\n                <th className=\"bg-dark text-white\">Break</th>\r\n                <th className=\"bg-dark text-white\">Total Login</th>\r\n                <th className=\"bg-dark text-white\">Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {getYears().map((year) =>\r\n                year.months\r\n                  .filter((month) => month.month === selectedMonth)\r\n                  .map((month) =>\r\n                    month.dates\r\n                      .sort((a, b) => a.date - b.date)\r\n                      .map((date) => (\r\n                        <tr\r\n                          className=\"shadow-sm\"\r\n                          key={date.date}\r\n                          id={`attendance-row-${date.date}`} // Assign unique ID to each row\r\n                          onMouseEnter={() => handleMouseEnter(date.date)}\r\n                          onMouseLeave={() => handleMouseLeave()}\r\n                        >\r\n                          <td className=\"text-center\">\r\n                            <span className=\"fw-bold bg-info py-1 px-2  shadow-sm text-white\">\r\n                              {date.date}\r\n                            </span>\r\n                          </td>\r\n                          <td\r\n                            style={{ whiteSpace: \"pre\", textAlign: \"center\" }}\r\n                          >\r\n                            {getAttendanceMark(date)}\r\n                          </td>\r\n                          <td className=\"text-uppercase\">\r\n                            {date.loginTime[0]}\r\n                          </td>\r\n                          <td className=\"text-uppercase\">\r\n                            {date.logoutTime[date.logoutTime.length - 1]}\r\n                          </td>\r\n                          <td className=\"position-relative bg-white\">\r\n                            <div\r\n                              style={{\r\n                                display: \"flex \",\r\n                                justifyContent: \"start\",\r\n                                alignItems: \"center\"\r\n                              }}\r\n                              className=\"fs-6 gap-2 \"\r\n                              onMouseEnter={handleInfoMouseEnter}\r\n                              onMouseLeave={handleInfoMouseLeave}\r\n                            >\r\n                              <span\r\n                                style={{ scale: \"0.7\" }}\r\n                                className=\"bg-warning py-0  text-white  px-2 rounded-5 my-auto\"\r\n                              >\r\n                                {date.breakTime.length}\r\n                              </span>\r\n                              <span className=\"fw-bold text-dark fs-6\">\r\n                                {millisecondsToTime(date.totalBrake)}\r\n                              </span>{\" \"}\r\n                              <FaCircleInfo\r\n                                style={{ fontSize: \".9rem\" }}\r\n                                className=\"text-info \"\r\n                              />\r\n                            </div>\r\n\r\n                            <div\r\n                              style={{ zIndex: \"5\", right: \"0%\" }}\r\n                              className=\"position-absolute\"\r\n                            >\r\n                              {isInfoHovering &&\r\n                                hoveredDate === date.date && ( // Check if info button is hovered and the date is the hovered date\r\n                                  <table className=\"table table-bordered table-striped\">\r\n                                    <thead>\r\n                                      <tr className=\"shadow-sm p-0\">\r\n                                        <th className=\"bg-info  py-0 text-white\">\r\n                                          Break\r\n                                        </th>\r\n                                        <th className=\"bg-info  py-0 text-white\">\r\n                                          Resume\r\n                                        </th>\r\n                                        <th\r\n                                          className=\"text-end  py-0 bg-info text-white\"\r\n                                          style={{ whiteSpace: \"pre\" }}\r\n                                        >\r\n                                          Total Break\r\n                                        </th>\r\n                                      </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                      {date.breakTime.map(\r\n                                        (breakTime, index) => (\r\n                                          <tr className=\"shadow-sm\" key={index}>\r\n                                            <td\r\n                                              className=\"text-uppercase  py-1 text-center\"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {breakTime}\r\n                                            </td>\r\n                                            <td\r\n                                              className=\"text-uppercase  py-1 text-center\"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {date.ResumeTime[index]}\r\n                                            </td>\r\n                                            <td\r\n                                              className=\"text-end py-1 \"\r\n                                              style={{ whiteSpace: \"pre\" }}\r\n                                            >\r\n                                              {millisecondsToTime(\r\n                                                date.BreakData[index]\r\n                                              )}\r\n                                            </td>\r\n                                          </tr>\r\n                                        )\r\n                                      )}\r\n                                    </tbody>\r\n                                  </table>\r\n                                )}\r\n                            </div>\r\n                          </td>\r\n                          <td>{millisecondsToTime(date.totalLogAfterBreak)}</td>\r\n                          <td>{date.status}</td>\r\n                        </tr>\r\n                      ))\r\n                  )\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n      {attendanceData === null && (\r\n        <div\r\n          style={{\r\n            height: \"80vh\",\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            wordSpacing: \"5px\",\r\n            flexDirection: \"column\",\r\n            gap: \"1rem\"\r\n          }}\r\n        >\r\n          <div className=\"fs-2 fw-bolder\">\r\n            <TfiReload className=\"spinner-border text-info\" />\r\n          </div>\r\n          <p className=\"text-muted\">\r\n            User not selected. To view data, please select a user.\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(SelfAttendance);\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpEducation\\EducationForm.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpEducation\\EducationTable.jsx",["1184","1185","1186","1187"],"// import React, { Component } from \"react\";\n// import \"./EducationTable.css\";\n// import axios from \"axios\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\n// import { RingLoader } from \"react-spinners\";\n// import { css } from \"@emotion/core\";\n// import { Button } from \"react-bootstrap\";\n// import { Link } from \"react-router-dom\";\n\n// import InnerDashContainer from \"../InnerDashContainer\";\n\n// const override = css`\n//   display: block;\n//   margin: 0 auto;\n//   margin-top: 45px;\n//   border-color: red;\n// `;\n\n// class EducationTable extends Component {\n//   state = {\n//     educationData: [],\n//     loading: true,\n\n//     rowData: []\n//   };\n//   educationObj = [];\n//   rowDataT = [];\n\n//   loadEducationData = () => {\n//     axios\n//       .get(\"http://localhost:4000/api/education/\" + this.props.data[\"_id\"], {\n//         headers: {\n//           authorization: localStorage.getItem(\"token\") || \"\"\n//         }\n//       })\n//       .then((response) => {\n//         this.educationObj = response.data;\n//         console.log(\"response\", response.data);\n//         this.setState({ educationData: response.data });\n//         this.setState({ loading: false });\n//         this.rowDataT = [];\n//         // let data=this.educationObj.education[\"0\"];\n//         this.educationObj.education.map((data) => {\n//           let temp = {\n//             data,\n//             SchoolUniversity: data[\"SchoolUniversity\"],\n//             Degree: data[\"Degree\"],\n//             Grade: data[\"Grade\"],\n//             PassingOfYear: data[\"PassingOfYear\"]\n//           };\n\n//           this.rowDataT.push(temp);\n//         });\n//         this.setState({ rowData: this.rowDataT });\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n//   };\n\n//   onEducationDelete = (e1, e2) => {\n//     console.log(e1, e2);\n//     if (window.confirm(\"Are you sure to delete this record? \") == true) {\n//       axios\n//         .delete(\"http://localhost:4000/api/education/\" + e1 + \"/\" + e2, {\n//           headers: {\n//             authorization: localStorage.getItem(\"token\") || \"\"\n//           }\n//         })\n//         .then((res) => {\n//           this.componentDidMount();\n//         })\n//         .catch((err) => {\n//           console.log(err);\n//         });\n//     }\n//   };\n//   componentDidMount() {\n//     this.loadEducationData();\n//   }\n//   renderButton(params) {\n//     console.log(params);\n//     if (this.props.back) {\n//       return <React.Fragment />;\n//     }\n//     return (\n//       <FontAwesomeIcon\n//         icon={faTrash}\n//         onClick={() =>\n//           this.onEducationDelete(\n//             this.props.data[\"_id\"],\n//             params.data.data[\"_id\"]\n//           )\n//         }\n//       />\n//     );\n//   }\n//   renderEditButton(params) {\n//     console.log(params);\n//     if (this.props.back) {\n//       return <React.Fragment />;\n//     }\n//     return (\n//       <FontAwesomeIcon\n//         icon={faEdit}\n//         onClick={() => this.props.onEditEducation(params.data.data)}\n//       />\n//     );\n//   }\n\n//   render() {\n//     return (\n//       <InnerDashContainer>\n//         <h2 id=\"role-title\">\n//           Employee Education Details{\" \"}\n//           {this.props.back\n//             ? \"of \" +\n//               this.props.data[\"FirstName\"] +\n//               \" \" +\n//               this.props.data[\"LastName\"]\n//             : \"\"}\n//         </h2>\n\n//         {this.props.back ? (\n//           <Link to=\"/hr/employee\">\n//             <Button variant=\"primary\" id=\"add-button\">\n//               Back\n//             </Button>\n//           </Link>\n//         ) : (\n//           <Button\n//             variant=\"primary\"\n//             id=\"add-button\"\n//             onClick={this.props.onAddEducation}\n//           >\n//             <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n//             Add\n//           </Button>\n//         )}\n\n//         <div id=\"clear-both\" />\n\n//         {!this.state.loading ? (\n//           <table className=\"table table-striped\">\n//             <thead>\n//               <tr>\n//                 <th\n//                   style={{\n//                     background:\n//                       \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n//                     color: \"white\"\n//                   }}\n//                 >\n//                   School/University\n//                 </th>\n//                 <th\n//                   style={{\n//                     background:\n//                       \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n//                     color: \"white\"\n//                   }}\n//                 >\n//                   Degree\n//                 </th>\n//                 <th\n//                   style={{\n//                     background:\n//                       \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n//                     color: \"white\"\n//                   }}\n//                 >\n//                   Grade\n//                 </th>\n//                 <th\n//                   style={{\n//                     background:\n//                       \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n//                     color: \"white\"\n//                   }}\n//                 >\n//                   Passing Year\n//                 </th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {this.state.rowData.map((items, index) => (\n//                 <tr key={index}>\n//                   <td className=\"text-uppercase\">{items.SchoolUniversity}</td>\n//                   <td className=\"text-uppercase\">{items.Degree}</td>\n//                   <td className=\"text-uppercase\">{items.Grade}</td>\n//                   <td className=\"text-uppercase\">{items.PassingOfYear}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         ) : (\n//           <div id=\"loading-bar\">\n//             <RingLoader\n//               css={override}\n//               sizeUnit={\"px\"}\n//               size={50}\n//               color={\"#0000ff\"}\n//               loading={true}\n//             />\n//           </div>\n//         )}\n//       </InnerDashContainer>\n//     );\n//   }\n// }\n\n// export default EducationTable;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport InnerDashContainer from \"../../InnerDashContainer\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nconst EducationTable = (props) => {\n  const [educationData, setEducationData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [rowData, setRowData] = useState([]);\n\n  useEffect(() => {\n    const loadEducationData = () => {\n      axios\n        .get(`http://localhost:4000/api/education/${props.data[\"_id\"]}`, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then((response) => {\n          const educationObj = response.data;\n          console.log(\"response\", response.data);\n          setEducationData(educationObj);\n          setLoading(false);\n\n          const rowDataT = educationObj.education.map((data) => ({\n            data,\n            SchoolUniversity: data[\"SchoolUniversity\"],\n            Degree: data[\"Degree\"],\n            Grade: data[\"Grade\"],\n            PassingOfYear: data[\"PassingOfYear\"]\n          }));\n\n          setRowData(rowDataT);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    };\n\n    loadEducationData();\n  }, [props.data[\"_id\"]]);\n\n  const onEducationDelete = (e1, e2) => {\n    console.log(e1, e2);\n    if (window.confirm(\"Are you sure to delete this record? \")) {\n      axios\n        .delete(`http://localhost:4000/api/education/${e1}/${e2}`, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then(() => {\n          educationData();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const renderButton = (params) => {\n    console.log(params);\n    if (props.back) {\n      return <React.Fragment />;\n    }\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() =>\n          onEducationDelete(props.data[\"_id\"], params.data.data[\"_id\"])\n        }\n      />\n    );\n  };\n\n  const renderEditButton = (params) => {\n    console.log(params);\n    if (props.back) {\n      return <React.Fragment />;\n    }\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => props.onEditEducation(params.data.data)}\n      />\n    );\n  };\n\n  return (\n    <InnerDashContainer>\n      <h2 id=\"role-title\">\n        Employee Education Details{\" \"}\n        {props.back\n          ? `of ${props.data[\"FirstName\"]} ${props.data[\"LastName\"]}`\n          : \"\"}\n      </h2>\n\n      {props.back ? (\n        <Link to=\"/hr/employee\">\n          <Button variant=\"primary\" id=\"add-button\">\n            Back\n          </Button>\n        </Link>\n      ) : (\n        <Button\n          variant=\"primary\"\n          id=\"add-button\"\n          onClick={props.onAddEducation}\n        >\n          <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n          Add\n        </Button>\n      )}\n\n      <div id=\"clear-both\" />\n\n      {!loading ? (\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th\n                style={{\n                  background: \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                  color: \"white\"\n                }}\n              >\n                School/University\n              </th>\n              <th\n                style={{\n                  background: \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                  color: \"white\"\n                }}\n              >\n                Degree\n              </th>\n              <th\n                style={{\n                  background: \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                  color: \"white\"\n                }}\n              >\n                Grade\n              </th>\n              <th\n                style={{\n                  background: \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                  color: \"white\"\n                }}\n              >\n                Passing Year\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {rowData.map((items, index) => (\n              <tr key={index}>\n                <td className=\"text-uppercase\">{items.SchoolUniversity}</td>\n                <td className=\"text-uppercase\">{items.Degree}</td>\n                <td className=\"text-uppercase\">{items.Grade}</td>\n                <td className=\"text-uppercase\">{items.PassingOfYear}</td>\n                {/* <td>\n                  <button\n                    onClick={() => props.onEditEducation(items.data)}\n                    style={{\n                      zIndex: \"1\",\n                      cursor: \"pointer\"\n                    }}\n                    className=\"btn\"\n                  >\n                    <FaRegEdit className=\"fs-4 text-primary bg-white p-1 rounded-5\" />\n                  </button>\n                </td> */}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <div id=\"loading-bar\">\n          <RingLoader\n            css={override}\n            sizeUnit={\"px\"}\n            size={50}\n            color={\"#0000ff\"}\n            loading={true}\n          />\n        </div>\n      )}\n    </InnerDashContainer>\n  );\n};\n\nexport default EducationTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Chart\\TaskChart.jsx",["1188","1189","1190","1191"],"// import React from \"react\";\r\n// import Chart from \"react-apexcharts\";\r\n// import \"./chart.css\";\r\n// function HrCharts() {\r\n//   const data = {\r\n//     options: {\r\n//       chart: {\r\n//         id: \"area\"\r\n//       },\r\n//       xaxis: {\r\n//         categories: [2020, 2021, 2022, 2023, 2024],\r\n//         labels: {\r\n//           style: {\r\n//             fontSize: \"14px\"\r\n//           }\r\n//         }\r\n//       },\r\n//       yaxis: {\r\n//         labels: {\r\n//           style: {\r\n//             fontSize: \"14px\"\r\n//           }\r\n//         }\r\n//       },\r\n//       dataLabels: {\r\n//         enabled: false\r\n//       },\r\n//       zoom: {\r\n//         enabled: false\r\n//       },\r\n//       stroke: {\r\n//         curve: \"straight\",\r\n//         width: 3,\r\n//         colors: [\"#5932EA\"]\r\n//       },\r\n//       markers: {\r\n//         colors: \"#5932EA\",\r\n//         hover: {\r\n//           size: 6,\r\n//           sizeOffset: 2,\r\n//           colors: \"#5932EA\"\r\n//         }\r\n//       },\r\n//       fill: {\r\n//         type: \"gradient\",\r\n//         colors: \"#5932EA\",\r\n//         gradient: {\r\n//           shadeIntensity: 0,\r\n//           opacityFrom: 1,\r\n//           opacityTo: 0.6,\r\n//           stops: [0, 100]\r\n//         }\r\n//       }\r\n//     },\r\n//     series: [\r\n//       {\r\n//         name: \"series-1\",\r\n//         data: [30, 40, 45, 50, 49, 60, 70, 91]\r\n//       }\r\n//     ]\r\n//   };\r\n\r\n//   const data1 = {\r\n//     series: [\r\n//       {\r\n//         name: \"Total Employee\",\r\n//         data: [30, 45, 57, 50, 65, 58, 63]\r\n//       }\r\n//     ],\r\n//     options: {\r\n//       chart: {\r\n//         type: \"bar\",\r\n//         height: 350\r\n//       },\r\n//       plotOptions: {\r\n//         bar: {\r\n//           horizontal: false,\r\n//           columnWidth: \"40%\",\r\n//           endingShape: \"rounded\"\r\n//         }\r\n//       },\r\n//       dataLabels: {\r\n//         enabled: false\r\n//       },\r\n//       stroke: {\r\n//         show: true,\r\n//         width: 2,\r\n//         colors: [\"transparent\"]\r\n//       },\r\n//       xaxis: {\r\n//         categories: [\r\n//           \"FrontEnd Developer\",\r\n//           \"Backend Developer\",\r\n//           \"Digital Marketing\",\r\n//           \"UI/UX Designer\",\r\n//           \"Graphic Designer\",\r\n//           \"Web Developer\",\r\n//           \"Web Designer\"\r\n//         ]\r\n//       },\r\n//       fill: {\r\n//         opacity: 1,\r\n//         colors: [\"#5932EA\"] // Change bar colors\r\n//       },\r\n//       tooltip: {\r\n//         y: {\r\n//           formatter: function (val) {\r\n//             return \" \" + val + \"\";\r\n//           }\r\n//         },\r\n//         markers: {\r\n//           colors: \"yellow\"\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n//   return (\r\n//     <div className=\"dashboard-table-container\">\r\n//       <div className=\"dashboard-table-left\">\r\n//         <h5>Employee Department</h5>\r\n//         <Chart\r\n//           options={data1.options}\r\n//           type=\"bar\"\r\n//           series={data1.series}\r\n//           height=\"85%\"\r\n//         />\r\n//       </div>\r\n\r\n//       <div className=\"dashboard-table-right\">\r\n//         <h5>Progress Report</h5>\r\n//         <Chart\r\n//           options={data.options}\r\n//           type=\"area\"\r\n//           series={data.series}\r\n//           height=\"85%\"\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default HrCharts;\r\n\r\n// EmployeeChart.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { FaChartLine } from \"react-icons/fa\";\r\n\r\nconst TaskChart = () => {\r\n  const [departmentData, setDepartmentData] = useState([]);\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const loadEmployeeData = () => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/employee\", {\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        if (Array.isArray(response.data)) {\r\n          setDepartmentData(\r\n            response.data.map(\r\n              (data) => data[\"department\"][0]?.DepartmentName || \"\"\r\n            )\r\n          );\r\n        } else {\r\n          console.error(\"Data received is not an array:\", response.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const loadTaskData = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:4000/api/tasks\");\r\n      setTasks(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching tasks:\", error.message);\r\n      setError(\"Error fetching tasks. Please try again later.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployeeData();\r\n    loadTaskData();\r\n  }, []);\r\n\r\n  const calculateRemainingTime = (endDate) => {\r\n    const now = new Date();\r\n    const endDateTime = new Date(endDate);\r\n    let remainingTime = endDateTime - now;\r\n\r\n    if (remainingTime < 0) {\r\n      // If remaining time is negative, consider it as delay\r\n      remainingTime = Math.abs(remainingTime);\r\n      return { delay: true, days: 0, hours: 0, minutes: 0 };\r\n    } else {\r\n      // Calculate remaining days, hours, minutes, and seconds\r\n      const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\r\n      const hours = Math.floor(\r\n        (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n      );\r\n      const minutes = Math.floor(\r\n        (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\r\n      );\r\n      return { delay: false, days, hours, minutes };\r\n    }\r\n  };\r\n\r\n  const countLateAndOnTimeTasks = () => {\r\n    const lateTasksCount = tasks.filter(\r\n      (task) =>\r\n        task.status === \"Pending\" && calculateRemainingTime(task.endDate).delay\r\n    ).length;\r\n\r\n    const onTimeTasksCount = tasks.filter(\r\n      (task) =>\r\n        task.status === \"Pending\" && !calculateRemainingTime(task.endDate).delay\r\n    ).length;\r\n\r\n    return { lateTasksCount, onTimeTasksCount };\r\n  };\r\n\r\n  const departmentCounts = {};\r\n  departmentData.forEach((department) => {\r\n    departmentCounts[department] = (departmentCounts[department] || 0) + 1;\r\n  });\r\n\r\n  const taskStatusCounts = {\r\n    Total: tasks.length,\r\n    Assigned: tasks.filter((tasks) => tasks.status === \"Assigned\").length,\r\n    Completed: tasks.filter((task) => task.status === \"Completed\").length,\r\n    Rejected: tasks.filter((task) => task.status === \"Rejected\").length,\r\n    Active: tasks.filter((task) => task.status === \"Pending\").length,\r\n    Overdue: tasks.filter(\r\n      (task) =>\r\n        task.status === \"Pending\" && calculateRemainingTime(task.endDate).delay\r\n    ).length,\r\n    Ontime: tasks.filter(\r\n      (task) =>\r\n        task.status === \"Pending\" && !calculateRemainingTime(task.endDate).delay\r\n    ).length\r\n  };\r\n\r\n  const chartData = {\r\n    series: [\r\n      {\r\n        name: \"Total Employee\",\r\n        data: Object.values(departmentCounts)\r\n      }\r\n    ],\r\n    options: {\r\n      chart: {\r\n        type: \"bar\",\r\n        height: 350\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          horizontal: false,\r\n          columnWidth: \"40%\",\r\n          endingShape: \"rounded\"\r\n        }\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        show: true,\r\n        width: 2,\r\n        colors: [\"transparent\"]\r\n      },\r\n      xaxis: {\r\n        categories: Object.keys(departmentCounts),\r\n        title: {\r\n          text: \"Department Wise Employee\"\r\n        }\r\n      },\r\n      yaxis: {\r\n        title: {\r\n          text: \"Number of Employee\"\r\n        }\r\n      },\r\n\r\n      fill: {\r\n        opacity: 1,\r\n        colors: [\"rgb(100, 150, 200)\"] // Change bar colors\r\n      },\r\n      tooltip: {\r\n        y: {\r\n          formatter: function (val) {\r\n            return \" \" + val + \"\";\r\n          }\r\n        },\r\n        markers: {\r\n          colors: \"yellow\"\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const taskStatusChartData = {\r\n    options: {\r\n      chart: {\r\n        id: \"task-status-chart\",\r\n        type: \"bar\"\r\n      },\r\n      xaxis: {\r\n        categories: Object.keys(taskStatusCounts),\r\n        title: {\r\n          text: \"Task Status\"\r\n        }\r\n      },\r\n      yaxis: {\r\n        title: {\r\n          text: \"Number of Tasks\"\r\n        }\r\n      }\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Task Status\",\r\n        data: Object.values(taskStatusCounts)\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div className=\"ChartCard shadow-sm\">\r\n      <div className=\"ChartHeader\">\r\n        <h5 className=\"fw-bolder d-flex gap-3 \">\r\n          <FaChartLine className=\"my-auto\" />\r\n          Task Progress Report\r\n        </h5>\r\n      </div>\r\n      <div className=\"chartBody\">\r\n        <Chart\r\n          options={taskStatusChartData.options}\r\n          series={taskStatusChartData.series}\r\n          type=\"bar\"\r\n          height=\"85%\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskChart;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Chart\\DepartmentChart.jsx",["1192","1193","1194","1195","1196"],"import React, { useState, useEffect } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport \"./chart.css\";\r\nimport axios from \"axios\";\r\n\r\nconst DepartmentChart = () => {\r\n  const [departmentData, setDepartmentData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [chartOption, setChartOption] = useState({\r\n    options: {\r\n      labels: [],\r\n      plotOptions: {\r\n        pie: {\r\n          donut: {\r\n            labels: {\r\n              show: true,\r\n              total: {\r\n                show: true\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    series: []\r\n  });\r\n\r\n  const loadEmployeeData = () => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/employee\", {\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        if (Array.isArray(response.data)) {\r\n          setDepartmentData(\r\n            response.data.map(\r\n              (data) => data[\"department\"][0]?.DepartmentName || \"\"\r\n            )\r\n          );\r\n        } else {\r\n          console.error(\"Data received is not an array:\", response.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployeeData();\r\n  }, []);\r\n\r\n  const updateChartOptions = () => {\r\n    const departmentCounts = {};\r\n    departmentData.forEach((department) => {\r\n      departmentCounts[department] = (departmentCounts[department] || 0) + 1;\r\n    });\r\n\r\n    const labels = Object.keys(departmentCounts);\r\n    const series = labels.map((label) => departmentCounts[label]);\r\n\r\n    setChartOption({\r\n      options: {\r\n        labels: labels,\r\n        plotOptions: {\r\n          pie: {\r\n            donut: {\r\n              labels: {\r\n                show: true,\r\n                total: {\r\n                  show: true\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      series: series\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateChartOptions();\r\n  }, [departmentData]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"ChartCard shadow-sm \">\r\n        <div className=\"ChartHeader\">\r\n          <h5 className=\"fw-bolder d-flex gap-3\">Employee By Department</h5>\r\n        </div>\r\n        <Chart\r\n          options={chartOption.options}\r\n          series={chartOption.series}\r\n          type=\"donut\"\r\n          width=\"100%\"\r\n          height=\"300px\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DepartmentChart;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\Dashboard\\CountData\\LeavesCount.jsx",["1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219","1220","1221","1222","1223"],"import React, { useState, useEffect } from \"react\";\r\n// import \"./LeaveApplicationHRTable.css\";\r\nimport axios from \"axios\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { RingLoader } from \"react-spinners\";\r\nimport { IoIosArrowDroprightCircle } from \"react-icons/io\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { css } from \"@emotion/core\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Table,\r\n  Dropdown,\r\n  DropdownButton\r\n} from \"react-bootstrap\";\r\n\r\n// *************csv & pdf **************//\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { BsFillFileEarmarkPdfFill } from \"react-icons/bs\";\r\n// *************csv & pdf **************//\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  margin-top: 45px;\r\n  border-color: red;\r\n`;\r\n\r\nconst LeaveApplicationHRTable = (props) => {\r\n  const [leaveApplicationHRData, setLeaveApplicationHRData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchData, setSearchData] = useState(\"\");\r\n  const [totalLeaves, setTotalLeaves] = useState(0);\r\n  const [sortColumn, setSortColumn] = useState(null);\r\n  const [sortDirection, setSortDirection] = useState(\"asc\");\r\n  const [rowData, setRowData] = useState([]);\r\n\r\n  // ...\r\n\r\n  let leaveApplicationHRObj = [];\r\n  let rowDataT = [];\r\n\r\n  const loadLeaveApplicationHRData = () => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/leave-application-hr/\", {\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        leaveApplicationHRObj = response.data;\r\n        console.log(\"response\", response.data);\r\n        setLeaveApplicationHRData(response.data);\r\n        setLoading(false);\r\n\r\n        rowDataT = [];\r\n\r\n        leaveApplicationHRObj.map((data) => {\r\n          let temp = {\r\n            data,\r\n            empID:\r\n              data[\"employee\"] &&\r\n              data[\"employee\"][0] &&\r\n              data[\"employee\"][0][\"empID\"],\r\n            Name:\r\n              data[\"employee\"] &&\r\n              data[\"employee\"][0] &&\r\n              data[\"employee\"][0][\"FirstName\"] +\r\n                \" \" +\r\n                data[\"employee\"][0][\"LastName\"],\r\n            Leavetype: data[\"Leavetype\"],\r\n            FromDate: data[\"FromDate\"].slice(0, 10),\r\n            ToDate: data[\"ToDate\"].slice(0, 10),\r\n            Reasonforleave: data[\"Reasonforleave\"],\r\n            Status: status(data[\"Status\"])\r\n          };\r\n\r\n          rowDataT.push(temp);\r\n        });\r\n\r\n        setRowData(rowDataT);\r\n\r\n        setTotalLeaves(response.data.length);\r\n        props.updateTotalLeaves(response.data.length);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // ...\r\n\r\n  const onLeaveApplicationHRDelete = (e1, e2) => {\r\n    console.log(e1, e2);\r\n    if (window.confirm(\"Are you sure to delete this record? \") == true) {\r\n      axios\r\n        .delete(\r\n          \"http://localhost:4000/api/leave-application-hr/\" + e1 + \"/\" + e2,\r\n          {\r\n            headers: {\r\n              authorization: localStorage.getItem(\"token\") || \"\"\r\n            }\r\n          }\r\n        )\r\n        .then((res) => {\r\n          loadLeaveApplicationHRData();\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const exportToPDF = () => {\r\n    if (window.confirm(\"Are you sure to download Leave record? \")) {\r\n      // Set A4 landscape dimensions\r\n      const pdfWidth = 297; // A4 width in mm\r\n      const pdfHeight = 210; // A4 height in mm\r\n      const doc = new jsPDF({\r\n        orientation: \"landscape\",\r\n        unit: \"mm\",\r\n        format: [pdfWidth, pdfHeight]\r\n      });\r\n\r\n      doc.setFontSize(18);\r\n      doc.text(\"Employee Leave Details\", pdfWidth / 2, 15, \"center\");\r\n      const headers = [\r\n        \"Emp Id\",\r\n        \"Leave Type\",\r\n        \"Start Date\",\r\n        \"End Date\",\r\n        \"Remarks\",\r\n        \"Status\"\r\n      ];\r\n      const data = rowData.map((row) => [\r\n        row.empID,\r\n        row.Leavetype,\r\n        row.FromDate,\r\n        row.ToDate,\r\n        row.Reasonforleave,\r\n        row.Status,\r\n\r\n        \"\" // Action column - you can customize this based on your requirements\r\n      ]);\r\n      doc.setFontSize(12);\r\n      doc.autoTable({\r\n        head: [headers],\r\n        body: data,\r\n        startY: 25\r\n      });\r\n\r\n      doc.save(\"leaveApplication_data.pdf\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadLeaveApplicationHRData();\r\n  }, []);\r\n\r\n  const renderButton = (params) => {\r\n    console.log(params);\r\n    return (\r\n      <FontAwesomeIcon\r\n        icon={faTrash}\r\n        onClick={() =>\r\n          onLeaveApplicationHRDelete(\r\n            params.data.data[\"employee\"][0][\"_id\"],\r\n            params.data.data[\"_id\"]\r\n          )\r\n        }\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderEditButton = (params) => {\r\n    console.log(params);\r\n    return (\r\n      <FontAwesomeIcon\r\n        icon={faEdit}\r\n        onClick={() => props.onEditLeaveApplicationHR(params.data.data)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const status = (s) => {\r\n    if (s == 1) {\r\n      return \"Pending\";\r\n    }\r\n    if (s == 2) {\r\n      return \"Approved\";\r\n    }\r\n    if (s == 3) {\r\n      return \"Rejected\";\r\n    }\r\n    // Add a default case or return a meaningful value for unknown status\r\n    return \"Unknown\";\r\n  };\r\n\r\n  const renderSortIcon = (field) => {\r\n    if (sortColumn === field) {\r\n      return sortDirection === \"asc\" ? \"▴\" : \"▾\";\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const sortData = (columnName) => {\r\n    const newSortDirection =\r\n      sortColumn === columnName && sortDirection === \"asc\" ? \"desc\" : \"asc\";\r\n\r\n    const sortedData = [...rowData];\r\n\r\n    sortedData.sort((a, b) => {\r\n      const valueA = a[columnName];\r\n      const valueB = b[columnName];\r\n\r\n      let comparison = 0;\r\n\r\n      if (valueA > valueB) {\r\n        comparison = 1;\r\n      } else if (valueA < valueB) {\r\n        comparison = -1;\r\n      }\r\n\r\n      return newSortDirection === \"desc\" ? comparison * -1 : comparison;\r\n    });\r\n\r\n    setRowData(sortedData);\r\n    setSortColumn(columnName);\r\n    setSortDirection(newSortDirection);\r\n  };\r\n\r\n  // Calculate the total length for each status\r\n  const pendingLeaves = rowData.filter(\r\n    (data) => data.Status === \"Pending\"\r\n  ).length;\r\n  const approvedLeaves = rowData.filter(\r\n    (data) => data.Status === \"Approved\"\r\n  ).length;\r\n  const rejectedLeaves = rowData.filter(\r\n    (data) => data.Status === \"Rejected\"\r\n  ).length;\r\n\r\n  return (\r\n    // <div className=\"p-4\">\r\n    //   <div className=\"d-flex justify-between\">\r\n    //     <h3 className=\"fw-bold text-muted\">Leave Request ({totalLeaves})</h3>\r\n\r\n    //     <button\r\n    //       className=\"btn px-3 d-flex justify-center aline-center gap-2\"\r\n    //       onClick={exportToPDF}\r\n    //     >\r\n    //       <BsFillFileEarmarkPdfFill className=\"text-danger fs-4\" />\r\n    //       <p className=\"my-auto fs-5 fw-bold\">PDF</p>\r\n    //     </button>\r\n    //   </div>\r\n\r\n    //   <div id=\"clear-both\" />\r\n\r\n    //   <div className=\"mt-3\">\r\n    //     {/* Display the total length for each status */}\r\n    //     <p>Total Pending Leaves: {pendingLeaves}</p>\r\n    //     <p>Total Approved Leaves: {approvedLeaves}</p>\r\n    //     <p>Total Rejected Leaves: {rejectedLeaves}</p>\r\n\r\n    //     {/* Display the table */}\r\n    //     {!loading ? (\r\n    //       <div\r\n    //         style={{\r\n    //           overflow: \"auto\",\r\n    //           height: \"85vh\",\r\n    //           width: \"100%\",\r\n    //           scrollbarWidth: \"thin\"\r\n    //         }}\r\n    //       >\r\n    //         <table className=\"table table-striped\">\r\n    //           <thead>{/* ... (existing code) */}</thead>\r\n    //           <tbody>\r\n    //             {rowData\r\n    //               .filter((e) => e.Status == \"Pending\")\r\n    //               .map((data, index) => (\r\n    //                 <tr key={index}>{/* ... (existing code) */}</tr>\r\n    //               ))}\r\n    //           </tbody>\r\n    //         </table>\r\n    //       </div>\r\n    //     ) : (\r\n    //       <div id=\"loading-bar\">\r\n    //         <RingLoader\r\n    //           css={override}\r\n    //           sizeUnit={\"px\"}\r\n    //           size={50}\r\n    //           color={\"#0000ff\"}\r\n    //           loading={true}\r\n    //         />\r\n    //       </div>\r\n    //     )}\r\n    //   </div>\r\n    // </div>\r\n    <div>\r\n      <div className=\"container-fluid  mt-4\">\r\n        <div className=\"row row-gap-4\">\r\n          <div className=\"col-md-4\">\r\n            <div\r\n              style={{ backgroundColor: \"#FED2AA\" }}\r\n              className=\" DashboardCard position-relative\"\r\n            >\r\n              <div className=\" d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  On Pending Leaves\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {pendingLeaves}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/leave-application-hr\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <div\r\n              style={{ backgroundColor: \"#DFFFD8\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  On Approved Leaves{\" \"}\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {approvedLeaves}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/leaveAccepted\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* <div className=\"row row-gap-4\"></div> */}\r\n          <div className=\"col-md-4\">\r\n            <div\r\n              style={{ backgroundColor: \"#FEBBCC\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  On Rejected Leaves\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {rejectedLeaves}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/leaveRejected\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#BCCEF8\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Total Role\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/role\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaveApplicationHRTable;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\Dashboard\\CountData\\EmployeeCount.jsx",["1224","1225","1226","1227","1228","1229","1230","1231","1232","1233","1234","1235","1236","1237","1238","1239","1240"],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpFamily\\FamilyInfoForm.jsx",["1241"],"// import React, { Component } from \"react\";\n// import \"./FamilyInfoForm.css\";\n// import { Form, Button, Col, Row } from \"react-bootstrap\";\n// import axios from \"axios\";\n\n// class FamilyInfoForm extends Component {\n//   state = {};\n//   componentWillMount() {}\n//   render() {\n//     return (\n//       <div>\n//         <h2 id=\"role-form-title\">Add FamilyInfo Details</h2>\n//         <div id=\"role-form-outer-div\">\n//           <Form id=\"form\" onSubmit={this.props.onFamilyInfoSubmit}>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//                 Name\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control type=\"Text\" placeholder=\"Name\" required />\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//                 Relationship\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control type=\"Text\" placeholder=\"Relationship\" required />\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//                 DOB\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control type=\"date\" required />\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//                 Occupation\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control type=\"Text\" placeholder=\"Occupation\" required />\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//                 Contact No\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control type=\"Text\" placeholder=\"Contact No\" required />\n//               </Col>\n//             </Form.Group>\n\n//             <Form.Group as={Row} id=\"form-submit-button\">\n//               <Col sm={{ span: 10, offset: 2 }}>\n//                 <Button type=\"submit\">Submit</Button>\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row} id=\"form-cancel-button\">\n//               <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n//                 <Button type=\"reset\" onClick={this.props.onFormClose}>\n//                   cancel\n//                 </Button>\n//               </Col>\n//             </Form.Group>\n//           </Form>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default FamilyInfoForm;\nimport React from \"react\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nconst FamilyInfoForm = (props) => {\n  return (\n    <div>\n      <h2 id=\"role-form-title\">Add FamilyInfo Details</h2>\n      <div id=\"role-form-outer-div\">\n        <Form id=\"form\" onSubmit={props.onFamilyInfoSubmit}>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Name\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control type=\"Text\" placeholder=\"Name\" required />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Relationship\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control type=\"Text\" placeholder=\"Relationship\" required />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              DOB\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control type=\"date\" required />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Occupation\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control type=\"Text\" placeholder=\"Occupation\" required />\n            </Col>\n          </Form.Group>\n          {/* <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Contact No\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control type=\"Text\" placeholder=\"Contact No\" required />\n            </Col>\n          </Form.Group> */}\n\n          <Form.Group as={Row} id=\"form-submit-button\">\n            <Col sm={{ span: 10, offset: 2 }}>\n              <Button type=\"submit\">Submit</Button>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} id=\"form-cancel-button\">\n            <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n              <Button type=\"reset\" onClick={props.onFormClose}>\n                cancel\n              </Button>\n            </Col>\n          </Form.Group>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default FamilyInfoForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpFamily\\FamilyInfoFormEdit.jsx",["1242"],"// import React, { Component } from \"react\";\n// // import \"./FamilyInfoFormEdit.css\";\n// // import { Form,Button } from \"react-bootstrap\";\n// import { Form, Button, Col, Row } from \"react-bootstrap\";\n// import axios from \"axios\";\n\n// class FamilyInfoForm extends Component {\n//   state = {\n//     // FamilyInfoData: this.props.editData[\"FamilyInfoName\"],\n\n//     NameData: this.props.editData[\"Name\"],\n//     RelationshipData: this.props.editData[\"Relationship\"],\n//     DOBData: this.props.editData[\"DOB\"].slice(0, 10),\n//     OccupationData: this.props.editData[\"Occupation\"]\n//   };\n//   onNameDataChange(e) {\n//     this.setState({ NameData: e.target.value });\n//   }\n//   onRelationshipDataChange(e) {\n//     this.setState({ RelationshipData: e.target.value });\n//   }\n//   onOccupationDataChange(e) {\n//     this.setState({ OccupationData: e.target.value });\n//   }\n//   onDOBDataChange(e) {\n//     this.setState({ DOBData: e.target.value });\n//   }\n\n//   componentWillMount() {\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <h2 id=\"role-form-title\">Edit FamilyInfo Details</h2>\n\n//         <div id=\"role-form-outer-div\">\n//           <Form\n//             id=\"form\"\n//             onSubmit={e =>\n//               this.props.onFamilyInfoEditUpdate(this.props.editData, e)\n//             }\n//           >\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//               Name\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control\n//                   type=\"Text\"\n//                   placeholder=\"Name\"\n//                   required\n//                   value={this.state.NameData}\n//                   onChange={value => this.onNameDataChange(value)}\n//                 />\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//               Relationship\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control\n//                   type=\"Text\"\n//                   placeholder=\"Relationship\"\n//                   required\n//                   value={this.state.RelationshipData}\n//                   onChange={value => this.onRelationshipDataChange(value)}\n//                 />\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//               DOB\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control\n//                   type=\"date\"\n//                   placeholder=\"Grade\"\n//                   required\n//                   value={this.state.DOBData}\n//                   onChange={value => this.onDOBDataChange(value)}\n//                 />\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//               Occupation\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control\n//                   type=\"Text\"\n//                   placeholder=\" Occupation\"\n//                   required\n//                   value={this.state.OccupationData}\n//                   onChange={value => this.onOccupationDataChange(value)}\n//                 />\n//               </Col>\n//             </Form.Group>\n\n//             <Form.Group as={Row} id=\"form-submit-button\">\n//               <Col sm={{ span: 10, offset: 2 }}>\n//                 <Button type=\"submit\">Update</Button>\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row} id=\"form-cancel-button\">\n//               <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n//                 <Button type=\"reset\" onClick={this.props.onFormEditClose}>\n//                   cancel\n//                 </Button>\n//               </Col>\n//             </Form.Group>\n//           </Form>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default FamilyInfoForm;\n\nimport React, { useState } from \"react\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nconst FamilyInfoFormEdit = (props) => {\n  const [nameData, setNameData] = useState(props.editData[\"Name\"]);\n  const [relationshipData, setRelationshipData] = useState(\n    props.editData[\"Relationship\"]\n  );\n  const [dobData, setDOBData] = useState(props.editData[\"DOB\"].slice(0, 10));\n  const [occupationData, setOccupationData] = useState(\n    props.editData[\"Occupation\"]\n  );\n\n  const onNameDataChange = (e) => {\n    setNameData(e.target.value);\n  };\n\n  const onRelationshipDataChange = (e) => {\n    setRelationshipData(e.target.value);\n  };\n\n  const onOccupationDataChange = (e) => {\n    setOccupationData(e.target.value);\n  };\n\n  const onDOBDataChange = (e) => {\n    setDOBData(e.target.value);\n  };\n\n  return (\n    <div>\n      <h2 id=\"role-form-title\">Edit FamilyInfo Details</h2>\n      <div id=\"role-form-outer-div\">\n        <Form\n          id=\"form\"\n          onSubmit={(e) => props.onFamilyInfoEditUpdate(props.editData, e)}\n        >\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Name\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control\n                type=\"Text\"\n                placeholder=\"Name\"\n                required\n                value={nameData}\n                onChange={(e) => onNameDataChange(e)}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Relationship\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control\n                type=\"Text\"\n                placeholder=\"Relationship\"\n                required\n                value={relationshipData}\n                onChange={(e) => onRelationshipDataChange(e)}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              DOB\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control\n                type=\"date\"\n                placeholder=\"DOB\"\n                required\n                value={dobData}\n                onChange={(e) => onDOBDataChange(e)}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Occupation\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control\n                type=\"Text\"\n                placeholder=\"Occupation\"\n                required\n                value={occupationData}\n                onChange={(e) => onOccupationDataChange(e)}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} id=\"form-submit-button\">\n            <Col sm={{ span: 10, offset: 2 }}>\n              <Button type=\"submit\">Update</Button>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} id=\"form-cancel-button\">\n            <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n              <Button type=\"reset\" onClick={props.onFormEditClose}>\n                Cancel\n              </Button>\n            </Col>\n          </Form.Group>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default FamilyInfoFormEdit;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpFamily\\FamilyInfoTable.jsx",["1243","1244","1245","1246"],"// import React, { Component } from \"react\";\n// import \"./FamilyInfoTable.css\";\n// import axios from \"axios\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\n// import { RingLoader } from \"react-spinners\";\n// import { css } from \"@emotion/core\";\n// import { Button } from \"react-bootstrap\";\n// import { Link } from \"react-router-dom\";\n\n// import { AgGridReact } from \"ag-grid-react\";\n// import \"ag-grid-community/dist/styles/ag-grid.css\";\n// import \"ag-grid-community/dist/styles/ag-theme-balham.css\";\n// import InnerDashContainer from \"../InnerDashContainer\";\n\n// const override = css`\n//   display: block;\n//   margin: 0 auto;\n//   margin-top: 45px;\n//   border-color: red;\n// `;\n\n// class FamilyInfoTable extends Component {\n//   state = {\n//     familyInfoData: [],\n//     loading: true,\n\n//     rowData: []\n//   };\n//   familyInfoObj = [];\n//   rowDataT = [];\n\n//   loadFamilyInfoData = () => {\n//     axios\n//       .get(\"http://localhost:4000/api/family-info/\" + this.props.data[\"_id\"], {\n//         headers: {\n//           authorization: localStorage.getItem(\"token\") || \"\"\n//         }\n//       })\n//       .then((response) => {\n//         this.familyInfoObj = response.data;\n//         console.log(\"response\", response.data);\n//         this.setState({ familyInfoData: response.data });\n//         this.setState({ loading: false });\n//         this.rowDataT = [];\n//         // let data=this.familyInfoObj.familyInfo[\"0\"];\n//         this.familyInfoObj.familyInfo.map((data) => {\n//           let temp = {\n//             data,\n//             Name: data[\"Name\"],\n//             Relationship: data[\"Relationship\"],\n//             DOB: data[\"DOB\"].slice(0, 10),\n//             Occupation: data[\"Occupation\"]\n//           };\n\n//           this.rowDataT.push(temp);\n//         });\n//         this.setState({ rowData: this.rowDataT });\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n//   };\n\n//   onFamilyInfoDelete = (e1, e2) => {\n//     console.log(e1, e2);\n//     if (window.confirm(\"Are you sure to delete this record? \") == true) {\n//       axios\n//         .delete(\"http://localhost:4000/api/family-info/\" + e1 + \"/\" + e2, {\n//           headers: {\n//             authorization: localStorage.getItem(\"token\") || \"\"\n//           }\n//         })\n//         .then((res) => {\n//           this.componentDidMount();\n//         })\n//         .catch((err) => {\n//           console.log(err);\n//         });\n//     }\n//   };\n//   componentDidMount() {\n//     this.loadFamilyInfoData();\n//   }\n\n//   renderButton(params) {\n//     console.log(params);\n//     if (this.props.back) {\n//       return <React.Fragment />;\n//     }\n//     return (\n//       <FontAwesomeIcon\n//         icon={faTrash}\n//         onClick={() =>\n//           this.onFamilyInfoDelete(\n//             this.props.data[\"_id\"],\n//             params.data.data[\"_id\"]\n//           )\n//         }\n//       />\n//     );\n//   }\n//   renderEditButton(params) {\n//     console.log(params);\n//     if (this.props.back) {\n//       return <React.Fragment />;\n//     }\n//     return (\n//       <FontAwesomeIcon\n//         icon={faEdit}\n//         onClick={() => this.props.onEditFamilyInfo(params.data.data)}\n//       />\n//     );\n//   }\n\n//   render() {\n//     return (\n//       <InnerDashContainer>\n//         <h2 id=\"role-title\">\n//           Employee Family Details{\" \"}\n//           {this.props.back\n//             ? \"of \" +\n//               this.props.data[\"FirstName\"] +\n//               \" \" +\n//               this.props.data[\"LastName\"]\n//             : \"\"}\n//         </h2>\n\n//         {this.props.back ? (\n//           <Link to=\"/hr/employee\">\n//             <Button variant=\"primary\" id=\"add-button\">\n//               Back\n//             </Button>\n//           </Link>\n//         ) : (\n//           <Button\n//             variant=\"primary\"\n//             id=\"add-button\"\n//             onClick={this.props.onAddFamilyInfo}\n//           >\n//             <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n//             Add\n//           </Button>\n//         )}\n\n//         <div id=\"clear-both\" />\n\n//         {!this.state.loading ? (\n//           // <div\n//           //   id=\"table-div\"\n//           //   className=\"ag-theme-balham\"\n//           //   //   style={\n//           //   //     {\n//           //   //     height: \"500px\",\n//           //   //     width: \"100%\"\n//           //   //   }\n//           //   // }\n//           // >\n//           //   <AgGridReact\n//           //     columnDefs={this.state.columnDefs}\n//           //     defaultColDef={this.state.defaultColDef}\n//           //     columnTypes={this.state.columnTypes}\n//           //     rowData={this.state.rowData}\n//           //     // floatingFilter={true}\n//           //     // onGridReady={this.onGridReady}\n//           //     pagination={true}\n//           //     paginationPageSize={10}\n//           //     getRowHeight={this.state.getRowHeight}\n//           //   />\n//           // </div>\n//           <table className=\"table table-striped\">\n//             <thead>\n//               <tr>\n//                 <th\n//                   style={{\n//                     background:\n//                       \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n//                     color: \"white\"\n//                   }}\n//                 >\n//                   Name\n//                 </th>\n//                 <th\n//                   style={{\n//                     background:\n//                       \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n//                     color: \"white\"\n//                   }}\n//                 >\n//                   Relationship\n//                 </th>\n//                 <th\n//                   style={{\n//                     background:\n//                       \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n//                     color: \"white\"\n//                   }}\n//                 >\n//                   DOB\n//                 </th>\n//                 <th\n//                   style={{\n//                     background:\n//                       \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n//                     color: \"white\"\n//                   }}\n//                 >\n//                   Occupation\n//                 </th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {this.state.rowData.map((items, index) => (\n//                 <tr key={index}>\n//                   <td className=\"text-uppercase\">{items.Name}</td>\n//                   <td className=\"text-uppercase\">{items.Relationship}</td>\n//                   <td className=\"text-uppercase\">{items.DOB}</td>\n//                   <td className=\"text-uppercase\">{items.Occupation}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         ) : (\n//           <div id=\"loading-bar\">\n//             <RingLoader\n//               css={override}\n//               sizeUnit={\"px\"}\n//               size={50}\n//               color={\"#0000ff\"}\n//               loading={true}\n//             />\n//           </div>\n//         )}\n//       </InnerDashContainer>\n//     );\n//   }\n// }\n\n// export default FamilyInfoTable;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./FamilyInfoTable.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport InnerDashContainer from \"../../InnerDashContainer\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nconst FamilyInfoTable = (props) => {\n  const [familyInfoData, setFamilyInfoData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [rowData, setRowData] = useState([]);\n\n  const familyInfoObj = [];\n\n  const loadFamilyInfoData = () => {\n    axios\n      .get(\"http://localhost:4000/api/family-info/\" + props.data[\"_id\"], {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        familyInfoObj.push(response.data);\n        console.log(\"response\", response.data);\n        setFamilyInfoData(response.data);\n        setLoading(false);\n        const tempRowData = response.data.familyInfo.map((data) => ({\n          data,\n          Name: data[\"Name\"],\n          Relationship: data[\"Relationship\"],\n          DOB: data[\"DOB\"].slice(0, 10),\n          Occupation: data[\"Occupation\"]\n        }));\n        setRowData(tempRowData);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const onFamilyInfoDelete = (e1, e2) => {\n    console.log(e1, e2);\n    if (window.confirm(\"Are you sure to delete this record? \") === true) {\n      axios\n        .delete(\"http://localhost:4000/api/family-info/\" + e1 + \"/\" + e2, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then((res) => {\n          loadFamilyInfoData();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  useEffect(() => {\n    loadFamilyInfoData();\n  }, []);\n\n  const renderButton = (params) => {\n    console.log(params);\n    if (props.back) {\n      return <React.Fragment />;\n    }\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() =>\n          onFamilyInfoDelete(props.data[\"_id\"], params.data.data[\"_id\"])\n        }\n      />\n    );\n  };\n\n  const renderEditButton = (params) => {\n    console.log(params);\n    if (props.back) {\n      return <React.Fragment />;\n    }\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => props.onEditFamilyInfo(params.data.data)}\n      />\n    );\n  };\n\n  return (\n    <InnerDashContainer>\n      <h2 id=\"role-title\">\n        Employee Family Details{\" \"}\n        {props.back\n          ? \"of \" + props.data[\"FirstName\"] + \" \" + props.data[\"LastName\"]\n          : \"\"}\n      </h2>\n\n      {props.back ? (\n        <Link to=\"/hr/employee\">\n          <Button variant=\"primary\" id=\"add-button\">\n            Back\n          </Button>\n        </Link>\n      ) : (\n        <Button\n          variant=\"primary\"\n          id=\"add-button\"\n          onClick={props.onAddFamilyInfo}\n        >\n          <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n          Add\n        </Button>\n      )}\n\n      <div id=\"clear-both\" />\n\n      {!loading ? (\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th\n                style={{\n                  background: \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                  color: \"white\"\n                }}\n              >\n                Name\n              </th>\n              <th\n                style={{\n                  background: \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                  color: \"white\"\n                }}\n              >\n                Relationship\n              </th>\n              <th\n                style={{\n                  background: \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                  color: \"white\"\n                }}\n              >\n                DOB\n              </th>\n              <th\n                style={{\n                  background: \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                  color: \"white\"\n                }}\n              >\n                Occupation\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {rowData.map((items, index) => (\n              <tr key={index}>\n                <td className=\"text-uppercase\">{items.Name}</td>\n                <td className=\"text-uppercase\">{items.Relationship}</td>\n                <td className=\"text-uppercase\">{items.DOB}</td>\n                <td className=\"text-uppercase\">{items.Occupation}</td>\n                {/* <td>\n                  {\" \"}\n                  <button\n                    onClick={() => props.onEditFamilyInfo(items.data)}\n                    style={{\n                      zIndex: \"1\",\n                      cursor: \"pointer\"\n                    }}\n                    className=\"btn\"\n                  >\n                    <FaRegEdit className=\"fs-4 text-primary bg-white p-1 rounded-5\" />\n                  </button>\n                </td> */}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <div id=\"loading-bar\">\n          <RingLoader\n            css={override}\n            sizeUnit={\"px\"}\n            size={50}\n            color={\"#0000ff\"}\n            loading={true}\n          />\n        </div>\n      )}\n    </InnerDashContainer>\n  );\n};\n\nexport default FamilyInfoTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpWorkExp\\WorkExperienceFormEdit.jsx",["1247"],"import React, { Component } from \"react\";\n// import \"./WorkExperienceFormEdit.css\";\n// import { Form,Button } from \"react-bootstrap\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nclass WorkExperienceForm extends Component {\n  state = {\n    // WorkExperienceData: this.props.editData[\"WorkExperienceName\"],\n\n    CompanyNameData: this.props.editData[\"CompanyName\"],\n    DesignationData: this.props.editData[\"Designation\"],\n    FromDateData: this.props.editData[\"FromDate\"].slice(0, 10),\n    ToDateData: this.props.editData[\"ToDate\"].slice(0, 10),\n  };\n  onCompanyNameDataChange(e) {\n    this.setState({ CompanyNameData: e.target.value });\n  }\n  onDesignationDataChange(e) {\n    this.setState({ DesignationData: e.target.value });\n  }\n  onFromDateDataChange(e) {\n    this.setState({ FromDateData: e.target.value });\n  }\n  onToDateDataChange(e) {\n    this.setState({ ToDateData: e.target.value });\n  }\n\n  componentWillMount() {\n  }\n\n  render() {\n    return (\n      <div>\n        <h2 id=\"role-form-title\">Edit WorkExperience Details</h2>\n\n        <div id=\"role-form-outer-div\">\n          <Form\n            id=\"form\"\n            onSubmit={e =>\n              this.props.onWorkExperienceEditUpdate(this.props.editData, e)\n            }\n          >\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n              Company Name\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Company Name\"\n                  required\n                  value={this.state.CompanyNameData}\n                  onChange={value => this.onCompanyNameDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n              Designation\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Designation\"\n                  required\n                  value={this.state.DesignationData}\n                  onChange={value => this.onDesignationDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n              FromDate\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"date\"\n                  required\n                  value={this.state.FromDateData}\n                  onChange={value => this.onFromDateDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n              ToDate\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"date\"\n                  required\n                  value={this.state.ToDateData}\n                  onChange={value => this.onToDateDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} id=\"form-submit-button\">\n              <Col sm={{ span: 10, offset: 2 }}>\n                <Button type=\"submit\">Update</Button>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} id=\"form-cancel-button\">\n              <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                <Button type=\"reset\" onClick={this.props.onFormEditClose}>\n                  cancel\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WorkExperienceForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpWorkExp\\WorkExperienceForm.jsx",["1248"],"// import React, { Component } from \"react\";\n// import \"./WorkExperienceForm.css\";\n// import { Form, Button, Col, Row } from \"react-bootstrap\";\n// import axios from \"axios\";\n\n// class WorkExperienceForm extends Component {\n//   state = {};\n//   componentWillMount() {}\n//   render() {\n//     return (\n//       <div>\n//         <h2 id=\"role-form-title\">Add WorkExperience Details</h2>\n//         <div id=\"role-form-outer-div\">\n//           <Form id=\"form\" onSubmit={this.props.onWorkExperienceSubmit}>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//                 Company Name\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control type=\"Text\" placeholder=\"CompanyName\" required />\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//                 Designation\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control type=\"Text\" placeholder=\"Designation\" required />\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//                 FromDate\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control type=\"date\" required />\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row}>\n//               <Form.Label column sm={2}>\n//                 ToDate\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control type=\"date\" placeholder=\"ToDate\" required />\n//               </Col>\n//             </Form.Group>\n\n//             <Form.Group as={Row} id=\"form-submit-button\">\n//               <Col sm={{ span: 10, offset: 2 }}>\n//                 <Button type=\"submit\">Submit</Button>\n//               </Col>\n//             </Form.Group>\n//             <Form.Group as={Row} id=\"form-cancel-button\">\n//               <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n//                 <Button type=\"reset\" onClick={this.props.onFormClose}>\n//                   cancel\n//                 </Button>\n//               </Col>\n//             </Form.Group>\n//           </Form>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default WorkExperienceForm;\n\nimport React from \"react\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport \"./WorkExperienceForm.css\";\n\nconst WorkExperienceForm = (props) => {\n  return (\n    <div>\n      <h2 id=\"role-form-title\">Add WorkExperience Details</h2>\n      <div id=\"role-form-outer-div\">\n        <Form id=\"form\" onSubmit={props.onWorkExperienceSubmit}>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Company Name\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control type=\"Text\" placeholder=\"CompanyName\" required />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Designation\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control type=\"Text\" placeholder=\"Designation\" required />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              FromDate\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control type=\"date\" required />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              ToDate\n            </Form.Label>\n            <Col sm={10} className=\"form-input\">\n              <Form.Control type=\"date\" placeholder=\"ToDate\" required />\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row} id=\"form-submit-button\">\n            <Col sm={{ span: 10, offset: 2 }}>\n              <Button type=\"submit\">Submit</Button>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} id=\"form-cancel-button\">\n            <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n              <Button type=\"reset\" onClick={props.onFormClose}>\n                cancel\n              </Button>\n            </Col>\n          </Form.Group>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkExperienceForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\EmpWorkExp\\WorkExperienceTable.jsx",["1249","1250","1251","1252","1253","1254"],"// import React, { Component } from \"react\";\n// import \"./WorkExperienceTable.css\";\n// import axios from \"axios\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\n// import { RingLoader } from \"react-spinners\";\n// import { css } from \"@emotion/core\";\n// import { Button } from \"react-bootstrap\";\n// import { Link } from \"react-router-dom\";\n\n// import { AgGridReact } from \"ag-grid-react\";\n// import \"ag-grid-community/dist/styles/ag-grid.css\";\n// import \"ag-grid-community/dist/styles/ag-theme-balham.css\";\n\n// const override = css`\n//   display: block;\n//   margin: 0 auto;\n//   margin-top: 45px;\n//   border-color: red;\n// `;\n\n// class WorkExperienceTable extends Component {\n//   state = {\n//     workExperienceData: [],\n//     loading: true,\n\n//     rowData: []\n//   };\n//   workExperienceObj = [];\n//   rowDataT = [];\n\n//   loadWorkExperienceData = () => {\n//     axios\n//       .get(\n//         \"http://localhost:4000/api/work-experience/\" + this.props.data[\"_id\"],\n//         {\n//           headers: {\n//             authorization: localStorage.getItem(\"token\") || \"\"\n//           }\n//         }\n//       )\n//       .then((response) => {\n//         this.workExperienceObj = response.data;\n//         console.log(\"response\", response.data);\n//         this.setState({ workExperienceData: response.data });\n//         this.setState({ loading: false });\n//         this.rowDataT = [];\n//         // let data=this.educationObj.education[\"0\"];\n//         this.workExperienceObj.workExperience.map((data) => {\n//           let temp = {\n//             data,\n//             CompanyName: data[\"CompanyName\"],\n//             Designation: data[\"Designation\"],\n//             FromDate: data[\"FromDate\"].slice(0, 10),\n//             ToDate: data[\"ToDate\"].slice(0, 10)\n//           };\n\n//           this.rowDataT.push(temp);\n//         });\n//         this.setState({ rowData: this.rowDataT });\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n//   };\n\n//   onWorkExperienceDelete = (e1, e2) => {\n//     console.log(e1, e2);\n//     if (window.confirm(\"Are you sure to delete this record? \") == true) {\n//       axios\n//         .delete(\"http://localhost:4000/api/work-experience/\" + e1 + \"/\" + e2, {\n//           headers: {\n//             authorization: localStorage.getItem(\"token\") || \"\"\n//           }\n//         })\n//         .then((res) => {\n//           this.componentDidMount();\n//         })\n//         .catch((err) => {\n//           console.log(err);\n//         });\n//     }\n//   };\n//   componentDidMount() {\n//     this.loadWorkExperienceData();\n//   }\n//   renderButton(params) {\n//     console.log(params);\n//     if (this.props.back) {\n//       return <React.Fragment />;\n//     }\n//     return (\n//       <FontAwesomeIcon\n//         icon={faTrash}\n//         onClick={() =>\n//           this.onWorkExperienceDelete(\n//             this.props.data[\"_id\"],\n//             params.data.data[\"_id\"]\n//           )\n//         }\n//       />\n//     );\n//   }\n//   renderEditButton(params) {\n//     console.log(params);\n//     if (this.props.back) {\n//       return <React.Fragment />;\n//     }\n//     return (\n//       <FontAwesomeIcon\n//         icon={faEdit}\n//         onClick={() => this.props.onEditWorkExperience(params.data.data)}\n//       />\n//     );\n//   }\n\n//   render() {\n//     return (\n//       <div id=\"table-outer-div-scroll\">\n//         <h2 id=\"role-title\">\n//           Employee Work Experience Details{\" \"}\n//           {this.props.back\n//             ? \"of \" +\n//               this.props.data[\"FirstName\"] +\n//               \" \" +\n//               this.props.data[\"LastName\"]\n//             : \"\"}\n//         </h2>\n\n//         {this.props.back ? (\n//           <Link to=\"/hr/employee\">\n//             <Button variant=\"primary\" id=\"add-button\">\n//               Back\n//             </Button>\n//           </Link>\n//         ) : (\n//           <Button\n//             variant=\"primary\"\n//             id=\"add-button\"\n//             onClick={this.props.onAddWorkExperience}\n//           >\n//             <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n//             Add\n//           </Button>\n//         )}\n\n//         <div id=\"clear-both\" />\n\n//         {!this.state.loading ? (\n//           <div\n//             id=\"table-div\"\n//             className=\"ag-theme-balham\"\n//             //   style={\n//             //     {\n//             //     height: \"500px\",\n//             //     width: \"100%\"\n//             //   }\n//             // }\n//           >\n//             <AgGridReact\n//               columnDefs={this.state.columnDefs}\n//               defaultColDef={this.state.defaultColDef}\n//               columnTypes={this.state.columnTypes}\n//               rowData={this.state.rowData}\n//               // floatingFilter={true}\n//               // onGridReady={this.onGridReady}\n//               pagination={true}\n//               paginationPageSize={10}\n//               getRowHeight={this.state.getRowHeight}\n//             />\n//           </div>\n//         ) : (\n//           <div id=\"loading-bar\">\n//             <RingLoader\n//               css={override}\n//               sizeUnit={\"px\"}\n//               size={50}\n//               color={\"#0000ff\"}\n//               loading={true}\n//             />\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default WorkExperienceTable;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { FaRegEdit } from \"react-icons/fa\";\nimport \"./WorkExperienceTable.css\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nconst WorkExperienceTable = (props) => {\n  const [workExperienceData, setWorkExperienceData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [rowData, setRowData] = useState([]);\n\n  // Removed const from here\n  let workExperienceObj = [];\n  let rowDataT = [];\n\n  const loadWorkExperienceData = () => {\n    axios\n      .get(\"http://localhost:4000/api/work-experience/\" + props.data[\"_id\"], {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        workExperienceObj = response.data;\n        console.log(\"response\", response.data);\n        setWorkExperienceData(response.data);\n        setLoading(false);\n        rowDataT.length = 0;\n        workExperienceObj.workExperience.map((data) => {\n          let temp = {\n            data,\n            CompanyName: data[\"CompanyName\"],\n            Designation: data[\"Designation\"],\n            FromDate: data[\"FromDate\"].slice(0, 10),\n            ToDate: data[\"ToDate\"].slice(0, 10)\n          };\n\n          rowDataT.push(temp);\n        });\n        setRowData(rowDataT);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const onWorkExperienceDelete = (e1, e2) => {\n    console.log(e1, e2);\n    if (window.confirm(\"Are you sure to delete this record? \") === true) {\n      axios\n        .delete(\"http://localhost:4000/api/work-experience/\" + e1 + \"/\" + e2, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then((res) => {\n          loadWorkExperienceData();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  useEffect(() => {\n    loadWorkExperienceData();\n  }, []);\n\n  // Corrected function declaration\n  const renderButton = (params) => {\n    console.log(params);\n    if (props.back) {\n      return <React.Fragment />;\n    }\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() =>\n          onWorkExperienceDelete(props.data[\"_id\"], params.data.data[\"_id\"])\n        }\n      />\n    );\n  };\n\n  // Corrected function declaration\n  const renderEditButton = (params) => {\n    console.log(params);\n    if (props.back) {\n      return <React.Fragment />;\n    }\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => props.onEditWorkExperience(params.data.data)}\n      />\n    );\n  };\n\n  return (\n    <div id=\"table-outer-div-scroll\">\n      <h2 id=\"role-title\">\n        Employee Work Experience Details{\" \"}\n        {props.back\n          ? \"of \" + props.data[\"FirstName\"] + \" \" + props.data[\"LastName\"]\n          : \"\"}\n      </h2>\n\n      {props.back ? (\n        <Link to=\"/hr/employee\">\n          <Button variant=\"primary\" id=\"add-button\">\n            Back\n          </Button>\n        </Link>\n      ) : (\n        <Button\n          variant=\"primary\"\n          id=\"add-button\"\n          onClick={props.onAddWorkExperience}\n        >\n          <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n          Add\n        </Button>\n      )}\n\n      <div id=\"clear-both\" />\n\n      {!loading ? (\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th\n                style={{\n                  background: \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                  color: \"white\"\n                }}\n              >\n                Company Name\n              </th>\n              <th\n                style={{\n                  background: \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                  color: \"white\"\n                }}\n              >\n                Designation\n              </th>\n              <th\n                style={{\n                  background: \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                  color: \"white\"\n                }}\n              >\n                FromDate\n              </th>\n              <th\n                style={{\n                  background: \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                  color: \"white\"\n                }}\n              >\n                ToDate\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {rowData.map((items, index) => (\n              <tr key={index}>\n                <td className=\"text-uppercase\">{items.CompanyName}</td>\n                <td className=\"text-uppercase\">{items.Designation}</td>\n                <td className=\"text-uppercase\">{items.FromDate}</td>\n                <td className=\"text-uppercase\">{items.ToDate}</td>\n                {/* <td>\n                  {\" \"}\n                  <button\n                    onClick={() => props.onEditWorkExperience(items.data)}\n                    style={{\n                      zIndex: \"1\",\n                      cursor: \"pointer\"\n                    }}\n                    className=\"btn\"\n                  >\n                    <FaRegEdit className=\"fs-4 text-primary bg-white p-1 rounded-5\" />\n                  </button>\n                </td> */}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <div id=\"loading-bar\">\n          <RingLoader\n            css={override}\n            sizeUnit={\"px\"}\n            size={50}\n            color={\"#0000ff\"}\n            loading={true}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WorkExperienceTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Company\\CompanyFormEdit.jsx",["1255","1256"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\nimport \"./CompanyFormEdit.css\";\n\nclass CompanyFormEdit extends Component {\n  state = {\n    status: \"\",\n    countryData: [],\n    stateData: [],\n    cityData: [],\n    filteredCountryData: [],\n    filteredStateData: [],\n    filteredCityData: [],\n\n    CompanyNameData: this.props.editData[\"CompanyName\"],\n    AddressData: this.props.editData[\"Address\"],\n    PostalCodeData: this.props.editData[\"PostalCode\"],\n    WebsiteData: this.props.editData[\"Website\"],\n    EmailData: this.props.editData[\"Email\"],\n    ContactPersonData: this.props.editData[\"ContactPerson\"],\n    ContactNoData: this.props.editData[\"ContactNo\"],\n    FaxNoData: this.props.editData[\"FaxNo\"],\n    PanNoData: this.props.editData[\"PanNo\"],\n    GSTNoData: this.props.editData[\"GSTNo\"],\n    CINNoData: this.props.editData[\"CINNo\"]\n  };\n  onCompanyNameDataChange(e) {\n    this.setState({ CompanyNameData: e.target.value });\n  }\n  onAddressDataChange(e) {\n    this.setState({ AddressData: e.target.value });\n  }\n  onPostalCodeDataChange(e) {\n    this.setState({ PostalCodeData: e.target.value });\n  }\n  onWebsiteDataChange(e) {\n    this.setState({ WebsiteData: e.target.value });\n  }\n  onEmailDataChange(e) {\n    this.setState({ EmailData: e.target.value });\n  }\n  onContactPersonDataChange(e) {\n    this.setState({ ContactPersonData: e.target.value });\n  }\n  onContactNoDataChange(e) {\n    this.setState({ ContactNoData: e.target.value });\n  }\n  onFaxNoDataChange(e) {\n    this.setState({ FaxNoData: e.target.value });\n  }\n  onPanNoDataChange(e) {\n    this.setState({ PanNoData: e.target.value });\n  }\n  onGSTNoDataChange(e) {\n    this.setState({ GSTNoData: e.target.value });\n  }\n  onCINNoDataChange(e) {\n    this.setState({ CINNoData: e.target.value });\n  }\n\n  loadCountryInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/country\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        this.setState({ countryData: response.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  loadStateInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/state\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        this.setState({ stateData: response.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  loadCityInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/city\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        this.setState({ cityData: response.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  componentWillMount() {\n    this.loadCountryInfo();\n    this.loadStateInfo();\n    this.loadCityInfo();\n  }\n  onCountryChange(e) {\n    console.log(e.target.value);\n    let currentCountry = e.target.value;\n\n    let filteredState = this.state.stateData.filter(\n      (data) => data[\"country\"][0][\"_id\"] == currentCountry\n    );\n    this.setState({ filteredStateData: filteredState });\n  }\n  onStateChange(e) {\n    console.log(e.target.value);\n    let currentState = e.target.value;\n    let filteredCity = this.state.cityData.filter(\n      (data) => data[\"state\"][0][\"_id\"] == currentState\n    );\n    this.setState({ filteredCityData: filteredCity });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <h2 id=\"role-form-title\">Edit Project Bid Details</h2>\n        <div id=\"role-form-outer-div\">\n          <Form\n            id=\"form\"\n            onSubmit={(e) =>\n              this.props.onCompanyEditUpdate(this.props.editData, e)\n            }\n          >\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Company Name\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Company Name\"\n                  name=\"CompanyName\"\n                  value={this.state.CompanyNameData}\n                  onChange={(value) => this.onCompanyNameDataChange(value)}\n                  required\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Address\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"3\"\n                  plassholder=\"address\"\n                  required\n                  value={this.state.AddressData}\n                  onChange={(value) => this.onAddressDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Country\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  as=\"select\"\n                  name=\"country\"\n                  onChange={this.onCountryChange.bind(this)}\n                >\n                  <option value=\"\" disabled selected>\n                    Select your option\n                  </option>\n                  {this.state.countryData.map((data, index) => (\n                    <option key={index} value={data[\"_id\"]}>\n                      {data[\"CountryName\"]}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                State\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  as=\"select\"\n                  name=\"state\"\n                  required\n                  onChange={this.onStateChange.bind(this)}\n                >\n                  <option value=\"\" disabled selected>\n                    Select your option\n                  </option>\n                  {this.state.filteredStateData.map((data, index) => (\n                    <option key={index} value={data[\"_id\"]}>\n                      {data[\"StateName\"]}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                City\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" name=\"state\" required>\n                  <option value=\"\" disabled selected>\n                    Select your option\n                  </option>\n                  {this.state.filteredCityData.map((data, index) => (\n                    <option key={index} value={data[\"_id\"]}>\n                      {data[\"CityName\"]}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                PostalCode\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"number\"\n                  placeholder=\"PostalCode\"\n                  required\n                  value={this.state.PostalCodeData}\n                  onChange={(value) => this.onPostalCodeDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Website\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Website\"\n                  required\n                  value={this.state.WebsiteData}\n                  onChange={(value) => this.onWebsiteDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Email\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  required\n                  value={this.state.EmailData}\n                  onChange={(value) => this.onEmailDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Contact Person\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Contact Person\"\n                  required\n                  value={this.state.ContactPersonData}\n                  onChange={(value) => this.onContactPersonDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Contact No\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Contact No\"\n                  required\n                  value={this.state.ContactNoData}\n                  onChange={(value) => this.onContactNoDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                FaxNo\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"FaxNo\"\n                  required\n                  value={this.state.FaxNoData}\n                  onChange={(value) => this.onFaxNoDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                PanCard No\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\" PanCard No  \"\n                  required\n                  value={this.state.PanNoData}\n                  onChange={(value) => this.onPanNoDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                GSTNo\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"GSTNo\"\n                  required\n                  value={this.state.GSTNoData}\n                  onChange={(value) => this.onGSTNoDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                CINNo\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"CINNo\"\n                  required\n                  value={this.state.CINNoData}\n                  onChange={(value) => this.onCINNoDataChange(value)}\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} id=\"form-submit-button\">\n              <Col sm={{ span: 10, offset: 2 }}>\n                <Button type=\"submit\">Submit</Button>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} id=\"form-cancel-button\">\n              <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                <Button type=\"reset\" onClick={this.props.onFormEditClose}>\n                  cancel\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CompanyFormEdit;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Company\\CompanyForm.jsx",["1257","1258"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./CompanyForm.css\";\n\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\n\nclass CompanyForm extends Component {\n  state = {\n    countryData: [],\n    stateData: [],\n    cityData: [],\n    filteredCountryData: [],\n    filteredStateData: [],\n    filteredCityData: [],\n  }\n\n  loadCountryInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/country\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then(response => {\n        this.setState({ countryData: response.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  loadStateInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/state\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then(response => {\n        this.setState({ stateData: response.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  loadCityInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/city\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then(response => {\n        this.setState({ cityData: response.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  componentWillMount() {\n    this.loadCountryInfo();\n    this.loadStateInfo();\n    this.loadCityInfo();\n  }\n  onCountryChange(e) {\n    console.log(e.target.value);\n    let currentCountry = e.target.value;\n\n    let filteredState = this.state.stateData.filter(\n      data => data[\"country\"][0][\"_id\"] == currentCountry\n    );\n    this.setState({ filteredStateData: filteredState });\n\n  }\n  onStateChange(e) {\n    console.log(e.target.value);\n    let currentState = e.target.value;\n\n    let filteredCity = this.state.cityData.filter(\n      data => data[\"state\"][0][\"_id\"] == currentState\n    );\n    this.setState({ filteredCityData: filteredCity });\n\n  }\n  render() {\n    return (\n      <div>\n        <h2 id=\"role-form-title\">Add Company Details</h2>\n        <div id=\"role-form-outer-div\">\n          <Form id=\"form\" onSubmit={this.props.onCompanySubmit}>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Company Name\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Company Name\"\n                  name=\"CompanyName\"\n                  required\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Address\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"3\"\n                  plassholder=\"address\"\n                  required\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Country\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  as=\"select\"\n                  name=\"country\"\n                  onChange={this.onCountryChange.bind(this)}\n                >\n                  <option disabled selected>\n                    Select your option\n                  </option>\n                  {this.state.countryData.map((data, index) => (\n                    <option key={index} value={data[\"_id\"]}>{data[\"CountryName\"]}</option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                State\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  as=\"select\"\n                  name=\"state\"\n                  required\n                  onChange={this.onStateChange.bind(this)}\n                >\n                  <option value=\"\" disabled selected>\n                    Select your option\n                  </option>\n                  {this.state.filteredStateData.map((data, index) => (\n                    <option key={index} value={data[\"_id\"]}>{data[\"StateName\"]}</option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                City\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" name=\"state\" required>\n                  <option value=\"\" disabled selected>\n                    Select your option\n                  </option>\n                  {this.state.filteredCityData.map((data, index) => (\n                    <option key={index} value={data[\"_id\"]}>{data[\"CityName\"]}</option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                PostalCode\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control type=\"number\" placeholder=\"PostalCode\" required />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Website\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control type=\"Text\" placeholder=\"Website\" required />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Email\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control type=\"email\" placeholder=\"Email\" required />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Contact Person\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Contact Person\"\n                  required\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Contact No\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control type=\"Text\" placeholder=\"Contact No\" required />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                FaxNo\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control type=\"Text\" placeholder=\"FaxNo\" required />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                PanCard No\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\" PanCard No  \"\n                  required\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                GSTNo\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control type=\"Text\" placeholder=\"GSTNo\" required />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                CINNo\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control type=\"Text\" placeholder=\"CINNo\" required />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} id=\"form-submit-button\">\n              <Col sm={{ span: 10, offset: 2 }}>\n                <Button type=\"submit\">Submit</Button>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} id=\"form-cancel-button\">\n              <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                <Button type=\"reset\" onClick={this.props.onFormClose}>\n                  cancel\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </div>\n\n        {/* </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default CompanyForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Company\\CompanyTable.jsx",["1259","1260"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport { Button } from \"react-bootstrap\";\n// import \"./AdminCompanyTable.css\";\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\nclass AdminCompanyTable extends Component {\n  state = {\n    companyData: [],\n    loading: true,\n    rowData: []\n  };\n  companyObj = [];\n  rowDataT = [];\n\n  loadCompanyData = () => {\n    axios\n      .get(\"http://localhost:4000/api/company\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        this.companyObj = response.data;\n        console.log(\"response\", response.data);\n        this.setState({ companyData: response.data });\n        this.setState({ loading: false });\n\n        this.rowDataT = [];\n\n        this.companyObj.map((data) => {\n          let temp = {\n            data,\n            CompanyName: data[\"CompanyName\"],\n            Address: data[\"Address\"],\n            CountryName:\n              data[\"city\"][0][\"state\"][0][\"country\"][0][\"CountryName\"],\n            StateName: data[\"city\"][0][\"state\"][0][\"StateName\"],\n            CityName: data[\"city\"][0][\"CityName\"],\n            PostalCode: data[\"PostalCode\"],\n            Website: data[\"Website\"],\n            Email: data[\"Email\"],\n            ContactPerson: data[\"ContactPerson\"],\n            ContactNo: data[\"ContactNo\"],\n            FaxNo: data[\"FaxNo\"],\n            PanNo: data[\"PanNo\"],\n            GSTNo: data[\"GSTNo\"],\n            CINNo: data[\"CINNo\"]\n          };\n\n          this.rowDataT.push(temp);\n        });\n        this.setState({ rowData: this.rowDataT });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  onCompanyDelete = (e) => {\n    console.log(e);\n    if (window.confirm(\"Are you sure to delete this record? \") == true) {\n      axios\n        .delete(\"http://localhost:4000/api/company/\" + e, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then((res) => {\n          this.componentDidMount();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n  componentDidMount() {\n    this.loadCompanyData();\n  }\n\n  renderButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() => this.onCompanyDelete(params.data.data[\"_id\"])}\n      />\n    );\n  }\n  renderEditButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => this.props.onEditCompany(params.data.data)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"p-4\">\n        <div className=\"d-flex justify-between aline-items-start mb-3\">\n          <div className=\" my-auto\">\n            <h3 className=\"fw-bold text-muted\">Company Details</h3>\n            <p>\n              You can create new company and view all compnay details here !\n            </p>\n          </div>\n\n          <Button\n            variant=\"primary\"\n            className=\"my-auto\"\n            id=\"add-button\"\n            onClick={this.props.onAddCompany}\n          >\n            <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n            Add new Company\n          </Button>\n        </div>\n\n        <div id=\"clear-both\" />\n\n        {!this.state.loading ? (\n          <div style={{ maxWidth: \"100%\", overflowX: \"auto\" }}>\n            <table className=\"table table-striped\">\n              <thead>\n                <tr>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#700B97, #C84B31)\",\n                      color: \"white\",\n                      whiteSpace: \"pre\"\n                    }}\n                  >\n                    Company Name\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#700B97, #C84B31)\",\n                      color: \"white\",\n                      whiteSpace: \"pre\"\n                    }}\n                  >\n                    Address\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#700B97, #C84B31)\",\n                      color: \"white\",\n                      whiteSpace: \"pre\"\n                    }}\n                  >\n                    Country\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#700B97, #C84B31)\",\n                      color: \"white\",\n                      whiteSpace: \"pre\"\n                    }}\n                  >\n                    State\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#700B97, #C84B31)\",\n                      color: \"white\",\n                      whiteSpace: \"pre\"\n                    }}\n                  >\n                    City\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#700B97, #C84B31)\",\n                      color: \"white\",\n                      whiteSpace: \"pre\"\n                    }}\n                  >\n                    Postal Code\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#700B97, #C84B31)\",\n                      color: \"white\",\n                      whiteSpace: \"pre\"\n                    }}\n                  >\n                    Website\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#700B97, #C84B31)\",\n                      color: \"white\",\n                      whiteSpace: \"pre\"\n                    }}\n                  >\n                    Email\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#700B97, #C84B31)\",\n                      color: \"white\",\n                      whiteSpace: \"pre\"\n                    }}\n                  >\n                    ContactPerson\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#700B97, #C84B31)\",\n                      color: \"white\",\n                      whiteSpace: \"pre\"\n                    }}\n                  >\n                    ContactNo\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#700B97, #C84B31)\",\n                      color: \"white\",\n                      whiteSpace: \"pre\"\n                    }}\n                  >\n                    FaxNo\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#700B97, #C84B31)\",\n                      color: \"white\",\n                      whiteSpace: \"pre\"\n                    }}\n                  >\n                    PanNo\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#700B97, #C84B31)\",\n                      color: \"white\",\n                      whiteSpace: \"pre\"\n                    }}\n                  >\n                    GST No\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#700B97, #C84B31)\",\n                      color: \"white\",\n                      whiteSpace: \"pre\"\n                    }}\n                  >\n                    CIN No\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.companyObj.map((items, index) => (\n                  <tr style={{ overflowX: \"auto\" }} key={index}>\n                    <td className=\"text-uppercase\">{items.CompanyName}</td>\n                    <td>{items.Address}</td>\n                    <td className=\"text-uppercase\">\n                      {items.city[0].state[0].country[0].CountryName}\n                    </td>\n                    <td className=\"text-uppercase\">\n                      {items.city[0].state[0].StateName}\n                    </td>\n                    <td className=\"text-uppercase\">{items.city[0].CityName}</td>\n                    <td>{items.PostalCode}</td>\n                    <td>{items.Website}</td>\n                    <td>{items.Email}</td>\n                    <td>{items.ContactPerson}</td>\n                    <td>{items.ContactNo}</td>\n                    <td>{items.FaxNo}</td>\n                    <td>{items.PanNo}</td>\n                    <td>{items.GSTNo}</td>\n                    <td>{items.CINNo}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <div id=\"loading-bar\">\n            <RingLoader\n              css={override}\n              sizeUnit={\"px\"}\n              size={50}\n              color={\"#0000ff\"}\n              loading={true}\n            />\n          </div>\n        )}\n        {/*         \n        <div id=\"inner-table-div\">\n          <table id=\"role-table\">\n            <thead>\n              <tr>\n                <th width=\"6.667%\">Company Name</th>\n                <th width=\"6.667%\">Address</th>\n                <th width=\"6.667%\">Country</th>\n                <th width=\"6.667%\">State</th>\n                <th width=\"6.667%\">City</th>\n                <th width=\"6.667%\">Postal Code</th>\n                <th width=\"6.667%\">Website</th>\n                <th width=\"6.667%\">Email</th>\n                <th width=\"6.667%\">ContactPerson</th>\n                <th width=\"6.667%\">ContactNo</th>\n                <th width=\"6.667%\">FaxNo</th>\n                <th width=\"6.667%\">PanNo</th>\n                <th width=\"6.667%\">GST No</th>\n                <th width=\"6.667%\">CIN No</th>\n                <th width=\"3.33%\" />\n                <th width=\"3.33%\" />\n              </tr>\n            </thead>\n\n            {!this.state.loading ? (\n              <React.Fragment>\n                {this.companyObj.map((data, index) => (\n                  <tbody key={index}>\n                    <tr>\n                      <td>{data[\"CompanyName\"]}</td>\n                      <td>{data[\"Address\"]}</td>\n                      <td>\n                        {\n                          data[\"city\"][0][\"state\"][0][\"country\"][0][\n                            \"CountryName\"\n                          ]\n                        }\n                      </td>\n                      <td>{data[\"city\"][0][\"state\"][0][\"StateName\"]}</td>\n                      <td>{data[\"city\"][0][\"CityName\"]}</td>\n                      <td>{data[\"PostalCode\"]}</td>\n                      <td>{data[\"Website\"]}</td>\n                      <td>{data[\"Email\"]}</td>\n                      <td>{data[\"ContactPerson\"]}</td>\n                      <td>{data[\"ContactNo\"]}</td>\n                      <td>{data[\"FaxNo\"]}</td>\n                      <td>{data[\"PanNo\"]}</td>\n                      <td>{data[\"GSTNo\"]}</td>\n                      <td>{data[\"CINNo\"]}</td>\n                      <td>\n                        <FontAwesomeIcon\n                          icon={faEdit}\n                          onClick={() => this.props.onEditCompany(data)}\n                        />\n                      </td>\n                      <td>\n                        <FontAwesomeIcon\n                          icon={faTrash}\n                          onClick={() => this.onCompanyDelete(data[\"_id\"])}\n                        />\n                      </td>\n                    </tr>\n                  </tbody>\n                ))}\n                {console.log(\"final\", this.companyObj)}\n              </React.Fragment>\n            ) : (\n              <tbody>\n                <tr>\n                  <td />\n                  <td />\n                  <td />\n                  <td />\n                  <td />\n                  <td />\n                  <td>\n                    <div id=\"loading-bar\">\n                      <BarLoader\n                        css={override}\n                        sizeUnit={\"px\"}\n                        size={150}\n                        color={\"#0000ff\"}\n                        loading={true}\n                      />\n                    </div>\n                  </td>\n                  <td />\n                  <td />\n                  <td />\n                  <td />\n                  <td />\n                  <td />\n                  <td />\n\n                  <td />\n                  <td />\n                </tr>\n              </tbody>\n            )}\n          </table>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default AdminCompanyTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\StateFormEdit.jsx",["1261"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\n\nclass StateForm extends Component {\n  state = {\n    StateData: this.props.editData[\"StateName\"],\n    countryInfo: []\n  };\n  countryData = [];\n  loadCountryInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/country\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then(response => {\n        this.countryData = response.data;\n\n        this.setState({ portalsInfo: response.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  componentWillMount() {\n    this.loadCountryInfo();\n  }\n  onChange(e) {\n    this.setState({ StateData: e.target.value });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2 id=\"role-form-title\">Edit State Details</h2>\n\n        <div id=\"role-form-outer-div\">\n          <Form\n            id=\"form\"\n            onSubmit={e => this.props.onStateEditUpdate(this.props.editData, e)}\n          >\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Country\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" name=\"country\" required>\n                  <option value=\"\" disabled selected>\n                    Select your option\n                  </option>\n                  {this.countryData.map((data, index) => (\n                    <option\n                      value={data[\"_id\"]}\n                      selected={\n                        this.props.editData[\"country\"][0][\"_id\"] == data[\"_id\"]\n                      }\n                    >\n                      {data[\"CountryName\"]}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                State\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"State\"\n                  name=\"StateName\"\n                  required\n                  value={this.state.StateData}\n                  onChange={value => this.onChange(value)}\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} id=\"form-submit-button\">\n              <Col sm={{ span: 10, offset: 2 }}>\n                <Button type=\"submit\">Update</Button>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} id=\"form-cancel-button\">\n              <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                <Button type=\"reset\" onClick={this.props.onFormEditClose}>\n                  cancel\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StateForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\StateForm.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\StateTable.jsx",["1262","1263","1264"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./StateTable.css\";\n// import { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport { Button } from \"react-bootstrap\";\n\n// var FontAwesome = require('react-fontawesome');\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\nclass StateTable extends Component {\n  state = {\n    stateData: [],\n    loading: true,\n    rowData: []\n  };\n\n  // stateDataArray;\n  loadStateData = () => {\n    axios\n      .get(\"http://localhost:4000/api/state\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        // if(response.data.length==0){this.stateObj=[\"temp\"];}\n        // else{\n        this.stateObj = response.data;\n        // }\n        console.log(\"response\", response.data);\n        this.setState({ stateData: response.data });\n        this.setState({ loading: false });\n        this.rowDataT = [];\n\n        this.stateObj.map((data) => {\n          let temp = {\n            data,\n            CountryName: data[\"country\"][0][\"CountryName\"],\n            StateName: data[\"StateName\"]\n          };\n\n          this.rowDataT.push(temp);\n        });\n        this.setState({ rowData: this.rowDataT });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  onStateDelete = (e) => {\n    console.log(e);\n    // let body= \"ID=\" + e;\n    if (window.confirm(\"Are you sure to delete this record ? \") == true) {\n      axios\n        .delete(\"http://localhost:4000/api/state/\" + e, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then((res) => {\n          this.componentDidMount();\n        })\n        .catch((err) => {\n          console.log(err);\n          console.log(err.response);\n          if (err.response.status == 403) {\n            window.alert(err.response.data);\n          }\n        });\n    }\n  };\n\n  componentDidMount() {\n    this.loadStateData();\n  }\n  renderButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() => this.onStateDelete(params.data.data[\"_id\"])}\n      />\n    );\n  }\n  renderEditButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => this.props.onEditState(params.data.data)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"p-4\">\n        <div className=\"d-flex justify-between aline-items-start mb-3\">\n          <div className=\" my-auto\">\n            <h3 className=\"fw-bold text-muted\">State Details</h3>\n            <p>You can create new state and view all state details here !</p>\n          </div>\n\n          <Button\n            variant=\"primary\"\n            className=\"my-auto\"\n            id=\"add-button\"\n            onClick={this.props.onAddState}\n          >\n            <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n            Add new State\n          </Button>\n        </div>\n\n        <div id=\"clear-both\"></div>\n\n        {!this.state.loading ? (\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th\n                  style={{\n                    background:\n                      \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                    color: \"white\"\n                  }}\n                >\n                  Country\n                </th>\n                <th\n                  style={{\n                    background:\n                      \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                    color: \"white\"\n                  }}\n                >\n                  State\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.stateData.map((items, index) => (\n                <tr key={index}>\n                  <td className=\"text-uppercase\">\n                    {items.country[0].CountryName}\n                  </td>\n                  <td className=\"text-uppercase\">{items.StateName}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <div id=\"loading-bar\">\n            <RingLoader\n              css={override}\n              sizeUnit={\"px\"}\n              size={50}\n              color={\"#0000ff\"}\n              loading={true}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default StateTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\CountryFormEdit.jsx",["1265","1266","1267"],"import React, { Component } from \"react\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\n// import { Form,Button } from \"react-bootstrap\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\n\nclass CountryForm extends Component {\n  state = {\n    CountryData: this.props.editData[\"CountryName\"]\n  };\n  onChange(e) {\n    this.setState({ CountryData: e.target.value });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2 id=\"role-form-title\">Edit Country Details</h2>\n\n        <div id=\"role-form-outer-div\">\n          <Form\n            id=\"form\"\n            onSubmit={e =>\n              this.props.onCountryEditUpdate(\n                this.props.editData,\n                e\n                //   e.target[1].value\n              )\n            }\n          >\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Country\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Country\"\n                  name=\"CountryName\"\n                  required\n                  value={this.state.CountryData}\n                  onChange={value => this.onChange(value)}\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} id=\"form-submit-button\">\n              <Col sm={{ span: 10, offset: 2 }}>\n                <Button type=\"submit\">Update</Button>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} id=\"form-cancel-button\">\n              <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                <Button type=\"reset\" onClick={this.props.onFormEditClose}>\n                  cancel\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CountryForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\CountryForm.jsx",["1268","1269","1270"],"import React, { Component } from \"react\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\n// import Form from 'react-bootstrap/Form'\nimport \"./CountryForm.css\";\n\nclass CountryForm extends Component {\n  render() {\n    // let value=(this.props.pass) ? undefined : \"\";<i class=\"fas fa-plus\"></i>\n    return (\n      <div>\n        <h2 id=\"role-form-title\">Add Country Details</h2>\n\n        <div id=\"role-form-outer-div\">\n          <Form id=\"form\" onSubmit={this.props.onCountrySubmit}>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Country\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Country\"\n                  name=\"Country\"\n                  required\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} id=\"form-submit-button\">\n              <Col sm={{ span: 10, offset: 2 }}>\n                <Button type=\"submit\">Submit</Button>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} id=\"form-cancel-button\">\n              <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                <Button type=\"reset\" onClick={this.props.onFormClose}>\n                  cancel\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </div>\n\n        {/* </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default CountryForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Location\\CountryTable.jsx",["1271","1272","1273","1274","1275"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./CountryTable.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport { Button } from \"react-bootstrap\";\nimport { FaRegEdit } from \"react-icons/fa\";\n\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nclass CountryTable extends Component {\n  state = {\n    countryData: [],\n    loading: true,\n\n    columnDefs: [\n      {\n        headerName: \"Country\",\n        field: \"CountryName\",\n        sortable: true\n        // width: 150,\n        // filter: true ,\n      },\n\n      {\n        headerName: \"\",\n        field: \"edit\",\n        filter: false,\n        width: 30,\n        cellRendererFramework: this.renderEditButton.bind(this)\n      },\n      {\n        headerName: \"\",\n        field: \"delete\",\n        filter: false,\n        width: 30,\n        cellRendererFramework: this.renderButton.bind(this)\n      }\n    ],\n    rowData: [],\n    defaultColDef: {\n      resizable: true,\n      width: 1180,\n      filter: \"agTextColumnFilter\"\n      // filter: true ,\n    },\n    getRowHeight: function (params) {\n      return 35;\n    }\n  };\n  countryObj = [];\n  rowDataT = [];\n\n  // countryDataArray;\n  loadCountryData = () => {\n    axios\n      .get(\"http://localhost:4000/api/country\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        // if(response.data.length==0){this.countryObj=[\"temp\"];}\n        // else{\n        this.countryObj = response.data;\n        // }\n        console.log(\"response\", response.data);\n        this.setState({ countryData: response.data });\n        this.setState({ loading: false });\n        this.rowDataT = [];\n\n        this.countryObj.map((data) => {\n          let temp = {\n            data,\n            CountryName: data[\"CountryName\"]\n          };\n\n          this.rowDataT.push(temp);\n        });\n        this.setState({ rowData: this.rowDataT });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  onCountryDelete = (e) => {\n    console.log(e);\n    // let body= \"ID=\" + e;\n    if (window.confirm(\"Are you sure to delete this record ? \") == true) {\n      axios\n        .delete(\"http://localhost:4000/api/country/\" + e, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then((res) => {\n          // console.log(res);\n          this.componentDidMount();\n        })\n        .catch((err) => {\n          console.log(err.response);\n          if (err.response.status == 403) {\n            window.alert(err.response.data);\n          }\n        });\n    }\n  };\n\n  componentDidMount() {\n    this.loadCountryData();\n  }\n  renderButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() => this.onCountryDelete(params.data.data[\"_id\"])}\n      />\n    );\n  }\n  renderEditButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => this.props.onEditCountry(params.data.data)}\n      />\n    );\n  }\n\n  render() {\n    // let value=(this.props.pass) ? undefined : \"\";<i class=\"fas fa-plus\"></i>\n    return (\n      <div id=\"table-outer-div-scroll\">\n        <h2 id=\"role-title\">Country Details</h2>\n        {/* <Link to=\"/admin/role/form\"> */}\n        {/* <button id=\"add-button\" >\n          \n          Add\n        </button> */}\n        <Button\n          variant=\"primary\"\n          id=\"add-button\"\n          onClick={this.props.onAddCountry}\n        >\n          <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n          Add\n        </Button>\n        <div id=\"clear-both\" />\n        {!this.state.loading ? (\n          // <div\n          //   id=\"table-div\"\n          //   className=\"ag-theme-balham\"\n          // //   style={\n          // //     {\n          // //     height: \"500px\",\n          // //     width: \"100%\"\n          // //   }\n          // // }\n          // >\n          //   <AgGridReact\n          //     columnDefs={this.state.columnDefs}\n          //     defaultColDef={this.state.defaultColDef}\n          //     columnTypes={this.state.columnTypes}\n          //     rowData={this.state.rowData}\n          //     // floatingFilter={true}\n          //     // onGridReady={this.onGridReady}\n          //     pagination={true}\n          //     paginationPageSize={10}\n          //     getRowHeight={this.state.getRowHeight}\n          //   />\n          // </div>\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th\n                  style={{\n                    background:\n                      \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                    color: \"white\"\n                  }}\n                  className=\"py-1\"\n                >\n                  Country\n                </th>\n\n                {/* <th\n                  style={{\n                    background:\n                      \"linear-gradient(165deg, #700B97, 90%, #C84B31)\",\n                    color: \"white\"\n                  }}\n                  className=\"py-1\"\n                >\n                  Action\n                </th> */}\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.countryData.map((items, index) => (\n                <tr key={index}>\n                  <td>{items.CountryName}</td>\n\n                  {/* <td>\n                    <button\n                      onClick={() => this.props.onEditCountry(items.data)}\n                      style={{\n                        zIndex: \"1\",\n                        cursor: \"pointer\"\n                      }}\n                      className=\"btn\"\n                    >\n                      <FaRegEdit className=\"fs-4 text-primary bg-white p-1 rounded-5\" />\n                    </button>\n                  </td> */}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <div id=\"loading-bar\">\n            <RingLoader\n              css={override}\n              sizeUnit={\"px\"}\n              size={50}\n              color={\"#0000ff\"}\n              loading={true}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default CountryTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\AddEmployee\\EmployeeFormEdit.jsx",["1276","1277","1278","1279","1280","1281","1282","1283","1284","1285","1286","1287","1288","1289"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Form, Button, Col } from \"react-bootstrap\";\nimport \"./EmployeeFormEdit.css\";\n\nconst EmployeeFormEdit = (props) => {\n  const [roleData, setRoleData] = useState([]);\n  const [positionData, setPositionData] = useState([]);\n  const [departmentData, setDepartmentData] = useState([]);\n  const [genderData, setGenderData] = useState(props.editData[\"Gender\"]);\n  const [emailData, setEmailData] = useState(props.editData[\"Email\"]);\n  const [firstNameData, setFirstNameData] = useState(\n    props.editData[\"FirstName\"]\n  );\n  const [middleNameData, setMiddleNameData] = useState(\n    props.editData[\"MiddleName\"]\n  );\n  const [lastNameData, setLastNameData] = useState(props.editData[\"LastName\"]);\n  const [dobData, setDobData] = useState(props.editData[\"DOB\"].slice(0, 10));\n  const [contactNoData, setContactNoData] = useState(\n    props.editData[\"ContactNo\"]\n  );\n  const [profile, setProfile] = useState(props.editData[\"profile\"]);\n  const [employeeCodeData, setEmployeeCodeData] = useState(\n    props.editData[\"EmployeeCode\"]\n  );\n  const [dateOfJoiningData, setDateOfJoiningData] = useState(\n    props.editData[\"DateOfJoining\"].slice(0, 10)\n  );\n  // const [terminateDateData, setTerminateDateData] = useState(\n  //   props.editData[\"TerminateDate\"].slice(0, 10)\n  // );\n\n  useEffect(() => {\n    loadRoleInfo();\n    loadPositionInfo();\n    loadDepartmentInfo();\n  }, []);\n\n  const loadRoleInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/role\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        setRoleData(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const loadPositionInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/position\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        setPositionData(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const loadDepartmentInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/department\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        setDepartmentData(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const onEmailDataChange = (e) => {\n    setEmailData(e.target.value);\n  };\n\n  const onFirstNameDataChange = (e) => {\n    setFirstNameData(e.target.value);\n  };\n\n  const onMiddleNameDataChange = (e) => {\n    setMiddleNameData(e.target.value);\n  };\n\n  const onLastNameDataChange = (e) => {\n    setLastNameData(e.target.value);\n  };\n\n  const onContactNoDataChange = (e) => {\n    setContactNoData(e.target.value);\n  };\n\n  const onEmployeeCodeDataChange = (e) => {\n    setEmployeeCodeData(e.target.value);\n  };\n\n  const onGenderChange = (e) => {\n    setGenderData(e.target.value);\n    props.onGenderChange(e);\n  };\n\n  const onDOBDataChange = (e) => {\n    setDobData(e.target.value);\n  };\n\n  const onDateOfJoiningDataChange = (e) => {\n    setDateOfJoiningData(e.target.value);\n  };\n\n  const onProfileDataChange = (e) => {\n    setProfile(e.target.files[0]);\n  };\n\n  // const onTerminateDateDataChange = (e) => {\n  //   setTerminateDateData(e.target.value);\n  // };\n\n  const onFormSubmit = (e) => {\n    props.onEmployeeEditUpdate(props.editData, e);\n  };\n\n  const onFormClose = () => {\n    props.onFormEditClose();\n  };\n\n  return (\n    <React.Fragment\n      style={{ height: \"100vh\", width: \"100%\" }}\n      className=\"registration-page py-4\"\n    >\n      <h2\n        id=\"role-form-title\"\n        className=\"text-center text-black text-uppercase fw-bold my-4\"\n      >\n        Edit Employee Details\n      </h2>\n      <div id=\"role-form-outer-div\">\n        <Form\n          id=\"form\"\n          onSubmit={(e) => props.onEmployeeEditUpdate(props.editData, e)}\n        >\n          <div className=\"d-flex w-100 flex-column gap-2 rounded \">\n            <div className=\"row row-gap-3 \">\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  Email\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    required\n                    value={emailData}\n                    onChange={(value) => onEmailDataChange(value)}\n                  />\n                </Col>\n              </div>\n\n              {/* <div className=\"form-group col-12 col-md-6\">\n              <Form.Label column sm={6}>\n                Password\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  required\n                  value={passwordData}\n                  onChange={value => onPasswordDataChange(value)}\n                />\n              </Col>\n            </div> */}\n\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  Account access\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control as=\"select\" required>\n                    <option value=\"1\" selected={props.editData[\"Account\"] == 1}>\n                      Admin\n                    </option>\n                    <option value=\"2\" selected={props.editData[\"Account\"] == 2}>\n                      HR\n                    </option>\n                    <option value=\"3\" selected={props.editData[\"Account\"] == 3}>\n                      Employee\n                    </option>\n                    <option value=\"4\" selected={props.editData[\"Account\"] == 4}>\n                      Manager\n                    </option>\n                  </Form.Control>\n                </Col>\n              </div>\n\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  Role\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control as=\"select\" name=\"role\">\n                    <option disabled selected>\n                      Select your option\n                    </option>\n                    {roleData.map((data, index) => (\n                      <option\n                        key={index}\n                        value={data[\"_id\"]}\n                        selected={\n                          props.editData[\"role\"][0][\"_id\"] == data[\"_id\"]\n                        }\n                      >\n                        {data[\"RoleName\"]}\n                      </option>\n                    ))}\n                  </Form.Control>\n                </Col>\n              </div>\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label as=\"legend\" column sm={6}>\n                  Gender\n                </Form.Label>\n                <Col sm={10}>\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    label=\"Male\"\n                    value=\"male\"\n                    name=\"gender\"\n                    onChange={onGenderChange}\n                    checked={genderData == \"male\"}\n                    required\n                  />\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    label=\"Female\"\n                    value=\"female\"\n                    name=\"gender\"\n                    onChange={onGenderChange}\n                    checked={genderData == \"female\"}\n                    required\n                  />\n                </Col>\n              </div>\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  First Name\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"First Name\"\n                    required\n                    value={firstNameData}\n                    onChange={(value) => onFirstNameDataChange(value)}\n                  />\n                </Col>\n              </div>\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  Middle Name\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Middle Name\"\n                    required\n                    value={middleNameData}\n                    onChange={(value) => onMiddleNameDataChange(value)}\n                  />\n                </Col>\n              </div>\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  Last Name\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Last Name\"\n                    required\n                    value={lastNameData}\n                    onChange={(value) => onLastNameDataChange(value)}\n                  />\n                </Col>\n              </div>\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  DOB\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control\n                    type=\"date\"\n                    placeholder=\"DOB\"\n                    required\n                    //   value={this.props.editData[\"DOB\"].slice(0, 10)}\n                    value={dobData}\n                    onChange={(value) => onDOBDataChange(value)}\n                  />\n                </Col>\n              </div>\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  Contact No\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Contact No \"\n                    required\n                    value={contactNoData}\n                    onChange={(value) => onContactNoDataChange(value)}\n                  />\n                </Col>\n              </div>\n              {/* <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  Employee Code\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Employee Code\"\n                    required\n                    value={employeeCodeData}\n                    onChange={(value) => onEmployeeCodeDataChange(value)}\n                  />\n                </Col>\n              </div> */}\n\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  Department\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control as=\"select\" name=\"department\" required>\n                    <option value=\"\" disabled selected>\n                      Select your option\n                    </option>\n                    {departmentData.map((data, index) => (\n                      <option\n                        key={index}\n                        value={data[\"_id\"]}\n                        selected={\n                          props.editData[\"department\"][0][\"_id\"] == data[\"_id\"]\n                        }\n                      >\n                        {data[\"DepartmentName\"]}\n                      </option>\n                    ))}\n                  </Form.Control>\n                </Col>\n              </div>\n\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  Position\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control as=\"select\" name=\"position\" required>\n                    <option value=\"\" disabled selected>\n                      Select your option\n                    </option>\n                    {positionData.map((data, index) => (\n                      <option\n                        key={index}\n                        value={data[\"_id\"]}\n                        selected={\n                          props.editData[\"position\"][0][\"_id\"] == data[\"_id\"]\n                        }\n                      >\n                        {data[\"PositionName\"]}\n                      </option>\n                    ))}\n                  </Form.Control>\n                </Col>\n              </div>\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  Date Of Joining\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control\n                    type=\"date\"\n                    placeholder=\"Date Of Joining\"\n                    required\n                    // value={this.props.editData[\"DateOfJoining\"].slice(0, 10)}\n                    value={dateOfJoiningData}\n                    onChange={(value) => onDateOfJoiningDataChange(value)}\n                  />\n                </Col>\n              </div>\n\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Label column sm={6}>\n                  Profile Image\n                </Form.Label>\n                <Col sm={10} className=\"form-input\">\n                  <Form.Control\n                    type=\"file\"\n                    //  value={profile}\n                    //  onChange={(value) => onProfileDataChange(value)}\n                    // required\n                  />\n                </Col>\n              </div>\n              {/* <div className=\"form-group col-12 col-md-6\">\n          <Form.Label column sm={6}>\n            Terminate Date\n          </Form.Label>\n          <Col sm={10} className=\"form-input\">\n            <Form.Control\n              type=\"date\"\n              placeholder=\"Terminate Date\"\n              //   value={this.props.editData[\"TerminateDate\"].slice(0, 10)}\n              value={terminateDateData}\n              onChange={value => onTerminateDateDataChange(value)}\n            />\n          </Col>\n            </div> */}\n\n              <div\n                className=\"form-group col-12 col-md-6\"\n                id=\"form-submit-button\"\n              >\n                <Col sm={{ span: 10, offset: 2 }}>\n                  <Button type=\"submit\">Submit</Button>\n                </Col>\n              </div>\n              <div\n                className=\"form-group col-12 col-md-6\"\n                id=\"form-cancel-button\"\n              >\n                <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                  <Button type=\"reset\" onClick={onFormClose}>\n                    cancel\n                  </Button>\n                </Col>\n              </div>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default EmployeeFormEdit;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./EmployeeFormEdit.css\";\n// import axios from \"axios\";\n// import { Form, Button, Col, Row } from \"react-bootstrap\";\n\n// const EmployeeFormEdit = (props) => {\n//   const [roleData, setRoleData] = useState([]);\n//   const [positionData, setPositionData] = useState([]);\n//   const [departmentData, setDepartmentData] = useState([]);\n//   const [genderData, setGenderData] = useState(props.editData[\"Gender\"]);\n//   const [emailData, setEmailData] = useState(props.editData[\"Email\"]);\n//   const [firstNameData, setFirstNameData] = useState(\n//     props.editData[\"FirstName\"]\n//   );\n//   const [middleNameData, setMiddleNameData] = useState(\n//     props.editData[\"MiddleName\"]\n//   );\n//   const [lastNameData, setLastNameData] = useState(props.editData[\"LastName\"]);\n//   const [dobData, setDobData] = useState(props.editData[\"DOB\"].slice(0, 10));\n//   const [contactNoData, setContactNoData] = useState(\n//     props.editData[\"ContactNo\"]\n//   );\n//   // const [employeeCodeData, setEmployeeCodeData] = useState(\n//   //   props.editData[\"EmployeeCode\"]\n//   // );\n//   const [dateOfJoiningData, setDateOfJoiningData] = useState(\n//     props.editData[\"DateOfJoining\"].slice(0, 10)\n//   );\n//   // const [terminateDateData, setTerminateDateData] = useState(\n//   //   props.editData[\"TerminateDate\"].slice(0, 10)\n//   // );\n\n//   useEffect(() => {\n//     loadRoleInfo();\n//     loadPositionInfo();\n//     loadDepartmentInfo();\n//   }, []);\n\n//   const loadRoleInfo = () => {\n//     axios\n//       .get(\"http://localhost:4000/api/role\", {\n//         headers: {\n//           authorization: localStorage.getItem(\"token\") || \"\"\n//         }\n//       })\n//       .then((response) => {\n//         setRoleData(response.data);\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n//   };\n\n//   const loadPositionInfo = () => {\n//     axios\n//       .get(\"http://localhost:4000/api/position\", {\n//         headers: {\n//           authorization: localStorage.getItem(\"token\") || \"\"\n//         }\n//       })\n//       .then((response) => {\n//         setPositionData(response.data);\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n//   };\n\n//   const loadDepartmentInfo = () => {\n//     axios\n//       .get(\"http://localhost:4000/api/department\", {\n//         headers: {\n//           authorization: localStorage.getItem(\"token\") || \"\"\n//         }\n//       })\n//       .then((response) => {\n//         setDepartmentData(response.data);\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n//   };\n\n//   const onEmailDataChange = (e) => {\n//     setEmailData(e.target.value);\n//   };\n\n//   const onFirstNameDataChange = (e) => {\n//     setFirstNameData(e.target.value);\n//   };\n\n//   const onMiddleNameDataChange = (e) => {\n//     setMiddleNameData(e.target.value);\n//   };\n\n//   const onLastNameDataChange = (e) => {\n//     setLastNameData(e.target.value);\n//   };\n\n//   const onContactNoDataChange = (e) => {\n//     setContactNoData(e.target.value);\n//   };\n\n//   // const onEmployeeCodeDataChange = (e) => {\n//   //   setEmployeeCodeData(e.target.value);\n//   // };\n\n//   const onGenderChange = (e) => {\n//     setGenderData(e.target.value);\n//     props.onGenderChange(e);\n//   };\n\n//   const onDOBDataChange = (e) => {\n//     setDobData(e.target.value);\n//   };\n\n//   const onDateOfJoiningDataChange = (e) => {\n//     setDateOfJoiningData(e.target.value);\n//   };\n\n//   // const onTerminateDateDataChange = (e) => {\n//   //   setTerminateDateData(e.target.value);\n//   // };\n\n//   const onFormSubmit = (e) => {\n//     props.onEmployeeEditUpdate(props.editData, e);\n//   };\n\n//   const onFormClose = () => {\n//     props.onFormEditClose();\n//   };\n\n//   return (\n//     <React.Fragment\n//       style={{ height: \"100vh\", width: \"100%\" }}\n//       className=\"registration-page py-4\"\n//     >\n//       <h2\n//         id=\"role-form-title\"\n//         className=\"text-center text-black text-uppercase fw-bold my-4\"\n//       >\n//         Edit Employee Details\n//       </h2>\n//       <div id=\"role-form-outer-div\">\n//         <Form\n//           id=\"form\"\n//           onSubmit={(e) => props.onEmployeeEditUpdate(props.editData, e)}\n//         >\n//           <div className=\"d-flex w-100 flex-column gap-2 rounded \">\n//             <div className=\"row row-gap-3 \">\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Label column sm={6}>\n//                   Email\n//                 </Form.Label>\n//                 <Col sm={10} className=\"form-input\">\n//                   <Form.Control\n//                     type=\"email\"\n//                     placeholder=\"Email\"\n//                     required\n//                     value={emailData}\n//                     onChange={(value) => onEmailDataChange(value)}\n//                   />\n//                 </Col>\n//               </div>\n\n//               {/* <div className=\"form-group col-12 col-md-6\">\n//               <Form.Label column sm={6}>\n//                 Password\n//               </Form.Label>\n//               <Col sm={10} className=\"form-input\">\n//                 <Form.Control\n//                   type=\"password\"\n//                   placeholder=\"Password\"\n//                   required\n//                   value={passwordData}\n//                   onChange={value => onPasswordDataChange(value)}\n//                 />\n//               </Col>\n//             </div> */}\n\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Label column sm={6}>\n//                   Account access\n//                 </Form.Label>\n//                 <Col sm={10} className=\"form-input\">\n//                   <Form.Control as=\"select\" required>\n//                     <option value=\"1\" selected={props.editData[\"Account\"] == 1}>\n//                       Admin\n//                     </option>\n//                     <option value=\"2\" selected={props.editData[\"Account\"] == 2}>\n//                       HR\n//                     </option>\n//                     <option value=\"3\" selected={props.editData[\"Account\"] == 3}>\n//                       Employee\n//                     </option>\n//                   </Form.Control>\n//                 </Col>\n//               </div>\n\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Label column sm={6}>\n//                   Role\n//                 </Form.Label>\n//                 <Col sm={10} className=\"form-input\">\n//                   <Form.Control as=\"select\" name=\"role\">\n//                     <option disabled selected>\n//                       Select your option\n//                     </option>\n//                     {roleData.map((data, index) => (\n//                       <option\n//                         key={index}\n//                         value={data[\"_id\"]}\n//                         selected={\n//                           props.editData[\"role\"][0][\"_id\"] == data[\"_id\"]\n//                         }\n//                       >\n//                         {data[\"RoleName\"]}\n//                       </option>\n//                     ))}\n//                   </Form.Control>\n//                 </Col>\n//               </div>\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Label as=\"legend\" column sm={6}>\n//                   Gender\n//                 </Form.Label>\n//                 <Col sm={10}>\n//                   <Form.Check\n//                     inline\n//                     type=\"radio\"\n//                     label=\"Male\"\n//                     value=\"male\"\n//                     name=\"gender\"\n//                     onChange={onGenderChange}\n//                     checked={genderData == \"male\"}\n//                     required\n//                   />\n//                   <Form.Check\n//                     inline\n//                     type=\"radio\"\n//                     label=\"Female\"\n//                     value=\"female\"\n//                     name=\"gender\"\n//                     onChange={onGenderChange}\n//                     checked={genderData == \"female\"}\n//                     required\n//                   />\n//                 </Col>\n//               </div>\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Label column sm={6}>\n//                   First Name\n//                 </Form.Label>\n//                 <Col sm={10} className=\"form-input\">\n//                   <Form.Control\n//                     type=\"text\"\n//                     placeholder=\"First Name\"\n//                     required\n//                     value={firstNameData}\n//                     onChange={(value) => onFirstNameDataChange(value)}\n//                   />\n//                 </Col>\n//               </div>\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Label column sm={6}>\n//                   Middle Name\n//                 </Form.Label>\n//                 <Col sm={10} className=\"form-input\">\n//                   <Form.Control\n//                     type=\"text\"\n//                     placeholder=\"Middle Name\"\n//                     required\n//                     value={middleNameData}\n//                     onChange={(value) => onMiddleNameDataChange(value)}\n//                   />\n//                 </Col>\n//               </div>\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Label column sm={6}>\n//                   Last Name\n//                 </Form.Label>\n//                 <Col sm={10} className=\"form-input\">\n//                   <Form.Control\n//                     type=\"text\"\n//                     placeholder=\"Last Name\"\n//                     required\n//                     value={lastNameData}\n//                     onChange={(value) => onLastNameDataChange(value)}\n//                   />\n//                 </Col>\n//               </div>\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Label column sm={6}>\n//                   DOB\n//                 </Form.Label>\n//                 <Col sm={10} className=\"form-input\">\n//                   <Form.Control\n//                     type=\"date\"\n//                     placeholder=\"DOB\"\n//                     required\n//                     //   value={this.props.editData[\"DOB\"].slice(0, 10)}\n//                     value={dobData}\n//                     onChange={(value) => onDOBDataChange(value)}\n//                   />\n//                 </Col>\n//               </div>\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Label column sm={6}>\n//                   Contact No\n//                 </Form.Label>\n//                 <Col sm={10} className=\"form-input\">\n//                   <Form.Control\n//                     type=\"text\"\n//                     placeholder=\"Contact No \"\n//                     required\n//                     value={contactNoData}\n//                     onChange={(value) => onContactNoDataChange(value)}\n//                   />\n//                 </Col>\n//               </div>\n//               {/* <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Label column sm={6}>\n//                   Employee Code\n//                 </Form.Label>\n//                 <Col sm={10} className=\"form-input\">\n//                   <Form.Control\n//                     type=\"text\"\n//                     placeholder=\"Employee Code\"\n//                     required\n//                     value={employeeCodeData}\n//                     onChange={(value) => onEmployeeCodeDataChange(value)}\n//                   />\n//                 </Col>\n//               </div> */}\n\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Label column sm={6}>\n//                   Department\n//                 </Form.Label>\n//                 <Col sm={10} className=\"form-input\">\n//                   <Form.Control as=\"select\" name=\"department\" required>\n//                     <option value=\"\" disabled selected>\n//                       Select your option\n//                     </option>\n//                     {departmentData.map((data, index) => (\n//                       <option\n//                         key={index}\n//                         value={data[\"_id\"]}\n//                         selected={\n//                           props.editData[\"department\"][0][\"_id\"] == data[\"_id\"]\n//                         }\n//                       >\n//                         {data[\"DepartmentName\"]}\n//                       </option>\n//                     ))}\n//                   </Form.Control>\n//                 </Col>\n//               </div>\n\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Label column sm={6}>\n//                   Position\n//                 </Form.Label>\n//                 <Col sm={10} className=\"form-input\">\n//                   <Form.Control as=\"select\" name=\"position\" required>\n//                     <option value=\"\" disabled selected>\n//                       Select your option\n//                     </option>\n//                     {positionData.map((data, index) => (\n//                       <option\n//                         key={index}\n//                         value={data[\"_id\"]}\n//                         selected={\n//                           props.editData[\"position\"][0][\"_id\"] == data[\"_id\"]\n//                         }\n//                       >\n//                         {data[\"PositionName\"]}\n//                       </option>\n//                     ))}\n//                   </Form.Control>\n//                 </Col>\n//               </div>\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Label column sm={6}>\n//                   Date Of Joining\n//                 </Form.Label>\n//                 <Col sm={10} className=\"form-input\">\n//                   <Form.Control\n//                     type=\"date\"\n//                     placeholder=\"Date Of Joining\"\n//                     required\n//                     //   value={this.props.editData[\"DateOfJoining\"].slice(0, 10)}\n//                     value={dateOfJoiningData}\n//                     onChange={(value) => onDateOfJoiningDataChange(value)}\n//                   />\n//                 </Col>\n//               </div>\n//               {/* <div className=\"form-group col-12 col-md-6\">\n//           <Form.Label column sm={6}>\n//             Terminate Date\n//           </Form.Label>\n//           <Col sm={10} className=\"form-input\">\n//             <Form.Control\n//               type=\"date\"\n//               placeholder=\"Terminate Date\"\n//               //   value={this.props.editData[\"TerminateDate\"].slice(0, 10)}\n//               value={terminateDateData}\n//               onChange={value => onTerminateDateDataChange(value)}\n//             />\n//           </Col>\n//             </div> */}\n\n//               <div\n//                 className=\"form-group col-12 col-md-6\"\n//                 id=\"form-submit-button\"\n//               >\n//                 <Col sm={{ span: 10, offset: 2 }}>\n//                   <Button type=\"submit\">Submit</Button>\n//                 </Col>\n//               </div>\n//               <div\n//                 className=\"form-group col-12 col-md-6\"\n//                 id=\"form-cancel-button\"\n//               >\n//                 <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n//                   <Button type=\"reset\" onClick={onFormClose}>\n//                     cancel\n//                   </Button>\n//                 </Col>\n//               </div>\n//             </div>\n//           </div>\n//         </Form>\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n\n// export default EmployeeFormEdit;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\AddEmployee\\EmployeeInfo.jsx",["1290","1291","1292"],"import React, { Component } from \"react\";\nimport \"./EmployeeInfo.css\";\nimport { Button, Col } from \"react-bootstrap\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport \"./EmployeeInfo.css\";\n\nexport class EmployeeInfo extends Component {\n  render() {\n    return (\n      <div>\n        <div\n          onClick={\n            this.props.onBack\n            // console.log(\"back1\")\n          }\n        >\n          {\" \"}\n          <Button variant=\"primary\" id=\"add-button\">\n            Back\n          </Button>\n        </div>\n\n        <h2 id=\"role-title\">\n          Employee Information of{\" \"}\n          {this.props.data[\"FirstName\"] + \" \" + this.props.data[\"LastName\"]}\n        </h2>\n        <div id=\"outer-empingo-div\">\n          <Link to=\"/hr/employee/info/personal-info\">\n            <Button\n              variant=\"outline-primary\"\n              size=\"lg\"\n              block\n              className=\"empinfo-button\"\n            >\n              Personal Information\n            </Button>\n          </Link>\n          <Link to=\"/hr/employee/info/education\">\n            <Button\n              variant=\"outline-primary\"\n              size=\"lg\"\n              block\n              className=\"empinfo-button\"\n            >\n              Education\n            </Button>\n          </Link>\n          <Link to=\"/hr/employee/info/family-info\">\n            <Button\n              variant=\"outline-primary\"\n              size=\"lg\"\n              block\n              className=\"empinfo-button\"\n            >\n              Dependents\n            </Button>\n          </Link>\n          <Link to=\"/hr/employee/info/work-experience\">\n            <Button\n              variant=\"outline-primary\"\n              size=\"lg\"\n              block\n              className=\"empinfo-button\"\n            >\n              Work Experience\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EmployeeInfo;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\AddEmployee\\EmployeeForm.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Salary\\SalaryFormEdit.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Salary\\SalaryForm.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Salary\\SalaryTable.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\DepartmentFormEdit.jsx",["1293"],"import React, { Component } from \"react\";\n// import \"./DepartmentFormEdit.css\";\n// import { Form,Button } from \"react-bootstrap\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nclass DepartmentForm extends Component {\n  state = {\n    DepartmentData: this.props.editData[\"DepartmentName\"],\n    companyInfo: []\n  };\n  onChange(e) {\n    this.setState({ DepartmentData: e.target.value });\n  }\n  companyData = [];\n  loadCompanyInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/company\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        // if(response.data.length==0){this.roleObj=[\"temp\"];}\n        // else{\n\n        // }\n        this.companyData = response.data;\n\n        // this.portalsData=this.portalsData.filter((data)=>data[\"Status\"]==1);\n\n        this.setState({ companyInfo: response.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  componentWillMount() {\n    this.loadCompanyInfo();\n  }\n\n  render() {\n    // let value=(this.props.pass) ? undefined : \"\";<i class=\"fas fa-plus\"></i>\n    return (\n      <div>\n        <h2 id=\"role-form-title\">Edit Department Details</h2>\n\n        <div id=\"role-form-outer-div\">\n          <Form\n            id=\"form\"\n            onSubmit={(e) =>\n              this.props.onDepartmentEditUpdate(this.props.editData, e)\n            }\n          >\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Company\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" name=\"country\" required>\n                  <option value=\"\" disabled selected>\n                    Select your option\n                  </option>\n                  {this.companyData.map((data, index) => (\n                    <option\n                      value={data[\"_id\"]}\n                      selected={\n                        this.props.editData[\"company\"][0][\"_id\"] == data[\"_id\"]\n                      }\n                    >\n                      {data[\"CompanyName\"]}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Department\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Department\"\n                  name=\"DepartmentName\"\n                  required\n                  value={this.state.DepartmentData}\n                  onChange={(value) => this.onChange(value)}\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} id=\"form-submit-button\">\n              <Col sm={{ span: 10, offset: 2 }}>\n                <Button type=\"submit\">Update</Button>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} id=\"form-cancel-button\">\n              <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                <Button type=\"reset\" onClick={this.props.onFormEditClose}>\n                  cancel\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DepartmentForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\DepartmentForm.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\DepartmentTable.jsx",["1294","1295","1296","1297","1298"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./DepartmentTable.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport { Button } from \"react-bootstrap\";\n\nclass DepartmentTable extends Component {\n  state = {\n    departmentData: [],\n    loading: true\n  };\n  departmentObj = [];\n  rowDataT = [];\n\n  loadDepartmentData = () => {\n    axios\n      .get(\"http://localhost:4000/api/department\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        this.departmentObj = response.data;\n        console.log(\"response\", response.data);\n        this.setState({ departmentData: response.data });\n        this.setState({ loading: false });\n        this.rowDataT = [];\n\n        this.departmentObj.map((data) => {\n          let temp = {\n            data,\n            CompanyName: data[\"company\"][0][\"CompanyName\"],\n            DepartmentName: data[\"DepartmentName\"]\n          };\n\n          this.rowDataT.push(temp);\n        });\n        this.setState({ rowData: this.rowDataT });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  onDepartmentDelete = (e) => {\n    console.log(e);\n    if (window.confirm(\"Are you sure to delete this record ? \") == true) {\n      axios\n        .delete(\"http://localhost:4000/api/department/\" + e, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then((res) => {\n          this.componentDidMount();\n        })\n        .catch((err) => {\n          console.log(err);\n          console.log(err.response);\n          if (err.response.status == 403) {\n            window.alert(err.response.data);\n          }\n        });\n    }\n  };\n  componentDidMount() {\n    this.loadDepartmentData();\n  }\n\n  renderButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() => this.onDepartmentDelete(params.data.data[\"_id\"])}\n      />\n    );\n  }\n  renderEditButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => this.props.onEditDepartment(params.data.data)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"p-4\">\n        <div className=\"d-flex justify-between aline-items-start mb-3\">\n          <div className=\" my-auto\">\n            <h3 className=\"fw-bold text-muted\">Department Details</h3>\n            <p className=\"text-muted\">\n              You can create new department and view all department of the\n              companies here !\n            </p>\n          </div>\n\n          <Button\n            className=\"my-auto\"\n            variant=\"primary\"\n            id=\"add-button\"\n            onClick={this.props.onAddDepartment}\n          >\n            <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n            Add new department\n          </Button>\n        </div>\n        <table className=\"table table-striped\">\n          <thead>\n            <th\n              style={{\n                background: \"linear-gradient(#1D267D, #2F58CD)\",\n                color: \"white\"\n              }}\n            >\n              Company\n            </th>\n            <th\n              style={{\n                background: \"linear-gradient(#1D267D, #2F58CD)\",\n                color: \"white\"\n              }}\n            >\n              Department\n            </th>\n            <th\n              style={{\n                background: \"linear-gradient(#1D267D, #2F58CD)\",\n                color: \"white\"\n              }}\n              className=\"py-1 text-center\"\n            >\n              Action\n            </th>\n          </thead>\n\n          <tbody>\n            {this.state.departmentData.map((items, index) => (\n              <tr key={index}>\n                <td className=\"py-0\">{items[\"company\"][0][\"CompanyName\"]}</td>\n                <td className=\"py-0\">{items.DepartmentName}</td>\n                <td className=\"py-0\">\n                  <div className=\"d-flex gap-3 py-2\">\n                    <p\n                      style={{ cursor: \"pointer\" }}\n                      title=\"Update\"\n                      className=\"m-auto text-primary\"\n                    >\n                      <FontAwesomeIcon\n                        icon={faEdit}\n                        onClick={() => this.props.onEditDepartment(items)}\n                      />\n                    </p>\n                    <p\n                      style={{ cursor: \"pointer\" }}\n                      title=\"Delete\"\n                      className=\"m-auto text-danger\"\n                    >\n                      <FontAwesomeIcon\n                        icon={faTrash}\n                        onClick={() => this.onDepartmentDelete(items[\"_id\"])}\n                      />\n                    </p>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      // <div id=\"table-outer-div-scroll\">\n      //   <h2 id=\"role-title\">Department Details</h2>\n      //   <Button\n      //     variant=\"primary\"\n      //     id=\"add-button\"\n      //     onClick={this.props.onAddDepartment}\n      //   >\n      //     <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n      //     Add\n      //   </Button>\n\n      //   <div id=\"clear-both\" />\n      //   {!this.state.loading ? (\n      //     <div\n      //       id=\"table-div\"\n      //       className=\"ag-theme-balham\"\n      //       //   style={\n      //       //     {\n      //       //     height: \"500px\",\n      //       //     width: \"100%\"\n      //       //   }\n      //       // }\n      //     >\n      //       <AgGridReact\n      //         columnDefs={this.state.columnDefs}\n      //         defaultColDef={this.state.defaultColDef}\n      //         columnTypes={this.state.columnTypes}\n      //         rowData={this.state.rowData}\n      //         // floatingFilter={true}\n      //         // onGridReady={this.onGridReady}\n      //         pagination={true}\n      //         paginationPageSize={10}\n      //         getRowHeight={this.state.getRowHeight}\n      //       />\n      //     </div>\n      //   ) : (\n      //     <div id=\"loading-bar\">\n      //       <RingLoader\n      //         css={override}\n      //         sizeUnit={\"px\"}\n      //         size={50}\n      //         color={\"#0000ff\"}\n      //         loading={true}\n      //       />\n      //     </div>\n      //   )}\n      //\n      // </div>\n    );\n  }\n}\n\nexport default DepartmentTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\PositionFormEdit.jsx",["1299","1300","1301","1302"],"import React, { Component } from \"react\";\n// import \"./PositionForm.css\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\n// import { Form,Button } from \"react-bootstrap\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nclass PositionForm extends Component {\n  state = {\n    PositionData: this.props.editData[\"PositionName\"],\n    companyInfo: []\n  };\n  onChange(e) {\n    this.setState({ PositionData: e.target.value });\n  }\n  companyData = [];\n  loadCompanyInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/company\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        // if(response.data.length==0){this.roleObj=[\"temp\"];}\n        // else{\n\n        // }\n        this.companyData = response.data;\n\n        // this.portalsData=this.portalsData.filter((data)=>data[\"Status\"]==1);\n\n        this.setState({ companyInfo: response.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  componentWillMount() {\n    this.loadCompanyInfo();\n  }\n\n  render() {\n    // let value=(this.props.pass) ? undefined : \"\";<i class=\"fas fa-plus\"></i>\n    return (\n      <div>\n        <h2 id=\"role-form-title\">Edit Position Details</h2>\n\n        <div id=\"role-form-outer-div\">\n          <Form\n            id=\"form\"\n            onSubmit={(e) =>\n              this.props.onPositionEditUpdate(\n                this.props.editData,\n                e.target[0].value,\n                e.target[1].value\n              )\n            }\n          >\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Company\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" name=\"country\" required>\n                  <option value=\"\" disabled selected>\n                    Select your option\n                  </option>\n                  {this.companyData.map((data, index) => (\n                    <option\n                      value={data[\"_id\"]}\n                      selected={\n                        this.props.editData[\"company\"][0][\"_id\"] == data[\"_id\"]\n                      }\n                    >\n                      {data[\"CompanyName\"]}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Position\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Position\"\n                  name=\"PositionName\"\n                  required\n                  value={this.state.PositionData}\n                  onChange={(value) => this.onChange(value)}\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} id=\"form-submit-button\">\n              <Col sm={{ span: 10, offset: 2 }}>\n                <Button type=\"submit\">Update</Button>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} id=\"form-cancel-button\">\n              <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                <Button type=\"reset\" onClick={this.props.onFormEditClose}>\n                  cancel\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PositionForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\PositionForm.jsx",["1303"],"import React, { Component } from \"react\";\nimport \"./PositionForm.css\";\n\n// import { Form,Button } from \"react-bootstrap\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nclass PositionForm extends Component {\n  state = {\n    companyInfo: [],\n  };\n  companyData = [];\n  loadCompanyInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/company\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\",\n        },\n      })\n      .then((response) => {\n        this.companyData = response.data;\n        this.setState({ companyInfo: response.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  componentWillMount() {\n    this.loadCompanyInfo();\n  }\n  render() {\n    return (\n      <div>\n        <h2 className=\"p-3 fw-bold text-muted text-center mt-3\">\n          Add Position 🪑\n        </h2>\n\n        <div id=\"role-form-outer-div\">\n          <Form id=\"form\" onSubmit={this.props.onPositionSubmit}>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                <h5>Company :</h5>\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" name=\"country\" required>\n                  <option value=\"\" disabled selected>\n                    Select your option\n                  </option>\n                  {this.companyData.map((data, index) => (\n                    <option value={data[\"_id\"]}>{data[\"CompanyName\"]}</option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n            <br />\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                <h5>Position :</h5>\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Position\"\n                  name=\"Position\"\n                  required\n                />\n              </Col>\n            </Form.Group>\n            <div className=\"row mt- \">\n              <div className=\"col-2\"></div>\n\n              <div className=\"col-10 d-flex justify-between \">\n                <button className=\"btn btn-primary\" type=\"submit\">\n                  Submit\n                </button>\n                <button\n                  className=\"btn btn-secondary\"\n                  type=\"reset\"\n                  onClick={this.props.onFormClose}\n                >\n                  cancel\n                </button>\n              </div>\n            </div>\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PositionForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\PositionTable.jsx",["1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./PositionTable.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\n// import { Button } from \"react-bootstrap\";\nimport {\n  Form,\n  Button,\n  Col,\n  Row,\n  Table,\n  Dropdown,\n  DropdownButton\n} from \"react-bootstrap\";\n\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nclass PositionTable extends Component {\n  state = {\n    positionData: [],\n    loading: true,\n    totalPositions: 0,\n    rowData: [],\n\n    getRowHeight: function (params) {\n      return 35;\n    }\n  };\n  positionObj = [];\n  rowDataT = [];\n\n  loadPositionData = () => {\n    axios\n      .get(\"http://localhost:4000/api/position\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        this.positionObj = response.data;\n        console.log(\"response\", response.data);\n        this.setState({ positionData: response.data });\n        this.setState({ loading: false });\n        this.rowDataT = [];\n\n        this.positionObj.map((data) => {\n          let temp = {\n            data,\n            CompanyName: data[\"company\"][0][\"CompanyName\"],\n            PositionName: data[\"PositionName\"]\n          };\n\n          this.rowDataT.push(temp);\n        });\n        // this.setState({ totalPositions: response.data.length });\n        this.props.updateTotalPositions(response.data.length); // Update this line\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  onPositionDelete = (e) => {\n    console.log(e);\n    if (window.confirm(\"Are you sure to delete this record ? \") == true) {\n      axios\n        .delete(\"http://localhost:4000/api/position/\" + e, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then((res) => {\n          this.componentDidMount();\n        })\n        .catch((err) => {\n          console.log(err);\n          console.log(err.response);\n          if (err.response.status == 403) {\n            window.alert(err.response.data);\n          }\n        });\n    }\n  };\n  componentDidMount() {\n    this.loadPositionData();\n  }\n  renderButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() => this.onPositionDelete(params.data.data[\"_id\"])}\n      />\n    );\n  }\n  renderEditButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => this.props.onEditPosition(params.data.data)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div\n        style={{ height: \"100vh\", width: \"100%\", scrollbarWidth: \"thin\" }}\n        className=\"p-4\"\n      >\n        <div className=\"d-flex justify-between mb-3\">\n          <div>\n            <h2 className=\"fw-bold text-muted my-auto\">Position Details</h2>\n            <p className=\"text-muted\">\n              You can create new position and also view all existing position of\n              the company here !\n            </p>\n          </div>\n          <Button\n            className=\"my-auto\"\n            variant=\"primary\"\n            id=\"add-button\"\n            onClick={this.props.onAddPosition}\n          >\n            <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n            Add new position\n          </Button>\n        </div>\n        <div id=\"clear-both\" />\n        {/* {!this.state.loading ? (\n          <div\n            id=\"table-div\"\n            className=\"ag-theme-balham\"\n          //   style={\n          //     {\n          //     height: \"500px\",\n          //     width: \"100%\"\n          //   }\n          // }\n          >\n            <AgGridReact\n              columnDefs={this.state.columnDefs}\n              defaultColDef={this.state.defaultColDef}\n              columnTypes={this.state.columnTypes}\n              rowData={this.state.rowData}\n              // floatingFilter={true}\n              // onGridReady={this.onGridReady}\n              pagination={true}\n              paginationPageSize={10}\n              getRowHeight={this.state.getRowHeight}\n            />\n          </div>\n        ) : (\n            <div id=\"loading-bar\">\n              <RingLoader\n                css={override}\n                sizeUnit={\"px\"}\n                size={50}\n                color={\"#0000ff\"}\n                loading={true}\n              />\n            </div>\n          )} */}\n        <Table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th\n                style={{\n                  background: \"linear-gradient(#1D267D, #2F58CD)\",\n                  color: \"white\"\n                }}\n                className=\"p\"\n              >\n                Company\n              </th>\n              <th\n                style={{\n                  background: \"linear-gradient(#1D267D, #2F58CD)\",\n                  color: \"white\"\n                }}\n                className=\"p\"\n              >\n                Position\n              </th>\n              <th\n                style={{\n                  background: \"linear-gradient(#1D267D, #2F58CD)\",\n                  color: \"white \",\n                  textAlign: \"center\"\n                }}\n                className=\"p\"\n              >\n                {\" \"}\n                Action\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.positionObj.map((data, index) => (\n              <tr key={index}>\n                <td>{data[\"company\"][0][\"CompanyName\"]}</td>\n                <td>{data[\"PositionName\"]}</td>\n\n                <td>\n                  <div className=\"d-flex gap-5\">\n                    <span\n                      title=\"Update\"\n                      className=\"m-auto text-primary\"\n                      style={{ cursor: \"pointer\" }}\n                    >\n                      <FontAwesomeIcon\n                        icon={faEdit}\n                        onClick={() => this.props.onEditPosition(data)}\n                      />\n                    </span>\n\n                    <span\n                      title=\"Delete\"\n                      className=\"m-auto text-danger\"\n                      style={{ cursor: \"pointer\" }}\n                    >\n                      <FontAwesomeIcon\n                        icon={faTrash}\n                        onClick={() => this.onPositionDelete(data[\"_id\"])}\n                      />\n                    </span>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default PositionTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\Dashboard\\CountData\\EmpTaskCount.jsx",["1315","1316","1317","1318","1319"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { IoIosArrowDroprightCircle } from \"react-icons/io\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst EmpTaskCount = (props) => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [email, setEmail] = useState(null);\r\n\r\n  const id = localStorage.getItem(\"_id\");\r\n\r\n  useEffect(() => {\r\n    const loadPersonalInfoData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:4000/api/personal-info/${id}`,\r\n          {\r\n            headers: {\r\n              authorization: localStorage.getItem(\"token\") || \"\"\r\n            }\r\n          }\r\n        );\r\n        setEmail(response.data.Email);\r\n      } catch (error) {\r\n        console.error(\"Error fetching employees:\", error);\r\n      }\r\n    };\r\n\r\n    loadPersonalInfoData();\r\n  }, []);\r\n\r\n  const calculateRemainingTime = (endDate) => {\r\n    const now = new Date();\r\n    const endDateTime = new Date(endDate);\r\n    let remainingTime = endDateTime - now;\r\n\r\n    if (remainingTime < 0) {\r\n      // If remaining time is negative, consider it as delay\r\n      remainingTime = Math.abs(remainingTime);\r\n      return { delay: true, days: 0, hours: 0, minutes: 0 };\r\n    } else {\r\n      // Calculate remaining days, hours, minutes, and seconds\r\n      const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\r\n      const hours = Math.floor(\r\n        (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n      );\r\n      const minutes = Math.floor(\r\n        (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\r\n      );\r\n      return { delay: false, days, hours, minutes };\r\n    }\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:4000/api/tasks\");\r\n      setTasks(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching tasks:\", error.message);\r\n      setError(\"Error fetching tasks. Please try again later.\");\r\n    } finally {\r\n      setLoading(false);\r\n      setTimeout(fetchData, 60000);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n\r\n    return () => clearTimeout();\r\n  }, []);\r\n\r\n  // Count of different task statuses for the current employee\r\n  const acceptedTasksCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) =>\r\n        taskemp.empemail === email && taskemp.emptaskStatus === \"Accepted\"\r\n    )\r\n  ).length;\r\n\r\n  const rejectedTasksCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) =>\r\n        taskemp.empemail === email && taskemp.emptaskStatus === \"Rejected\"\r\n    )\r\n  ).length;\r\n\r\n  const completedTasksCount = tasks.filter(\r\n    (task) =>\r\n      task.status === \"Pending\" &&\r\n      task.employees.some((emp) => emp.emptaskStatus === \"Completed\")\r\n  ).length;\r\n\r\n  const pendingTasksCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) => taskemp.empemail === email && task.status === \"Pending\"\r\n    )\r\n  ).length;\r\n\r\n  const assignedTasksCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) =>\r\n        taskemp.empemail === email && taskemp.emptaskStatus === \"Task Assigned\"\r\n    )\r\n  ).length;\r\n\r\n  const acceptedTasksNotCompletedOnTimeCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) =>\r\n        taskemp.empemail === email &&\r\n        taskemp.emptaskStatus === \"Accepted\" &&\r\n        calculateRemainingTime(task.endDate).delay\r\n    )\r\n  ).length;\r\n\r\n  const completedTasksOnTimeCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) =>\r\n        taskemp.empemail === email &&\r\n        taskemp.emptaskStatus === \"Completed\" &&\r\n        !calculateRemainingTime(task.endDate).delay\r\n    )\r\n  ).length;\r\n\r\n  const lateCompletedAcceptedTasksCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) =>\r\n        taskemp.empemail === email &&\r\n        taskemp.emptaskStatus === \"Accepted\" &&\r\n        calculateRemainingTime(task.endDate).delay\r\n    )\r\n  ).length;\r\n\r\n  const lateCompletedTasksCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) =>\r\n        taskemp.empemail === email &&\r\n        taskemp.emptaskStatus === \"Completed\" &&\r\n        calculateRemainingTime(task.endDate).delay\r\n    )\r\n  ).length;\r\n\r\n  // const notAcceptedAssignedTasksCount = tasks.filter((task) =>\r\n  //   task.employees.some(\r\n  //     (taskemp) =>\r\n  //       taskemp.empemail === email &&\r\n  //       taskemp.emptaskStatus === \"Task Assigned\" &&\r\n  //       taskemp.emptaskStatus !== \"Accepted\"\r\n  //   )\r\n  // ).length;\r\n\r\n  // const notAssignedButNotAcceptedTasksCount = tasks.filter(\r\n  //   (task) =>\r\n  //     !task.employees.some((taskemp) => taskemp.empemail === email) &&\r\n  //     task.employees.every((taskemp) => taskemp.emptaskStatus !== \"Accepted\")\r\n  // ).length;\r\n\r\n  // const assignedTasksNotAcceptedOnTimeCount = tasks.filter((task) =>\r\n  //   task.employees.some(\r\n  //     (taskemp) =>\r\n  //       taskemp.empemail === email &&\r\n  //       taskemp.emptaskStatus === \"Task Assigned\" &&\r\n  //       calculateRemainingTime(task.endDate).delay\r\n  //   )\r\n  // ).length;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container-fluid  mt-4\">\r\n        <div className=\"row row-gap-4\">\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#FED2AA\" }}\r\n              className=\" DashboardCard position-relative\"\r\n            >\r\n              <div className=\" d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Total New Task\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {pendingTasksCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/employee\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#DFFFD8\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Accept Task{\" \"}\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {/* {acceptedTasks.length}{\" \"} */}\r\n                    {acceptedTasksCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/leave-application-hr\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* <div className=\"row row-gap-4\"></div> */}\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#FEBBCC\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Complete Task\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {completedTasksCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/employee\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#FEBBCC\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Reject Task\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {rejectedTasksCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/employee\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#FEBBCC\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Pending Task\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {assignedTasksCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/employee\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#BCCEF8\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Overdue Task\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {acceptedTasksNotCompletedOnTimeCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/employee\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#BCCEF8\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  On Time complete\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {/* {onTimeTasks} */}\r\n                    {completedTasksOnTimeCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/employee\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#BCCEF8\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Late Complete\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {/* {onTimeTasks} */}\r\n                    {lateCompletedAcceptedTasksCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/employee\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-md-9\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmpTaskCount;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { IoIosArrowDroprightCircle } from \"react-icons/io\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\n// const EmpTaskCount = (props) => {\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [isCanceling, setIsCanceling] = useState(false);\r\n//   const [isCompleting, setIsCompleting] = useState(false);\r\n//   const [email, setEmail] = useState(null);\r\n\r\n//   // const [pendingTasks, setPendingTasks] = useState([]);\r\n//   // const [acceptedTasks, setAcceptedTasks] = useState([]);\r\n//   // const [rejectedTasks, setRejectedTasks] = useState([]);\r\n//   // const [completedTasks, setCompletedTasks] = useState([]);\r\n//   const [lateTasks, setLateTasks] = useState([]);\r\n//   const [onTimeTasks, setOnTimeTasks] = useState([]);\r\n\r\n//   const id = localStorage.getItem(\"_id\");\r\n\r\n//   useEffect(() => {\r\n//     const loadPersonalInfoData = async () => {\r\n//       try {\r\n//         const response = await axios.get(\r\n//           `http://localhost:4000/api/personal-info/${id}`,\r\n//           {\r\n//             headers: {\r\n//               authorization: localStorage.getItem(\"token\") || \"\"\r\n//             }\r\n//           }\r\n//         );\r\n//         setEmail(response.data.Email);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching employees:\", error);\r\n//       }\r\n//     };\r\n\r\n//     loadPersonalInfoData();\r\n//   }, []);\r\n\r\n//   const calculateRemainingTime = (endDate) => {\r\n//     const now = new Date();\r\n//     const endDateTime = new Date(endDate);\r\n//     let remainingTime = endDateTime - now;\r\n\r\n//     if (remainingTime < 0) {\r\n//       remainingTime = Math.abs(remainingTime);\r\n//       return { delay: true, days: 0, hours: 0, minutes: 0 };\r\n//     } else {\r\n//       const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\r\n//       const hours = Math.floor(\r\n//         (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n//       );\r\n//       const minutes = Math.floor(\r\n//         (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\r\n//       );\r\n//       return { delay: false, days, hours, minutes };\r\n//     }\r\n//   };\r\n\r\n//   const fetchData = async () => {\r\n//     try {\r\n//       const response = await axios.get(\"http://localhost:4000/api/tasks\");\r\n//       setTasks(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching tasks:\", error.message);\r\n//       setError(\"Error fetching tasks. Please try again later.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   // useEffect(() => {\r\n//   //   // Update task categories whenever tasks change\r\n//   //   setPendingTasks(\r\n//   //     tasks.filter(\r\n//   //       (task) =>\r\n//   //         task.status === \"Pending\" &&\r\n//   //         task.employees.some((taskemp) => taskemp.empemail === email)\r\n//   //     )\r\n//   //   );\r\n\r\n//   //   setAcceptedTasks(\r\n//   //     tasks.filter(\r\n//   //       (task) =>\r\n//   //         task.status === \"Accepted\" &&\r\n//   //         task.employees.some((taskemp) => taskemp.empemail === email)\r\n//   //     )\r\n//   //   );\r\n\r\n//   //   setRejectedTasks(\r\n//   //     tasks.filter(\r\n//   //       (task) =>\r\n//   //         task.status === \"Rejected\" &&\r\n//   //         task.employees.some((taskemp) => taskemp.empemail === email)\r\n//   //     )\r\n//   //   );\r\n\r\n//   //   setCompletedTasks(\r\n//   //     tasks.filter(\r\n//   //       (task) =>\r\n//   //         task.status === \"Completed\" &&\r\n//   //         task.employees.some((taskemp) => taskemp.empemail === email)\r\n//   //     )\r\n//   //   );\r\n\r\n//   //   setLateTasks(\r\n//   //     tasks.filter(\r\n//   //       (task) =>\r\n//   //         task.status === \"Pending\" &&\r\n//   //         task.employees.some((taskemp) => taskemp.empemail === email) &&\r\n//   //         calculateRemainingTime(task.endDate).delay\r\n//   //     )\r\n//   //   );\r\n\r\n//   //   setOnTimeTasks(\r\n//   //     tasks.filter(\r\n//   //       (task) =>\r\n//   //         task.status === \"Pending\" &&\r\n//   //         task.employees.some((taskemp) => taskemp.empemail === email) &&\r\n//   //         !calculateRemainingTime(task.endDate).delay\r\n//   //     )\r\n//   //   );\r\n//   // }, [tasks, email]);\r\n\r\n//   const [totalNewTasksLength, setTotalNewTasksLength] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     // Update totalNewTasksLength whenever tasks or email change\r\n//     setTotalNewTasksLength(\r\n//       tasks.filter(\r\n//         (task) =>\r\n//           task.status === \"Pending\" &&\r\n//           task.employees.some((taskemp) => taskemp.empemail === email)\r\n//       ).length\r\n//     );\r\n\r\n//     setLateTasks(\r\n//       tasks.filter(\r\n//         (task) =>\r\n//           task.status === \"Pending\" &&\r\n//           task.employees.some((taskemp) => taskemp.empemail === email) &&\r\n//           calculateRemainingTime(task.endDate).delay\r\n//       ).length\r\n//     );\r\n\r\n//     setOnTimeTasks(\r\n//       tasks.filter(\r\n//         (task) =>\r\n//           task.status === \"Pending\" &&\r\n//           task.employees.some((taskemp) => taskemp.empemail === email) &&\r\n//           !calculateRemainingTime(task.endDate).delay\r\n//       ).length\r\n//     );\r\n//   }, [tasks, email]);\r\n\r\n//   const acceptedTasks = tasks.filter(\r\n//     (task) =>\r\n//       task.status === \"Pending\" &&\r\n//       task.employees.some((emp) => emp.emptaskStatus === \"Accepted\")\r\n//   ).length;\r\n\r\n//   const completeTasks = tasks.filter(\r\n//     (task) =>\r\n//       task.status === \"Pending\" &&\r\n//       task.employees.some((emp) => emp.emptaskStatus === \"Completed\")\r\n//   ).length;\r\n\r\n//   const rejectTasks = tasks.filter(\r\n//     (task) =>\r\n//       task.status === \"Pending\" &&\r\n//       task.employees.some((emp) => emp.emptaskStatus === \"Rejected\")\r\n//   ).length;\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"container-fluid  mt-4\">\r\n//         <div className=\"row row-gap-4\">\r\n//           <div className=\"col-md-3\">\r\n//             <div\r\n//               style={{ backgroundColor: \"#FED2AA\" }}\r\n//               className=\" DashboardCard position-relative\"\r\n//             >\r\n//               <div className=\" d-flex flex-column gap-3\">\r\n//                 <p className=\"fw-bold pt-2 text-muted\">\r\n//                   Assigned Task\r\n//                   <span\r\n//                     className=\"fw-bolder text-info position-absolute\"\r\n//                     style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n//                   >\r\n//                     {totalNewTasksLength}\r\n//                   </span>\r\n//                 </p>\r\n//                 <Link\r\n//                   className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n//                   to=\"/hr/employee\"\r\n//                 >\r\n//                   <p className=\"my-auto\">More Info</p>{\" \"}\r\n//                   <p className=\"my-auto fs-4 d-flex\">\r\n//                     <IoIosArrowDroprightCircle />\r\n//                   </p>\r\n//                 </Link>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"col-md-3\">\r\n//             <div\r\n//               style={{ backgroundColor: \"#DFFFD8\" }}\r\n//               className=\"DashboardCard position-relative\"\r\n//             >\r\n//               <div className=\"d-flex flex-column gap-3\">\r\n//                 <p className=\"fw-bold pt-2 text-muted\">\r\n//                   Accept Task{\" \"}\r\n//                   <span\r\n//                     className=\"fw-bolder text-info position-absolute\"\r\n//                     style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n//                   >\r\n//                     {/* {acceptedTasks.length}{\" \"} */}\r\n//                     {acceptedTasks}\r\n//                   </span>\r\n//                 </p>\r\n//                 <Link\r\n//                   className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n//                   to=\"/hr/leave-application-hr\"\r\n//                 >\r\n//                   <p className=\"my-auto\">More Info</p>{\" \"}\r\n//                   <p className=\"my-auto fs-4 d-flex\">\r\n//                     <IoIosArrowDroprightCircle />\r\n//                   </p>\r\n//                 </Link>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* <div className=\"row row-gap-4\"></div> */}\r\n//           <div className=\"col-md-3\">\r\n//             <div\r\n//               style={{ backgroundColor: \"#FEBBCC\" }}\r\n//               className=\"DashboardCard position-relative\"\r\n//             >\r\n//               <div className=\"d-flex flex-column gap-3\">\r\n//                 <p className=\"fw-bold pt-2 text-muted\">\r\n//                   Complete Task\r\n//                   <span\r\n//                     className=\"fw-bolder text-info position-absolute\"\r\n//                     style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n//                   >\r\n//                     {completeTasks}\r\n//                   </span>\r\n//                 </p>\r\n//                 <Link\r\n//                   className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n//                   to=\"/hr/employee\"\r\n//                 >\r\n//                   <p className=\"my-auto\">More Info</p>{\" \"}\r\n//                   <p className=\"my-auto fs-4 d-flex\">\r\n//                     <IoIosArrowDroprightCircle />\r\n//                   </p>\r\n//                 </Link>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"col-md-3\">\r\n//             <div\r\n//               style={{ backgroundColor: \"#FEBBCC\" }}\r\n//               className=\"DashboardCard position-relative\"\r\n//             >\r\n//               <div className=\"d-flex flex-column gap-3\">\r\n//                 <p className=\"fw-bold pt-2 text-muted\">\r\n//                   Reject Task\r\n//                   <span\r\n//                     className=\"fw-bolder text-info position-absolute\"\r\n//                     style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n//                   >\r\n//                     {rejectTasks}\r\n//                   </span>\r\n//                 </p>\r\n//                 <Link\r\n//                   className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n//                   to=\"/hr/employee\"\r\n//                 >\r\n//                   <p className=\"my-auto\">More Info</p>{\" \"}\r\n//                   <p className=\"my-auto fs-4 d-flex\">\r\n//                     <IoIosArrowDroprightCircle />\r\n//                   </p>\r\n//                 </Link>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"col-md-3\">\r\n//             <div\r\n//               style={{ backgroundColor: \"#BCCEF8\" }}\r\n//               className=\"DashboardCard position-relative\"\r\n//             >\r\n//               <div className=\"d-flex flex-column gap-3\">\r\n//                 <p className=\"fw-bold pt-2 text-muted\">\r\n//                   Late Task\r\n//                   <span\r\n//                     className=\"fw-bolder text-info position-absolute\"\r\n//                     style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n//                   >\r\n//                     {lateTasks}\r\n//                   </span>\r\n//                 </p>\r\n//                 <Link\r\n//                   className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n//                   to=\"/hr/employee\"\r\n//                 >\r\n//                   <p className=\"my-auto\">More Info</p>{\" \"}\r\n//                   <p className=\"my-auto fs-4 d-flex\">\r\n//                     <IoIosArrowDroprightCircle />\r\n//                   </p>\r\n//                 </Link>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"col-md-3\">\r\n//             <div\r\n//               style={{ backgroundColor: \"#BCCEF8\" }}\r\n//               className=\"DashboardCard position-relative\"\r\n//             >\r\n//               <div className=\"d-flex flex-column gap-3\">\r\n//                 <p className=\"fw-bold pt-2 text-muted\">\r\n//                   On Time Task\r\n//                   <span\r\n//                     className=\"fw-bolder text-info position-absolute\"\r\n//                     style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n//                   >\r\n//                     {onTimeTasks}\r\n//                   </span>\r\n//                 </p>\r\n//                 <Link\r\n//                   className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n//                   to=\"/hr/employee\"\r\n//                 >\r\n//                   <p className=\"my-auto\">More Info</p>{\" \"}\r\n//                   <p className=\"my-auto fs-4 d-flex\">\r\n//                     <IoIosArrowDroprightCircle />\r\n//                   </p>\r\n//                 </Link>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"col-md-9\"></div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EmpTaskCount;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\RoleFormEdit.jsx",["1320"],"import React, { Component } from \"react\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nclass RoleForm extends Component {\n  state = {\n    RoleData: this.props.editData[\"RoleName\"],\n    companyInfo: []\n  };\n  onChange(e) {\n    this.setState({ RoleData: e.target.value });\n  }\n\n  companyData = [];\n  loadCompanyInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/company\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then(response => {\n        this.companyData = response.data;\n        this.setState({ companyInfo: response.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  componentWillMount() {\n    this.loadCompanyInfo();\n  }\n\n  render() {\n    return (\n      <div>\n        <h2 id=\"role-form-title\">Edit Role Details</h2>\n        <div id=\"role-form-outer-div\">\n          <Form\n            id=\"form\"\n            onSubmit={e =>\n              this.props.onRoleEditUpdate(\n                this.props.editData,\n                e.target[0].value,\n                e.target[1].value\n              )\n            }\n          >\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Company\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" name=\"country\" required>\n                  <option value=\"\" disabled selected>\n                    Select your option\n                  </option>\n                  {this.companyData.map((data, index) => (\n                    <option\n                      value={data[\"_id\"]}\n                      selected={\n                        this.props.editData[\"company\"][0][\"_id\"] == data[\"_id\"]\n                      }\n                    >\n                      {data[\"CompanyName\"]}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Role\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Role\"\n                  name=\"RoleName\"\n                  required\n                  value={this.state.RoleData}\n                  onChange={value => this.onChange(value)}\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} id=\"form-submit-button\">\n              <Col sm={{ span: 10, offset: 2 }}>\n                <Button type=\"submit\">Update</Button>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} id=\"form-cancel-button\">\n              <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                <Button type=\"reset\" onClick={this.props.onFormEditClose}>\n                  cancel\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RoleForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\RoleForm.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\Dashboard\\EmpChart.jsx\\EmpTaskChart.jsx",["1321","1322","1323","1324","1325","1326","1327"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { IoIosArrowDroprightCircle } from \"react-icons/io\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { FaChartLine } from \"react-icons/fa\";\r\nimport \"./chart.css\";\r\n\r\nconst EmpTaskChart = (props) => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [email, setEmail] = useState(null);\r\n\r\n  const id = localStorage.getItem(\"_id\");\r\n\r\n  useEffect(() => {\r\n    const loadPersonalInfoData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:4000/api/personal-info/${id}`,\r\n          {\r\n            headers: {\r\n              authorization: localStorage.getItem(\"token\") || \"\"\r\n            }\r\n          }\r\n        );\r\n        setEmail(response.data.Email);\r\n      } catch (error) {\r\n        console.error(\"Error fetching employees:\", error);\r\n      }\r\n    };\r\n\r\n    loadPersonalInfoData();\r\n  }, []);\r\n\r\n  const calculateRemainingTime = (endDate) => {\r\n    const now = new Date();\r\n    const endDateTime = new Date(endDate);\r\n    let remainingTime = endDateTime - now;\r\n\r\n    if (remainingTime < 0) {\r\n      remainingTime = Math.abs(remainingTime);\r\n      return { delay: true, days: 0, hours: 0, minutes: 0 };\r\n    } else {\r\n      const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\r\n      const hours = Math.floor(\r\n        (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n      );\r\n      const minutes = Math.floor(\r\n        (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\r\n      );\r\n      return { delay: false, days, hours, minutes };\r\n    }\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:4000/api/tasks\");\r\n      setTasks(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching tasks:\", error.message);\r\n      setError(\"Error fetching tasks. Please try again later.\");\r\n    } finally {\r\n      setLoading(false);\r\n      setTimeout(fetchData, 60000);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n\r\n    return () => clearTimeout();\r\n  }, []);\r\n\r\n  // Count of different task statuses for the current employee\r\n  const acceptedTasksCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) =>\r\n        taskemp.empemail === email && taskemp.emptaskStatus === \"Accepted\"\r\n    )\r\n  ).length;\r\n\r\n  const rejectedTasksCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) =>\r\n        taskemp.empemail === email && taskemp.emptaskStatus === \"Rejected\"\r\n    )\r\n  ).length;\r\n\r\n  const completedTasksCount = tasks.filter(\r\n    (task) =>\r\n      task.status === \"Pending\" &&\r\n      task.employees.some((emp) => emp.emptaskStatus === \"Completed\")\r\n  ).length;\r\n\r\n  const pendingTasksCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) => taskemp.empemail === email && task.status === \"Pending\"\r\n    )\r\n  ).length;\r\n\r\n  const assignedTasksCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) =>\r\n        taskemp.empemail === email && taskemp.emptaskStatus === \"Task Assigned\"\r\n    )\r\n  ).length;\r\n\r\n  const acceptedTasksNotCompletedOnTimeCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) =>\r\n        taskemp.empemail === email &&\r\n        taskemp.emptaskStatus === \"Accepted\" &&\r\n        calculateRemainingTime(task.endDate).delay\r\n    )\r\n  ).length;\r\n\r\n  const completedTasksOnTimeCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) =>\r\n        taskemp.empemail === email &&\r\n        taskemp.emptaskStatus === \"Completed\" &&\r\n        !calculateRemainingTime(task.endDate).delay\r\n    )\r\n  ).length;\r\n\r\n  const lateCompletedAcceptedTasksCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) =>\r\n        taskemp.empemail === email &&\r\n        taskemp.emptaskStatus === \"Accepted\" &&\r\n        calculateRemainingTime(task.endDate).delay\r\n    )\r\n  ).length;\r\n\r\n  const lateCompletedTasksCount = tasks.filter((task) =>\r\n    task.employees.some(\r\n      (taskemp) =>\r\n        taskemp.empemail === email &&\r\n        taskemp.emptaskStatus === \"Completed\" &&\r\n        calculateRemainingTime(task.endDate).delay\r\n    )\r\n  ).length;\r\n\r\n  const barChartData = {\r\n    options: {\r\n      chart: {\r\n        id: \"bar\"\r\n      },\r\n      xaxis: {\r\n        categories: [\r\n          \"New Task\",\r\n          \"Pending\",\r\n          \"Accept\",\r\n          \"Complete\",\r\n          \"Reject\",\r\n          \"Overdue\",\r\n          \"Ontime C\",\r\n          \"Late C\"\r\n        ],\r\n        labels: {\r\n          style: {\r\n            fontSize: \"8px\"\r\n          }\r\n        }\r\n      },\r\n      yaxis: {\r\n        labels: {\r\n          style: {\r\n            fontSize: \"14px\"\r\n          }\r\n        }\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          columnWidth: \"50%\"\r\n        }\r\n      }\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Total Task\",\r\n        data: [\r\n          pendingTasksCount,\r\n          assignedTasksCount,\r\n          acceptedTasksCount,\r\n          completedTasksCount,\r\n          rejectedTasksCount,\r\n          acceptedTasksNotCompletedOnTimeCount,\r\n          completedTasksOnTimeCount,\r\n          lateCompletedAcceptedTasksCount\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    // <div className=\"ChartCard shadow-sm\">\r\n    //   <div className=\"ChartHeader\">\r\n    //     <h5 className=\"fw-bolder d-flex gap-3 \">\r\n    //       <FaChartLine className=\"my-auto\" />\r\n    //       Task Progress Report\r\n    //     </h5>\r\n    //   </div>\r\n    //   <div className=\"chartBody\">\r\n    //     <Chart\r\n    //       options={barChartData.options}\r\n    //       series={barChartData.series}\r\n    //       type=\"bar\"\r\n    //       width=\"100%\"\r\n    //       height=\"85%\"\r\n    //     />\r\n    //   </div>\r\n    // </div>\r\n\r\n    <div className=\"ChartCard shadow-sm\">\r\n      <div className=\"ChartHeader\">\r\n        <h5 className=\"fw-bolder d-flex gap-3 \">\r\n          <FaChartLine className=\"my-auto\" />\r\n          Task Progress Report\r\n        </h5>\r\n      </div>\r\n      <div className=\"chartBody\">\r\n        <Chart\r\n          options={barChartData.options}\r\n          series={barChartData.series}\r\n          type=\"bar\"\r\n          width=\"100%\"\r\n          height=\"85%\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmpTaskChart;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\Department\\RoleTable.jsx",["1328","1329","1330"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport { Button } from \"react-bootstrap\";\nimport \"./RoleTable.css\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nclass RoleTable extends Component {\n  state = {\n    roleData: [],\n    loading: true,\n    updateTotalRole: \"\",\n\n    rowData: [],\n\n    getRowHeight: function (params) {\n      return 35;\n    }\n  };\n  roleObj = [];\n  rowDataT = [];\n\n  loadRoleData = () => {\n    axios\n      .get(\"http://localhost:4000/api/role\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        this.roleObj = response.data;\n\n        console.log(\"response\", response.data);\n        this.setState({ roleData: response.data });\n        this.setState({ loading: false });\n        this.rowDataT = [];\n\n        this.roleObj.map((data) => {\n          let temp = {\n            data,\n            CompanyName: data[\"company\"][0][\"CompanyName\"],\n            RoleName: data[\"RoleName\"]\n          };\n\n          this.rowDataT.push(temp);\n        });\n\n        this.props.updateTotalRole(response.data.length);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  onRoleDelete = (e) => {\n    console.log(e);\n    if (window.confirm(\"Are you sure to delete this record ? \") == true) {\n      axios\n        .delete(\"http://localhost:4000/api/role/\" + e, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then((res) => {\n          this.componentDidMount();\n        })\n        .catch((err) => {\n          console.log(err);\n          console.log(err.response);\n          if (err.response.status == 403) {\n            window.alert(err.response.data);\n          }\n        });\n    }\n  };\n\n  componentDidMount() {\n    this.loadRoleData();\n  }\n  renderButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() => this.onRoleDelete(params.data.data[\"_id\"])}\n      />\n    );\n  }\n  renderEditButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => this.props.onEditRole(params.data.data)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div\n        style={{ height: \"100vh\", width: \"100%\", scrollbarWidth: \"thin\" }}\n        className=\"p-4\"\n      >\n        <div className=\"d-flex justify-between aline-items-start mb-3\">\n          <div className=\" my-auto\">\n            <h3 className=\"fw-bold text-muted\">Role Details</h3>\n            <p>\n              You can create new role and view all role of the companies here !\n            </p>\n          </div>\n\n          <Button\n            variant=\"primary\"\n            className=\"my-auto\"\n            id=\"add-button\"\n            onClick={this.props.onAddRole}\n          >\n            <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n            Add new role\n          </Button>\n        </div>\n        <div id=\"clear-both\" />\n        {!this.state.loading ? (\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th\n                  style={{\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  className=\"py-1\"\n                >\n                  Company\n                </th>\n                <th\n                  style={{\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  className=\"py-1\"\n                >\n                  Role\n                </th>\n                <th\n                  style={{\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\",\n                    textAlign: \"center\"\n                  }}\n                  className=\"py-1\"\n                >\n                  Action\n                </th>\n              </tr>\n            </thead>\n\n            {!this.state.loading ? (\n              <React.Fragment>\n                {this.roleObj.map((data, index) => (\n                  <tbody key={index}>\n                    <tr>\n                      <td>{data[\"company\"][0][\"CompanyName\"]}</td>\n                      <td>{data[\"RoleName\"]}</td>\n\n                      <td className=\"roleAction\">\n                        <div className=\"d-flex gap-5\">\n                          <span\n                            title=\"Update\"\n                            className=\"m-auto text-primary\"\n                            style={{ cursor: \"pointer\" }}\n                          >\n                            <FontAwesomeIcon\n                              icon={faEdit}\n                              onClick={() => this.props.onEditRole(data)}\n                            />\n                          </span>\n\n                          <span\n                            title=\"Delete\"\n                            className=\"m-auto text-danger\"\n                            style={{ cursor: \"pointer\" }}\n                          >\n                            <FontAwesomeIcon\n                              icon={faTrash}\n                              onClick={() => this.onRoleDelete(data[\"_id\"])}\n                            />\n                          </span>\n                        </div>\n                      </td>\n                    </tr>\n                  </tbody>\n                ))}\n              </React.Fragment>\n            ) : (\n              <tbody>\n                <tr>\n                  <td />\n                  <td>\n                    <div id=\"loading-bar\">\n                      <RingLoader\n                        css={override}\n                        sizeUnit={\"px\"}\n                        size={150}\n                        color={\"#0000ff\"}\n                        loading={true}\n                      />\n                    </div>\n                  </td>\n                  <td />\n                  <td />\n                </tr>\n              </tbody>\n            )}\n          </table>\n        ) : (\n          <div id=\"loading-bar\">\n            <RingLoader\n              css={override}\n              sizeUnit={\"px\"}\n              size={50}\n              color={\"#0000ff\"}\n              loading={true}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default RoleTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\LeaveApplicationHRTable.jsx",["1331","1332","1333","1334","1335","1336","1337","1338","1339","1340","1341","1342","1343","1344","1345","1346","1347","1348","1349","1350","1351"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./LeaveApplicationHRTable.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport {\n  Form,\n  Button,\n  Col,\n  Row,\n  Table,\n  Dropdown,\n  DropdownButton\n} from \"react-bootstrap\";\n\n// *************csv & pdf **************//\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { BsFillFileEarmarkPdfFill } from \"react-icons/bs\";\n// *************csv & pdf **************//\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nconst LeaveApplicationHRTable = (props) => {\n  const [leaveApplicationHRData, setLeaveApplicationHRData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchData, setSearchData] = useState(\"\");\n  const [totalLeaves, setTotalLeaves] = useState(0);\n  const [sortColumn, setSortColumn] = useState(null);\n  const [sortDirection, setSortDirection] = useState(\"asc\");\n  const [rowData, setRowData] = useState([]);\n  const email = localStorage.getItem(\"Email\");\n  // ...\n\n  let leaveApplicationHRObj = [];\n  let rowDataT = [];\n\n  const loadLeaveApplicationHRData = () => {\n    axios\n      .get(\"http://localhost:4000/api/leave-application-hr/\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        leaveApplicationHRObj = response.data;\n        console.log(\"response\", response.data);\n        setLeaveApplicationHRData(response.data);\n        setLoading(false);\n\n        rowDataT = [];\n\n        leaveApplicationHRObj.map((data) => {\n          let temp = {\n            data,\n            empID:\n              data[\"employee\"] &&\n              data[\"employee\"][0] &&\n              data[\"employee\"][0][\"empID\"],\n            Name:\n              data[\"employee\"] &&\n              data[\"employee\"][0] &&\n              data[\"employee\"][0][\"FirstName\"] +\n                \" \" +\n                data[\"employee\"][0][\"LastName\"],\n            Leavetype: data[\"Leavetype\"],\n            FromDate: data[\"FromDate\"].slice(0, 10),\n            ToDate: data[\"ToDate\"].slice(0, 10),\n            Reasonforleave: data[\"Reasonforleave\"],\n            hrEmail: data[\"hrEmail\"],\n            Status: status(data[\"Status\"])\n          };\n\n          rowDataT.push(temp);\n        });\n\n        setRowData(rowDataT);\n\n        setTotalLeaves(response.data.length);\n        props.updateTotalLeaves(response.data.length);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  // ...\n\n  const onLeaveApplicationHRDelete = (e1, e2) => {\n    console.log(e1, e2);\n    if (window.confirm(\"Are you sure to delete this record? \") == true) {\n      axios\n        .delete(\n          \"http://localhost:4000/api/leave-application-hr/\" + e1 + \"/\" + e2,\n          {\n            headers: {\n              authorization: localStorage.getItem(\"token\") || \"\"\n            }\n          }\n        )\n        .then((res) => {\n          loadLeaveApplicationHRData();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const exportToPDF = () => {\n    window.confirm(\"Are you sure to download Leave record? \");\n    const { rowData } = this.state;\n    // Set A4 landscape dimensions\n    const pdfWidth = 297; // A4 width in mm\n    const pdfHeight = 210; // A4 height in mm\n    const doc = new jsPDF({\n      orientation: \"landscape\",\n      unit: \"mm\",\n      format: [pdfWidth, pdfHeight]\n    });\n\n    doc.setFontSize(18);\n    doc.text(\"Employee Leave Details\", pdfWidth / 2, 15, \"center\");\n    const headers = [\n      \"Emp Id\",\n      \"Leave Type\",\n      \"Start Date\",\n      \"End Date\",\n      \"Remarks\",\n      \"Status\"\n    ];\n    const data = rowData.map((row) => [\n      row.empID,\n      row.Leavetype,\n      row.FromDate,\n      row.ToDate,\n      row.Reasonforleave,\n      row.Status,\n\n      \"\" // Action column - you can customize this based on your requirements\n    ]);\n    doc.setFontSize(12);\n    doc.autoTable({\n      head: [headers],\n      body: data,\n      startY: 25\n    });\n\n    doc.save(\"leaveApplication_data.pdf\");\n  };\n\n  useEffect(() => {\n    loadLeaveApplicationHRData();\n  }, []);\n\n  const renderButton = (params) => {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() =>\n          onLeaveApplicationHRDelete(\n            params.data.data[\"employee\"][0][\"_id\"],\n            params.data.data[\"_id\"]\n          )\n        }\n      />\n    );\n  };\n\n  const renderEditButton = (params) => {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => props.onEditLeaveApplicationHR(params.data.data)}\n      />\n    );\n  };\n\n  const status = (s) => {\n    if (s == 1) {\n      return \"Pending\";\n    }\n    if (s == 2) {\n      return \"Approved\";\n    }\n    if (s == 3) {\n      return \"Rejected\";\n    }\n  };\n\n  const renderSortIcon = (field) => {\n    if (sortColumn === field) {\n      return sortDirection === \"asc\" ? \"▴\" : \"▾\";\n    }\n    return null;\n  };\n\n  const sortData = (columnName) => {\n    const { rowData, sortColumn, sortDirection } = this.state;\n    let newSortDirection = \"asc\";\n\n    if (sortColumn === columnName && sortDirection === \"asc\") {\n      newSortDirection = \"desc\";\n    }\n\n    const sortedData = [...rowData];\n\n    sortedData.sort((a, b) => {\n      const valueA = a[columnName];\n      const valueB = b[columnName];\n\n      let comparison = 0;\n\n      if (valueA > valueB) {\n        comparison = 1;\n      } else if (valueA < valueB) {\n        comparison = -1;\n      }\n\n      return sortDirection === \"desc\" ? comparison * -1 : comparison;\n    });\n\n    setRowData(sortedData);\n    setSortColumn(columnName);\n    setSortDirection(newSortDirection);\n  };\n\n  const pendingLeaves = rowData.filter(\n    (data) => data.Status === \"Pending\"\n  ).length;\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"d-flex justify-between\">\n        <h3 className=\"fw-bold text-muted\">Leave Request ({pendingLeaves})</h3>\n\n        <button\n          className=\"btn px-3 d-flex justify-center  aline-center gap-2\"\n          onClick={exportToPDF}\n        >\n          <BsFillFileEarmarkPdfFill className=\"text-danger fs-4\" />\n          <p className=\"my-auto fs-5 fw-bold\">PDF</p>\n        </button>\n      </div>\n\n      <div id=\"clear-both\" />\n      {!loading ? (\n        <div\n          className=\"mt-3\"\n          style={{\n            overflow: \"auto\",\n            height: \"85vh\",\n            width: \"100%\",\n            scrollbarWidth: \"thin\"\n          }}\n        >\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"empID\")}\n                >\n                  Employee ID {renderSortIcon(\"empID\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Name\")}\n                >\n                  Emp Name {renderSortIcon(\"Name\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Leavetype\")}\n                >\n                  Leave Type {renderSortIcon(\"Leavetype\")}\n                </th>\n                <th\n                  s\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"FromDate\")}\n                >\n                  Start Date {renderSortIcon(\"FromDate\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"ToDate\")}\n                >\n                  End Date {renderSortIcon(\"ToDate\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Status\")}\n                >\n                  Status {renderSortIcon(\"Status\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Reasonforleave\")}\n                >\n                  Remarks {renderSortIcon(\"Reasonforleave\")}\n                </th>\n                <th\n                  style={{\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\",\n                    textAlign: \"center\"\n                  }}\n                >\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {rowData\n                .filter((e) => e.Status == \"Pending\" && e.hrEmail===email )\n                .map((data, index) => (\n                  <tr key={index}>\n                    <td className=\"text-uppercase py-1\">{data.empID}</td>\n                    <td className=\"py-1\">{data.Name}</td>\n                    <td className=\"py-1\">{data.Leavetype}</td>\n                    <td className=\"py-1\">{data.FromDate}</td>\n                    <td className=\"py-1\">{data.ToDate}</td>\n                    <td className=\"py-1\">{data.Status}</td>\n                    <td className=\"py-1\">{data.Reasonforleave}</td>\n                    <td className=\"py-1\">\n                      <div\n                        className=\"d-flex gap-3 py-2\"\n                        style={{ cursor: \"pointer\" }}\n                      >\n                        <p title=\"Update\" className=\"m-auto text-primary\">\n                          <FontAwesomeIcon\n                            className=\"m-auto\"\n                            icon={faEdit}\n                            onClick={() =>\n                              props.onEditLeaveApplicationHR(data.data)\n                            }\n                          />\n                        </p>\n                        <p title=\"Delete\" className=\"m-auto text-danger\">\n                          <FontAwesomeIcon\n                            className=\"m-auto\"\n                            icon={faTrash}\n                            onClick={() =>\n                              onLeaveApplicationHRDelete(\n                                data.data[\"employee\"][0][\"_id\"],\n                                data.data[\"_id\"]\n                              )\n                            }\n                          />\n                        </p>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <div id=\"loading-bar\">\n          <RingLoader\n            css={override}\n            sizeUnit={\"px\"}\n            size={50}\n            color={\"#0000ff\"}\n            loading={true}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LeaveApplicationHRTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\LeaveApplicationHRFormEdit.jsx",["1352","1353","1354","1355","1356","1357","1358","1359"],"import React, { useState } from \"react\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\n\nconst LeaveApplicationHRForm = (props) => {\n  const [FromDateData, setFromDateData] = useState(\n    props.editData[\"FromDate\"].slice(0, 10)\n  );\n  const [ToDateData, setToDateData] = useState(\n    props.editData[\"ToDate\"].slice(0, 10)\n  );\n  const [ReasonforleaveData, setReasonforleaveData] = useState(\n    props.editData[\"Reasonforleave\"]\n  );\n\n  const handleLeaveApplicationHREditUpdate = (e) => {\n    e.preventDefault();\n    props.onLeaveApplicationHREditUpdate(props.editData, e);\n  };\n\n  return (\n    <div className=\"registration-page py-4\">\n      <h2\n        id=\"role-form-title\"\n        className=\"text-center text-black text-uppercase fw-bold my-4\"\n      >\n        Edit Leave Application Of {props.editData[\"employee\"][0][\"FirstName\"]}{\" \"}\n        {props.editData[\"employee\"][0][\"LastName\"]}\n      </h2>\n      <div id=\"role-form-outer-div\">\n      <Form id=\"form\" onSubmit={handleLeaveApplicationHREditUpdate}>\n          <div className=\"d-flex  flex-column gap-2 rounded \">\n            <div style={{ padding: \"70px\" }} className=\"row \">\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Group as={Row}>\n                  <Form.Label column sm={6}>\n                    Leave Type\n                  </Form.Label>\n                  <Col sm={10} className=\"form-input\">\n                    <Form.Control as=\"select\" required>\n                      <option value=\"\" disabled selected>\n                        Select your option\n                      </option>\n                      <option\n                        value=\"Sick Leave\"\n                        selected={props.editData[\"Leavetype\"] == \"Sick Leave\"}\n                        disabled\n                      >\n                        Sick Leave\n                      </option>\n                      <option\n                        value=\"Casual Leave\"\n                        selected={props.editData[\"Leavetype\"] == \"Casual Leave\"}\n                        disabled\n                      >\n                        Casual Leave\n                      </option>\n                      <option\n                        value=\"Privilege Leave\"\n                        selected={\n                          props.editData[\"Leavetype\"] == \"Privilege Leave\"\n                        }\n                        disabled\n                      >\n                        Privilege Leave\n                      </option>\n                    </Form.Control>\n                  </Col>\n                </Form.Group>\n              </div>\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Group as={Row}>\n                  <Form.Label column sm={6}>\n                    FromDate\n                  </Form.Label>\n                  <Col sm={10} className=\"form-input\">\n                    <Form.Control\n                      type=\"date\"\n                      required\n                      disabled\n                      value={FromDateData}\n                    />\n                  </Col>\n                </Form.Group>\n              </div>\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Group as={Row}>\n                  <Form.Label column sm={6}>\n                    ToDate\n                  </Form.Label>\n                  <Col sm={10} className=\"form-input\">\n                    <Form.Control\n                      type=\"date\"\n                      required\n                      disabled\n                      value={ToDateData}\n                    />\n                  </Col>\n                </Form.Group>\n              </div>\n              <div className=\"form-group col-12 col-md-6\">\n                <Form.Group as={Row}>\n                  <Form.Label column sm={6}>\n                    Leave Status\n                  </Form.Label>\n                  <Col sm={10} className=\"form-input\">\n                    <Form.Control as=\"select\" required>\n                      <option value=\"Pending\" selected disabled>\n                        Pending\n                      </option>\n                      <option\n                        value=\"2\"\n                        selected={props.editData[\"Status\"] == 2}\n                      >\n                        Approve\n                      </option>\n                      <option\n                        value=\"3\"\n                        selected={props.editData[\"Status\"] == 3}\n                      >\n                        Reject\n                      </option>\n                    </Form.Control>\n                  </Col>\n                </Form.Group>\n              </div>\n              <div className=\"form-group col-12\">\n                <Form.Group as={Row}>\n                  <Form.Label column sm={6}>\n                    Reason for leave\n                  </Form.Label>\n                  <Col sm={11} className=\"form-input\">\n                    <Form.Control\n                      as=\"textarea\"\n                      rows={3}\n                      placeholder=\"Reason for leave\"\n                      required\n                      disabled\n                      value={ReasonforleaveData}\n                    />\n                  </Col>\n                </Form.Group>\n              </div>\n              <div\n                className=\"form-group col-12 d-flex  gap-5\"\n                id=\"form-submit-button\"\n              >\n                <Button className=\"mx-3\" type=\"submit\">\n                  Submit\n                </Button>\n                <Button\n                  className=\"mx-3\"\n                  type=\"reset\"\n                  onClick={props.onFormClose}\n                >\n                  cancel\n                </Button>\n              </div>\n              <div\n                className=\"form-group col-12 col-md-6\"\n                id=\"form-cancel-button\"\n              ></div>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default LeaveApplicationHRForm;\n\n// import React, { useState } from \"react\";\n// import { Form, Button, Col, Row } from \"react-bootstrap\";\n\n// const LeaveApplicationHRForm = (props) => {\n//   const [FromDateData, setFromDateData] = useState(\n//     props.editData[\"FromDate\"].slice(0, 10)\n//   );\n//   const [ToDateData, setToDateData] = useState(\n//     props.editData[\"ToDate\"].slice(0, 10)\n//   );\n//   const [ReasonforleaveData, setReasonforleaveData] = useState(\n//     props.editData[\"Reasonforleave\"]\n//   );\n\n//   const handleLeaveApplicationHREditUpdate = (e) => {\n//     e.preventDefault();\n//     props.onLeaveApplicationHREditUpdate(props.editData, e);\n//   };\n\n//   return (\n//     <div className=\"registration-page py-4\">\n//       <h2 id=\"role-form-title\" className=\"text-center text-black text-uppercase fw-bold my-4\">\n//         Edit Leave Application Of {props.editData[\"employee\"][0][\"FirstName\"]}{\" \"}\n//         {props.editData[\"employee\"][0][\"LastName\"]}\n//       </h2>\n\n//       <div id=\"role-form-outer-div\">\n//         <Form id=\"form\" onSubmit={handleLeaveApplicationHREditUpdate}>\n//           <div className=\"d-flex flex-column gap-2 rounded\">\n//             <div style={{ padding: '70px' }} className=\"row\">\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Group as={Row}>\n//                   <Form.Label column sm={6}>\n//                     Leave Type\n//                   </Form.Label>\n//                   <Col sm={10} className=\"form-input\">\n//                     <Form.Control as=\"select\" required disabled>\n//                       <option value=\"\" disabled selected>\n//                         Select your option\n//                       </option>\n//                       <option\n//                         value=\"Sick Leave\"\n//                         selected={props.editData[\"Leavetype\"] === \"Sick Leave\"}\n//                         disabled\n//                       >\n//                         Sick Leave\n//                       </option>\n//                       <option\n//                         value=\"Casual Leave\"\n//                         selected={props.editData[\"Leavetype\"] === \"Casual Leave\"}\n//                         disabled\n//                       >\n//                         Casual Leave\n//                       </option>\n//                       <option\n//                         value=\"Privilege Leave\"\n//                         selected={props.editData[\"Leavetype\"] === \"Privilege Leave\"}\n//                         disabled\n//                       >\n//                         Privilege Leave\n//                       </option>\n//                     </Form.Control>\n//                   </Col>\n//                 </Form.Group>\n//               </div>\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Group as={Row}>\n//                   <Form.Label column sm={6}>\n//                     FromDate\n//                   </Form.Label>\n//                   <Col sm={10} className=\"form-input\">\n//                     <Form.Control type=\"date\" required disabled value={FromDateData} />\n//                   </Col>\n//                 </Form.Group>\n//               </div>\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Group as={Row}>\n//                   <Form.Label column sm={6}>\n//                     ToDate\n//                   </Form.Label>\n//                   <Col sm={10} className=\"form-input\">\n//                     <Form.Control type=\"date\" required disabled value={ToDateData} />\n//                   </Col>\n//                 </Form.Group>\n//               </div>\n//               <div className=\"form-group col-12 col-md-6\">\n//                 <Form.Group as={Row}>\n//                   <Form.Label column sm={6}>\n//                     Leave Status\n//                   </Form.Label>\n//                   <Col sm={10} className=\"form-input\">\n//                     <Form.Control as=\"select\" required >\n//                       <option value=\"Pending\" selected disabled>\n//                         Pending\n//                       </option>\n//                       <option value=\"2\" selected={props.editData[\"Status\"] === 2}>\n//                         Approve\n//                       </option>\n//                       <option value=\"3\" selected={props.editData[\"Status\"] === 3}>\n//                         Reject\n//                       </option>\n//                     </Form.Control>\n//                   </Col>\n//                 </Form.Group>\n//               </div>\n//               <div className=\"form-group col-12\">\n//                 <Form.Group as={Row}>\n//                   <Form.Label column sm={6}>\n//                     Reason for leave\n//                   </Form.Label>\n//                   <Col sm={11} className=\"form-input\">\n//                     <Form.Control\n//                       as=\"textarea\"\n//                       rows={3}\n//                       placeholder=\"Reason for leave\"\n//                       required\n//                       disabled\n//                       value={ReasonforleaveData}\n//                     />\n//                   </Col>\n//                 </Form.Group>\n//               </div>\n//               <div className=\"form-group col-12 d-flex gap-5\" id=\"form-submit-button\">\n//                 <Button className=\"mx-3\" type=\"submit\">\n//                   Submit\n//                 </Button>\n//                 <Button className=\"mx-3\" type=\"reset\" onClick={props.onFormClose}>\n//                   Cancel\n//                 </Button>\n//               </div>\n//             </div>\n//           </div>\n//         </Form>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default LeaveApplicationHRForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminProjectBidForm.jsx",["1360"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./AdminProjectBidForm.css\";\n// import { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\n\nclass AdminProjectBidForm extends Component {\n  state = {\n    status: \"\",\n    portalsInfo: []\n  };\n  portalsData = [];\n  handleChange = (event) => {\n    this.setState({\n      status: event.target.value\n    });\n  };\n  loadPortalsInfo = () => {\n    axios\n      .get(\"http://localhost:4000/api/admin/portal\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        // i\n        this.portalsData = response.data;\n\n        this.portalsData = this.portalsData.filter(\n          (data) => data[\"Status\"] == 1\n        );\n\n        this.setState({ portalsInfo: response.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  componentDidMount() {\n    this.loadPortalsInfo();\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <h2 id=\"role-form-title\">Add Project Bid Details</h2>\n        {/* <div id=\"role-form-outer-div\">\n          <div id=\"role-form-inner-div\"> */}\n\n        <div id=\"role-form-outer-div\">\n          <Form id=\"form\" onSubmit={this.props.onProjectBidSubmit}>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Project Title\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Project Title\"\n                  name=\"ProjectTitle\"\n                  required\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Project URL\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"Text\"\n                  placeholder=\"Project URL\"\n                  name=\"ProjectURL\"\n                  required\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Project Description\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"textarea\" rows=\"3\" required />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Portals\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" name=\"CompanyID\" required>\n                  {this.portalsData.map((data, index) => (\n                    <option value={data[\"_id\"]}>{data[\"PortalName\"]}</option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Estimated Time\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"number\"\n                  placeholder=\"Estimated Time\"\n                  name=\"EstimatedTime\"\n                  required\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Estimated Cost\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control\n                  type=\"number\"\n                  placeholder=\"Estimated Cost\"\n                  name=\"EstimatedCost\"\n                  required\n                />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Resource\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" required>\n                  <option value=\"1\">Resource1</option>\n                  <option value=\"2\">Resource2</option>\n                  <option value=\"3\">Resource3</option>\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Status\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"select\" required>\n                  <option value=\"1\">Open</option>\n                  <option value=\"1\">Close</option>\n                  <option value=\"1\">Cancel</option>\n                  <option value=\"1\">Award</option>\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>\n                Remark\n              </Form.Label>\n              <Col sm={10} className=\"form-input\">\n                <Form.Control as=\"textarea\" rows=\"3\" required />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} id=\"form-submit-button\">\n              <Col sm={{ span: 10, offset: 2 }}>\n                <Button type=\"submit\">Submit</Button>\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} id=\"form-cancel-button\">\n              <Col sm={{ span: 10, offset: 2 }} id=\"form-cancel-button-inner\">\n                <Button type=\"reset\" onClick={this.props.onFormClose}>\n                  cancel\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AdminProjectBidForm;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\AdminProjectBidTable.jsx",["1361"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./AdminProjectBidTable.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport { Button } from \"react-bootstrap\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nclass AdminProjectBidTable extends Component {\n  state = {\n    projectBidData: [],\n    loading: true,\n    rowData: [],\n    sortColumn: null,\n    sortDirection: \"asc\",\n    error: null // New state for handling errors\n  };\n  loadProjectBidData = () => {\n    axios\n      .get(\"http://localhost:4000/api/admin/project-bid\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        const projectBidData = response.data;\n        this.setState({ projectBidData, loading: false, error: null });\n\n        const rowData = projectBidData.map((data) => ({\n          data,\n          ProjectTitle: data[\"ProjectTitle\"],\n          PortalName: data[\"portals\"][0][\"PortalName\"],\n          ProjectURL: data[\"ProjectURL\"],\n          EstimatedTime: data[\"EstimatedTime\"],\n          EstimatedCost: data[\"EstimatedCost\"],\n          Remark: data[\"Remark\"]\n        }));\n\n        this.setState({ rowData });\n      })\n      .catch((error) => {\n        console.log(error);\n        this.setState({ loading: false, error: \"Error loading data.\" });\n      });\n  };\n\n  onProjectBidDelete = (e) => {\n    console.log(e);\n    if (window.confirm(\"Are you sure to delete this record? \") == true) {\n      axios\n        .delete(\"http://localhost:4000/api/admin/project-bid/\" + e, {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\"\n          }\n        })\n        .then((res) => {\n          this.componentDidMount();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n  componentDidMount() {\n    this.loadProjectBidData();\n  }\n  renderButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() => this.onProjectBidDelete(params.data.data[\"_id\"])}\n      />\n    );\n  }\n  renderEditButton(params) {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => this.props.onEditProjectBid(params.data.data)}\n      />\n    );\n  }\n\n  renderSortIcon = (field) => {\n    const { sortColumn, sortDirection } = this.state;\n    if (sortColumn === field) {\n      return sortDirection === \"asc\" ? \"▴\" : \"▾\";\n    }\n    return null;\n  };\n\n  sortData = (columnName) => {\n    const { rowData, sortColumn, sortDirection } = this.state;\n    let newSortDirection = \"asc\";\n\n    if (sortColumn === columnName && sortDirection === \"asc\") {\n      newSortDirection = \"desc\";\n    }\n\n    const sortedData = [...rowData];\n\n    sortedData.sort((a, b) => {\n      const valueA = String(a[columnName]).toLowerCase(); // Convert to lowercase string\n      const valueB = String(b[columnName]).toLowerCase(); // Convert to lowercase string\n\n      let comparison = 0;\n\n      if (valueA > valueB) {\n        comparison = 1;\n      } else if (valueA < valueB) {\n        comparison = -1;\n      }\n\n      return sortDirection === \"desc\" ? comparison * -1 : comparison;\n    });\n\n    this.setState({\n      rowData: sortedData,\n      sortColumn: columnName,\n      sortDirection: newSortDirection\n    });\n  };\n  render() {\n    return (\n      <div className=\"p-4\" id=\"table-outer-div-scroll\">\n        <div className=\"d-flex justify-between aline-items-start mb-3\">\n          <div className=\" my-auto\">\n            <h3 className=\"fw-bold text-muted\">Bidding Details</h3>\n            <p className=\"text-muted\">\n              You can create new bid and view all Bidding details of the\n              companies here !\n            </p>\n          </div>\n\n          <Button\n            className=\"my-auto\"\n            variant=\"primary\"\n            id=\"add-button\"\n            onClick={this.props.onAddProjectBid}\n          >\n            <FontAwesomeIcon icon={faPlus} id=\"plus-icon\" />\n            Add new Details\n          </Button>\n        </div>\n\n        <div id=\"clear-both\" />\n\n        {!this.state.loading ? (\n          <div>\n            <table className=\"table table-striped\">\n              <thead>\n                <tr>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#1D267D, #2F58CD)\",\n                      color: \"white\"\n                    }}\n                    className=\"py-1\"\n                    onClick={() => this.sortData(\"ProjectTitle\")}\n                  >\n                    Project Title {this.renderSortIcon(\"ProjectTitle\")}\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#1D267D, #2F58CD)\",\n                      color: \"white\"\n                    }}\n                    className=\"py-1\"\n                    onClick={() => this.sortData(\"PortalName\")}\n                  >\n                    Portal {this.renderSortIcon(\"PortalName\")}\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#1D267D, #2F58CD)\",\n                      color: \"white\"\n                    }}\n                    className=\"py-1\"\n                    onClick={() => this.sortData(\"ProjectURL\")}\n                  >\n                    Project URL {this.renderSortIcon(\"ProjectURL\")}\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#1D267D, #2F58CD)\",\n                      color: \"white\"\n                    }}\n                    className=\"py-1\"\n                    onClick={() => this.sortData(\"EstimatedTime\")}\n                  >\n                    Estimate Time {this.renderSortIcon(\"EstimatedTime\")}\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#1D267D, #2F58CD)\",\n                      color: \"white\"\n                    }}\n                    className=\"py-1\"\n                    onClick={() => this.sortData(\"EstimatedCost\")}\n                  >\n                    Estimate Cost {this.renderSortIcon(\"EstimatedCost\")}\n                  </th>\n                  <th\n                    style={{\n                      background: \"linear-gradient(#1D267D, #2F58CD)\",\n                      color: \"white\"\n                    }}\n                    className=\"py-1\"\n                    onClick={() => this.sortData(\"Remark\")}\n                  >\n                    Remark {this.renderSortIcon(\"Remark\")}\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.projectBidData.map((items, index) => (\n                  <tr key={index}>\n                    <td className=\"text-uppercase\">{items.ProjectTitle}</td>\n                    <td>{items.portals[0].PortalName}</td>\n                    <td>\n                      <a href={items.ProjectURL}>{items.ProjectURL}</a>\n                    </td>\n                    <td>{items.EstimatedTime}</td>\n                    <td>{items.EstimatedCost}</td>\n                    <td>{items.Remark}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <div id=\"loading-bar\">\n            <RingLoader\n              css={override}\n              sizeUnit={\"px\"}\n              size={50}\n              color={\"#0000ff\"}\n              loading={true}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AdminProjectBidTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Pages\\LeaveCalendar\\Container.jsx",[],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\attendance\\SelfAttendance.jsx",["1362","1363","1364","1365","1366","1367"],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Dashboard\\CountData\\LeavesCount.jsx",["1368","1369","1370","1371","1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389","1390","1391","1392","1393","1394"],"import React, { useState, useEffect } from \"react\";\r\n// import \"./LeaveApplicationHRTable.css\";\r\nimport axios from \"axios\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { RingLoader } from \"react-spinners\";\r\nimport { IoIosArrowDroprightCircle } from \"react-icons/io\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { css } from \"@emotion/core\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Table,\r\n  Dropdown,\r\n  DropdownButton\r\n} from \"react-bootstrap\";\r\n\r\n// *************csv & pdf **************//\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { BsFillFileEarmarkPdfFill } from \"react-icons/bs\";\r\n// *************csv & pdf **************//\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  margin-top: 45px;\r\n  border-color: red;\r\n`;\r\n\r\nconst LeaveApplicationHRTable = (props) => {\r\n  const [leaveApplicationHRData, setLeaveApplicationHRData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchData, setSearchData] = useState(\"\");\r\n  const [totalLeaves, setTotalLeaves] = useState(0);\r\n  const [sortColumn, setSortColumn] = useState(null);\r\n  const [sortDirection, setSortDirection] = useState(\"asc\");\r\n  const [rowData, setRowData] = useState([]);\r\n\r\n  // ...\r\n\r\n  let leaveApplicationHRObj = [];\r\n  let rowDataT = [];\r\n\r\n  const loadLeaveApplicationHRData = () => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/leave-application-hr/\", {\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        leaveApplicationHRObj = response.data;\r\n        console.log(\"response\", response.data);\r\n        setLeaveApplicationHRData(response.data);\r\n        setLoading(false);\r\n\r\n        rowDataT = [];\r\n\r\n        leaveApplicationHRObj.map((data) => {\r\n          let temp = {\r\n            data,\r\n            empID:\r\n              data[\"employee\"] &&\r\n              data[\"employee\"][0] &&\r\n              data[\"employee\"][0][\"empID\"],\r\n            Name:\r\n              data[\"employee\"] &&\r\n              data[\"employee\"][0] &&\r\n              data[\"employee\"][0][\"FirstName\"] +\r\n                \" \" +\r\n                data[\"employee\"][0][\"LastName\"],\r\n            Leavetype: data[\"Leavetype\"],\r\n            FromDate: data[\"FromDate\"].slice(0, 10),\r\n            ToDate: data[\"ToDate\"].slice(0, 10),\r\n            Reasonforleave: data[\"Reasonforleave\"],\r\n            Status: status(data[\"Status\"])\r\n          };\r\n\r\n          rowDataT.push(temp);\r\n        });\r\n\r\n        setRowData(rowDataT);\r\n\r\n        setTotalLeaves(response.data.length);\r\n        props.updateTotalLeaves(response.data.length);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // ...\r\n\r\n  const onLeaveApplicationHRDelete = (e1, e2) => {\r\n    console.log(e1, e2);\r\n    if (window.confirm(\"Are you sure to delete this record? \") == true) {\r\n      axios\r\n        .delete(\r\n          \"http://localhost:4000/api/leave-application-hr/\" + e1 + \"/\" + e2,\r\n          {\r\n            headers: {\r\n              authorization: localStorage.getItem(\"token\") || \"\"\r\n            }\r\n          }\r\n        )\r\n        .then((res) => {\r\n          loadLeaveApplicationHRData();\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const exportToPDF = () => {\r\n    if (window.confirm(\"Are you sure to download Leave record? \")) {\r\n      // Set A4 landscape dimensions\r\n      const pdfWidth = 297; // A4 width in mm\r\n      const pdfHeight = 210; // A4 height in mm\r\n      const doc = new jsPDF({\r\n        orientation: \"landscape\",\r\n        unit: \"mm\",\r\n        format: [pdfWidth, pdfHeight]\r\n      });\r\n\r\n      doc.setFontSize(18);\r\n      doc.text(\"Employee Leave Details\", pdfWidth / 2, 15, \"center\");\r\n      const headers = [\r\n        \"Emp Id\",\r\n        \"Leave Type\",\r\n        \"Start Date\",\r\n        \"End Date\",\r\n        \"Remarks\",\r\n        \"Status\"\r\n      ];\r\n      const data = rowData.map((row) => [\r\n        row.empID,\r\n        row.Leavetype,\r\n        row.FromDate,\r\n        row.ToDate,\r\n        row.Reasonforleave,\r\n        row.Status,\r\n\r\n        \"\" // Action column - you can customize this based on your requirements\r\n      ]);\r\n      doc.setFontSize(12);\r\n      doc.autoTable({\r\n        head: [headers],\r\n        body: data,\r\n        startY: 25\r\n      });\r\n\r\n      doc.save(\"leaveApplication_data.pdf\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadLeaveApplicationHRData();\r\n  }, []);\r\n\r\n  const renderButton = (params) => {\r\n    console.log(params);\r\n    return (\r\n      <FontAwesomeIcon\r\n        icon={faTrash}\r\n        onClick={() =>\r\n          onLeaveApplicationHRDelete(\r\n            params.data.data[\"employee\"][0][\"_id\"],\r\n            params.data.data[\"_id\"]\r\n          )\r\n        }\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderEditButton = (params) => {\r\n    console.log(params);\r\n    return (\r\n      <FontAwesomeIcon\r\n        icon={faEdit}\r\n        onClick={() => props.onEditLeaveApplicationHR(params.data.data)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const status = (s) => {\r\n    if (s == 1) {\r\n      return \"Pending\";\r\n    }\r\n    if (s == 2) {\r\n      return \"Approved\";\r\n    }\r\n    if (s == 3) {\r\n      return \"Rejected\";\r\n    }\r\n    // Add a default case or return a meaningful value for unknown status\r\n    return \"Unknown\";\r\n  };\r\n\r\n  const renderSortIcon = (field) => {\r\n    if (sortColumn === field) {\r\n      return sortDirection === \"asc\" ? \"▴\" : \"▾\";\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const sortData = (columnName) => {\r\n    const newSortDirection =\r\n      sortColumn === columnName && sortDirection === \"asc\" ? \"desc\" : \"asc\";\r\n\r\n    const sortedData = [...rowData];\r\n\r\n    sortedData.sort((a, b) => {\r\n      const valueA = a[columnName];\r\n      const valueB = b[columnName];\r\n\r\n      let comparison = 0;\r\n\r\n      if (valueA > valueB) {\r\n        comparison = 1;\r\n      } else if (valueA < valueB) {\r\n        comparison = -1;\r\n      }\r\n\r\n      return newSortDirection === \"desc\" ? comparison * -1 : comparison;\r\n    });\r\n\r\n    setRowData(sortedData);\r\n    setSortColumn(columnName);\r\n    setSortDirection(newSortDirection);\r\n  };\r\n\r\n  // Calculate the total length for each status\r\n  const pendingLeaves = rowData.filter(\r\n    (data) => data.Status === \"Pending\"\r\n  ).length;\r\n  const approvedLeaves = rowData.filter(\r\n    (data) => data.Status === \"Approved\"\r\n  ).length;\r\n  const rejectedLeaves = rowData.filter(\r\n    (data) => data.Status === \"Rejected\"\r\n  ).length;\r\n\r\n  return (\r\n    // <div className=\"p-4\">\r\n    //   <div className=\"d-flex justify-between\">\r\n    //     <h3 className=\"fw-bold text-muted\">Leave Request ({totalLeaves})</h3>\r\n\r\n    //     <button\r\n    //       className=\"btn px-3 d-flex justify-center aline-center gap-2\"\r\n    //       onClick={exportToPDF}\r\n    //     >\r\n    //       <BsFillFileEarmarkPdfFill className=\"text-danger fs-4\" />\r\n    //       <p className=\"my-auto fs-5 fw-bold\">PDF</p>\r\n    //     </button>\r\n    //   </div>\r\n\r\n    //   <div id=\"clear-both\" />\r\n\r\n    //   <div className=\"mt-3\">\r\n    //     {/* Display the total length for each status */}\r\n    //     <p>Total Pending Leaves: {pendingLeaves}</p>\r\n    //     <p>Total Approved Leaves: {approvedLeaves}</p>\r\n    //     <p>Total Rejected Leaves: {rejectedLeaves}</p>\r\n\r\n    //     {/* Display the table */}\r\n    //     {!loading ? (\r\n    //       <div\r\n    //         style={{\r\n    //           overflow: \"auto\",\r\n    //           height: \"85vh\",\r\n    //           width: \"100%\",\r\n    //           scrollbarWidth: \"thin\"\r\n    //         }}\r\n    //       >\r\n    //         <table className=\"table table-striped\">\r\n    //           <thead>{/* ... (existing code) */}</thead>\r\n    //           <tbody>\r\n    //             {rowData\r\n    //               .filter((e) => e.Status == \"Pending\")\r\n    //               .map((data, index) => (\r\n    //                 <tr key={index}>{/* ... (existing code) */}</tr>\r\n    //               ))}\r\n    //           </tbody>\r\n    //         </table>\r\n    //       </div>\r\n    //     ) : (\r\n    //       <div id=\"loading-bar\">\r\n    //         <RingLoader\r\n    //           css={override}\r\n    //           sizeUnit={\"px\"}\r\n    //           size={50}\r\n    //           color={\"#0000ff\"}\r\n    //           loading={true}\r\n    //         />\r\n    //       </div>\r\n    //     )}\r\n    //   </div>\r\n    // </div>\r\n    <div>\r\n      <div className=\"container-fluid  mt-4\">\r\n        <div className=\"row row-gap-4\">\r\n          <div className=\"col-md-4\">\r\n            <div\r\n              style={{ backgroundColor: \"#FED2AA\" }}\r\n              className=\" DashboardCard position-relative\"\r\n            >\r\n              <div className=\" d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  On Pending Leaves\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {pendingLeaves}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/admin/pendingLeave\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <div\r\n              style={{ backgroundColor: \"#DFFFD8\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  On Approved Leaves{\" \"}\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {approvedLeaves}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/admin/leaveAccepted\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* <div className=\"row row-gap-4\"></div> */}\r\n          <div className=\"col-md-4\">\r\n            <div\r\n              style={{ backgroundColor: \"#FEBBCC\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  On Rejected Leaves\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {rejectedLeaves}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/admin/leaveRejected\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#BCCEF8\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Total Role\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/hr/role\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaveApplicationHRTable;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Dashboard\\CountData\\EmployeeCount.jsx",["1395","1396","1397","1398","1399","1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411"],"import React, { useState, useEffect } from \"react\";\r\n// import \"./EmployeeTable.css\";\r\n\r\nimport axios from \"axios\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTrash,\r\n  faEdit,\r\n  faInfoCircle\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { RingLoader } from \"react-spinners\";\r\nimport { css } from \"@emotion/core\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { IoIosArrowDroprightCircle } from \"react-icons/io\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// *************csv & pdf **************//\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n// import { Link } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { FiSearch } from \"react-icons/fi\";\r\n// *************csv & pdf **************//\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  margin-top: 45px;\r\n  border-color: red;\r\n`;\r\n\r\nconst AdminEmployeeTable = (props) => {\r\n  const [employeeData, setEmployeeData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [rowData, setRowData] = useState([]);\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  const [isIdFilterActive, setIsIdFilterActive] = useState(false);\r\n  const [isIdSortAscending, setIsIdSortAscending] = useState(true);\r\n  const [upcomingBirthdays, setUpcomingBirthdays] = useState([]);\r\n  const [selectedFilter, setSelectedFilter] = useState(\"\");\r\n\r\n  const loadEmployeeData = () => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/employee\", {\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        // Ensure that response.data is an array\r\n        if (Array.isArray(response.data)) {\r\n          setEmployeeData(response.data);\r\n          setLoading(false);\r\n\r\n          // Clear the state arrays\r\n          setRowData([]);\r\n\r\n          response.data.forEach((data) => {\r\n            let temp = {\r\n              data,\r\n              Email: data[\"Email\"],\r\n              Password: data[\"Password\"],\r\n              Account:\r\n                data[\"Account\"] === 1\r\n                  ? \"Admin\"\r\n                  : data[\"Account\"] === 2\r\n                  ? \"HR\"\r\n                  : data[\"Account\"] === 3\r\n                  ? \"Employee\"\r\n                  : data[\"Account\"] === 4\r\n                  ? \"Manager\"\r\n                  : \"\",\r\n\r\n              RoleName: data[\"role\"][0] ? data[\"role\"][0][\"RoleName\"] : \"\",\r\n              FirstName: data[\"FirstName\"],\r\n              MiddleName: data[\"MiddleName\"],\r\n              LastName: data[\"LastName\"],\r\n              DOB: data[\"DOB\"].slice(0, 10),\r\n              ContactNo: data[\"ContactNo\"],\r\n              // EmployeeCode: data[\"EmployeeCode\"],\r\n              empID: data[\"empID\"],\r\n              DepartmentName: data[\"department\"][0]\r\n                ? data[\"department\"][0][\"DepartmentName\"]\r\n                : \"\",\r\n              PositionName: data[\"position\"][0]\r\n                ? data[\"position\"][0][\"PositionName\"]\r\n                : \"\",\r\n              DateOfJoining: data[\"DateOfJoining\"].slice(0, 10)\r\n            };\r\n\r\n            // Use set function to update state\r\n            setRowData((prevData) => [...prevData, temp]);\r\n          });\r\n        } else {\r\n          console.error(\"Data received is not an array:\", response.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const onEmployeeDelete = (e) => {\r\n    if (window.confirm(\"Are you sure to delete this record? \")) {\r\n      axios\r\n        .delete(`http://localhost:4000/api/employee/${e}`, {\r\n          headers: {\r\n            authorization: localStorage.getItem(\"token\") || \"\"\r\n          }\r\n        })\r\n        .then(() => {\r\n          loadEmployeeData();\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const exportToPDF = () => {\r\n    window.confirm(\"Are you sure to download Employee record? \");\r\n    const doc = new jsPDF({\r\n      orientation: \"landscape\",\r\n      unit: \"mm\",\r\n      format: [297, 210]\r\n    });\r\n\r\n    doc.setFontSize(18);\r\n    doc.text(\"Employee Details\", 297 / 2, 15, \"center\");\r\n    const headers = [\r\n      \"Emp Id\",\r\n      \"Email\",\r\n      \"Account Access\",\r\n      \"First Name\",\r\n      \"Last Name\",\r\n      \"DOB\",\r\n      \"ContactNo\",\r\n      \"Role\",\r\n      \"Position\",\r\n      \"Department\",\r\n      \"D.O.J\"\r\n    ];\r\n    const data = rowData.map((row) => [\r\n      row.empID,\r\n      row.Email,\r\n      row.Account,\r\n      row.FirstName,\r\n      row.LastName,\r\n      row.DOB,\r\n      row.ContactNo,\r\n      row.RoleName,\r\n      row.PositionName,\r\n      row.DepartmentName,\r\n      row.DateOfJoining,\r\n      \"\"\r\n    ]);\r\n    doc.setFontSize(12);\r\n    doc.autoTable({\r\n      head: [headers],\r\n      body: data,\r\n      startY: 25\r\n    });\r\n\r\n    doc.save(\"employee_data.pdf \");\r\n  };\r\n\r\n  const renderInfoButton = (params) => {\r\n    if (params.data && params.data.data) {\r\n      return (\r\n        <div>\r\n          <FontAwesomeIcon\r\n            icon={faInfoCircle}\r\n            onClick={() => props.onEmpInfo(params.data.data)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const renderButton = (params) => {\r\n    if (params.data && params.data.data && params.data.data[\"_id\"]) {\r\n      return (\r\n        <FontAwesomeIcon\r\n          icon={faTrash}\r\n          onClick={() => onEmployeeDelete(params.data.data[\"_id\"])}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const renderEditButton = (params) => {\r\n    if (params.data && params.data.data) {\r\n      return (\r\n        <FontAwesomeIcon\r\n          icon={faEdit}\r\n          onClick={() => props.onEditEmployee(params.data.data)}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const getBackgroundColor = (accountType) => {\r\n    switch (accountType) {\r\n      case \"Admin\":\r\n        return \"#8EAC50\";\r\n      case \"HR\":\r\n        return \"#0079FF\";\r\n      case \"Employee\":\r\n        return \"purple\";\r\n      case \"Manager\":\r\n        return \"red\";\r\n      default:\r\n        return \"#FF9B50\";\r\n    }\r\n  };\r\n\r\n  const handleSearchInputChange = (event) => {\r\n    setSearchInput(event.target.value);\r\n  };\r\n\r\n  const handleToggleIdSort = () => {\r\n    setIsIdSortAscending(!isIdSortAscending);\r\n  };\r\n\r\n  const sortById = (a, b) => {\r\n    const idA = a.empID.toLowerCase();\r\n    const idB = b.empID.toLowerCase();\r\n\r\n    if (isIdSortAscending) {\r\n      return idA.localeCompare(idB);\r\n    } else {\r\n      return idB.localeCompare(idA);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployeeData();\r\n  }, []);\r\n\r\n  const calculateUpcomingBirthdays = () => {\r\n    const today = new Date();\r\n    const upcomingBirthdaysData = rowData.filter((employee) => {\r\n      const dob = new Date(employee.DOB);\r\n      dob.setFullYear(today.getFullYear());\r\n\r\n      // Check if the upcoming birthday is within the next 7 days\r\n      const timeDiff = dob - today;\r\n      const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));\r\n      return daysDiff >= 0 && daysDiff <= 7;\r\n    });\r\n\r\n    setUpcomingBirthdays(upcomingBirthdaysData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    calculateUpcomingBirthdays();\r\n  }, [rowData]);\r\n\r\n  let filteredData = rowData.filter((item) => {\r\n    const isMatchingId = isIdFilterActive\r\n      ? item.empID.toLowerCase() === searchInput.toLowerCase()\r\n      : true;\r\n\r\n    const isMatchingFirstName = item.FirstName.toLowerCase().includes(\r\n      searchInput.toLowerCase()\r\n    );\r\n\r\n    return isMatchingId && isMatchingFirstName;\r\n  });\r\n\r\n  filteredData = filteredData.sort(sortById);\r\n\r\n  // Calculate the total length for each status\r\n  const adminCount = filteredData.filter(\r\n    (data) => data.Account === \"Admin\"\r\n  ).length;\r\n  const hrCount = filteredData.filter((data) => data.Account === \"HR\").length;\r\n  const managerCount = filteredData.filter(\r\n    (data) => data.Account === \"Manager\"\r\n  ).length;\r\n  const employeeCount = filteredData.filter(\r\n    (data) => data.Account === \"Employee\"\r\n  ).length;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container-fluid  mt-4\">\r\n        <div className=\"row row-gap-4\">\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#FED2AA\" }}\r\n              className=\" DashboardCard position-relative\"\r\n            >\r\n              <div className=\" d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Total Admins\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {adminCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/admin/user\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#DFFFD8\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Total HR{\" \"}\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {hrCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/admin/user\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* <div className=\"row row-gap-4\"></div> */}\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#FEBBCC\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Total Manager\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {managerCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/admin/user\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-md-3\">\r\n            <div\r\n              style={{ backgroundColor: \"#BCCEF8\" }}\r\n              className=\"DashboardCard position-relative\"\r\n            >\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <p className=\"fw-bold pt-2 text-muted\">\r\n                  Total Employee\r\n                  <span\r\n                    className=\"fw-bolder text-info position-absolute\"\r\n                    style={{ fontSize: \"35px\", right: \"10%\", top: \"4%\" }}\r\n                  >\r\n                    {employeeCount}\r\n                  </span>\r\n                </p>\r\n                <Link\r\n                  className=\"text-decoration-none bg-white px-4  rounded-5 d-flex justify-between py-2  aline-items-center fw-bold text-info  aline-center\"\r\n                  to=\"/admin/user\"\r\n                >\r\n                  <p className=\"my-auto\">More Info</p>{\" \"}\r\n                  <p className=\"my-auto fs-4 d-flex\">\r\n                    <IoIosArrowDroprightCircle />\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-md-9\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminEmployeeTable;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Dashboard\\Chart\\TaskChart.jsx",["1412","1413","1414","1415"],"// import React from \"react\";\r\n// import Chart from \"react-apexcharts\";\r\n// import \"./chart.css\";\r\n// function HrCharts() {\r\n//   const data = {\r\n//     options: {\r\n//       chart: {\r\n//         id: \"area\"\r\n//       },\r\n//       xaxis: {\r\n//         categories: [2020, 2021, 2022, 2023, 2024],\r\n//         labels: {\r\n//           style: {\r\n//             fontSize: \"14px\"\r\n//           }\r\n//         }\r\n//       },\r\n//       yaxis: {\r\n//         labels: {\r\n//           style: {\r\n//             fontSize: \"14px\"\r\n//           }\r\n//         }\r\n//       },\r\n//       dataLabels: {\r\n//         enabled: false\r\n//       },\r\n//       zoom: {\r\n//         enabled: false\r\n//       },\r\n//       stroke: {\r\n//         curve: \"straight\",\r\n//         width: 3,\r\n//         colors: [\"#5932EA\"]\r\n//       },\r\n//       markers: {\r\n//         colors: \"#5932EA\",\r\n//         hover: {\r\n//           size: 6,\r\n//           sizeOffset: 2,\r\n//           colors: \"#5932EA\"\r\n//         }\r\n//       },\r\n//       fill: {\r\n//         type: \"gradient\",\r\n//         colors: \"#5932EA\",\r\n//         gradient: {\r\n//           shadeIntensity: 0,\r\n//           opacityFrom: 1,\r\n//           opacityTo: 0.6,\r\n//           stops: [0, 100]\r\n//         }\r\n//       }\r\n//     },\r\n//     series: [\r\n//       {\r\n//         name: \"series-1\",\r\n//         data: [30, 40, 45, 50, 49, 60, 70, 91]\r\n//       }\r\n//     ]\r\n//   };\r\n\r\n//   const data1 = {\r\n//     series: [\r\n//       {\r\n//         name: \"Total Employee\",\r\n//         data: [30, 45, 57, 50, 65, 58, 63]\r\n//       }\r\n//     ],\r\n//     options: {\r\n//       chart: {\r\n//         type: \"bar\",\r\n//         height: 350\r\n//       },\r\n//       plotOptions: {\r\n//         bar: {\r\n//           horizontal: false,\r\n//           columnWidth: \"40%\",\r\n//           endingShape: \"rounded\"\r\n//         }\r\n//       },\r\n//       dataLabels: {\r\n//         enabled: false\r\n//       },\r\n//       stroke: {\r\n//         show: true,\r\n//         width: 2,\r\n//         colors: [\"transparent\"]\r\n//       },\r\n//       xaxis: {\r\n//         categories: [\r\n//           \"FrontEnd Developer\",\r\n//           \"Backend Developer\",\r\n//           \"Digital Marketing\",\r\n//           \"UI/UX Designer\",\r\n//           \"Graphic Designer\",\r\n//           \"Web Developer\",\r\n//           \"Web Designer\"\r\n//         ]\r\n//       },\r\n//       fill: {\r\n//         opacity: 1,\r\n//         colors: [\"#5932EA\"] // Change bar colors\r\n//       },\r\n//       tooltip: {\r\n//         y: {\r\n//           formatter: function (val) {\r\n//             return \" \" + val + \"\";\r\n//           }\r\n//         },\r\n//         markers: {\r\n//           colors: \"yellow\"\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n//   return (\r\n//     <div className=\"dashboard-table-container\">\r\n//       <div className=\"dashboard-table-left\">\r\n//         <h5>Employee Department</h5>\r\n//         <Chart\r\n//           options={data1.options}\r\n//           type=\"bar\"\r\n//           series={data1.series}\r\n//           height=\"85%\"\r\n//         />\r\n//       </div>\r\n\r\n//       <div className=\"dashboard-table-right\">\r\n//         <h5>Progress Report</h5>\r\n//         <Chart\r\n//           options={data.options}\r\n//           type=\"area\"\r\n//           series={data.series}\r\n//           height=\"85%\"\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default HrCharts;\r\n\r\n// EmployeeChart.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\nconst TaskChart = () => {\r\n  const [departmentData, setDepartmentData] = useState([]);\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const loadEmployeeData = () => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/employee\", {\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        if (Array.isArray(response.data)) {\r\n          setDepartmentData(\r\n            response.data.map(\r\n              (data) => data[\"department\"][0]?.DepartmentName || \"\"\r\n            )\r\n          );\r\n        } else {\r\n          console.error(\"Data received is not an array:\", response.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const loadTaskData = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:4000/api/tasks\");\r\n      setTasks(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching tasks:\", error.message);\r\n      setError(\"Error fetching tasks. Please try again later.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployeeData();\r\n    loadTaskData();\r\n  }, []);\r\n\r\n  const calculateRemainingTime = (endDate) => {\r\n    const now = new Date();\r\n    const endDateTime = new Date(endDate);\r\n    let remainingTime = endDateTime - now;\r\n\r\n    if (remainingTime < 0) {\r\n      // If remaining time is negative, consider it as delay\r\n      remainingTime = Math.abs(remainingTime);\r\n      return { delay: true, days: 0, hours: 0, minutes: 0 };\r\n    } else {\r\n      // Calculate remaining days, hours, minutes, and seconds\r\n      const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\r\n      const hours = Math.floor(\r\n        (remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n      );\r\n      const minutes = Math.floor(\r\n        (remainingTime % (1000 * 60 * 60)) / (1000 * 60)\r\n      );\r\n      return { delay: false, days, hours, minutes };\r\n    }\r\n  };\r\n\r\n  const countLateAndOnTimeTasks = () => {\r\n    const lateTasksCount = tasks.filter(\r\n      (task) =>\r\n        task.status === \"Pending\" && calculateRemainingTime(task.endDate).delay\r\n    ).length;\r\n\r\n    const onTimeTasksCount = tasks.filter(\r\n      (task) =>\r\n        task.status === \"Pending\" && !calculateRemainingTime(task.endDate).delay\r\n    ).length;\r\n\r\n    return { lateTasksCount, onTimeTasksCount };\r\n  };\r\n\r\n  const departmentCounts = {};\r\n  departmentData.forEach((department) => {\r\n    departmentCounts[department] = (departmentCounts[department] || 0) + 1;\r\n  });\r\n\r\n  const taskStatusCounts = {\r\n    Total: tasks.length,\r\n    Assigned: tasks.filter((tasks) => tasks.status === \"Assigned\").length,\r\n    ActiveTask: tasks.filter((task) => task.status === \"Assigned\").length,\r\n    canceled: tasks.filter((task) => task.status === \"Cancelled\").length,\r\n    Completed: tasks.filter((task) => task.status === \"Completed\").length,\r\n    overdue: tasks.filter(\r\n      (task) =>\r\n        task.status === \"Assigned\" && calculateRemainingTime(task.endDate).delay\r\n    ).length,\r\n\r\n    onTime: tasks.filter(\r\n      (task) =>\r\n        task.status === \"Assigned\" &&\r\n        !calculateRemainingTime(task.endDate).delay\r\n    ).length\r\n\r\n    // Rejected: tasks.filter((task) => task.status === \"Rejected\").length,\r\n    // Active: tasks.filter((task) => task.status === \"Pending\").length,\r\n    // Overdue: tasks.filter(\r\n    //   (task) =>\r\n    //     task.status === \"Pending\" && calculateRemainingTime(task.endDate).delay\r\n    // ).length,\r\n    // Ontime: tasks.filter(\r\n    //   (task) =>\r\n    //     task.status === \"Pending\" && !calculateRemainingTime(task.endDate).delay\r\n    // ).length\r\n  };\r\n\r\n  const chartData = {\r\n    series: [\r\n      {\r\n        name: \"Total Employee\",\r\n        data: Object.values(departmentCounts)\r\n      }\r\n    ],\r\n    options: {\r\n      chart: {\r\n        type: \"bar\",\r\n        height: 350\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          horizontal: false,\r\n          columnWidth: \"40%\",\r\n          endingShape: \"rounded\"\r\n        }\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        show: true,\r\n        width: 2,\r\n        colors: [\"transparent\"]\r\n      },\r\n      xaxis: {\r\n        categories: Object.keys(departmentCounts),\r\n        title: {\r\n          text: \"Department Wise Employee\"\r\n        }\r\n      },\r\n      yaxis: {\r\n        title: {\r\n          text: \"Number of Employee\"\r\n        }\r\n      },\r\n\r\n      fill: {\r\n        opacity: 1,\r\n        colors: [\"rgb(100, 150, 200)\"] // Change bar colors\r\n      },\r\n      tooltip: {\r\n        y: {\r\n          formatter: function (val) {\r\n            return \" \" + val + \"\";\r\n          }\r\n        },\r\n        markers: {\r\n          colors: \"yellow\"\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const taskStatusChartData = {\r\n    options: {\r\n      chart: {\r\n        id: \"task-status-chart\",\r\n        type: \"bar\"\r\n      },\r\n      xaxis: {\r\n        categories: Object.keys(taskStatusCounts),\r\n        title: {\r\n          text: \"Task Status\"\r\n        }\r\n      },\r\n      yaxis: {\r\n        title: {\r\n          text: \"Number of Tasks\"\r\n        }\r\n      }\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Task Status\",\r\n        data: Object.values(taskStatusCounts)\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    // <div className=\"dashboard-table-container\">\r\n    //   <div className=\"dashboard-table\">\r\n    //     <h5 style={{ textAlign: \"center\" }} className=\"p-3\">\r\n    //       Task Progress Report\r\n    //     </h5>\r\n    //     <Chart\r\n    //       options={taskStatusChartData.options}\r\n    //       type=\"bar\"\r\n    //       series={taskStatusChartData.series}\r\n    //       height=\"85%\"\r\n    //     />\r\n    //   </div>\r\n    // </div>\r\n    <div className=\"chart_container\">\r\n      <div className=\"chart_heading p-2\">\r\n        <h2>Task Progress Report</h2>\r\n        {/* <select>\r\n        <option>Today</option>\r\n        <option>Tommorrow</option>\r\n      </select> */}\r\n      </div>\r\n      <Chart\r\n        options={taskStatusChartData.options}\r\n        series={taskStatusChartData.series}\r\n        type=\"bar\"\r\n        height=\"85%\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskChart;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\LeaveApplicationHR.jsx",["1416","1417"],"\n\nimport React, { useState, useContext} from \"react\";\nimport axios from \"axios\";\nimport LeaveApplicationHRTable from \"./LeaveApplicationHRTable.jsx\";\nimport LeaveApplicationHRFormEdit from \"./LeaveApplicationHRFormEdit.jsx\";\nimport \"./LeaveApplicationHR.css\";\nimport { AttendanceContext } from \"../../Context/AttendanceContext/AttendanceContext.js\";\n\nimport {v4 as uuid} from \"uuid\";\nconst LeaveApplicationHR = (props) => {\n  const [table, setTable] = useState(true);\n  const [editForm, setEditForm] = useState(false);\n  const [editData, setEditData] = useState({});\n  const {socket} = useContext(AttendanceContext);\n  const email = localStorage.getItem(\"Email\");\n  const handleLeaveApplicationHRSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"id\", event.target[0].value, event.target[1].value);\n    setTable(true);\n\n    let body = {\n      Leavetype: event.target[0].value,\n      FromDate: event.target[1].value,\n      ToDate: event.target[2].value,\n      Status: event.target[3].value,\n      Reasonforleave: event.target[4].value,\n    };\n    axios\n      .post(\n        \"http://localhost:4000/api/leave-application-hr/\" +\n          props.data[\"_id\"],\n        body,\n        {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\",\n          },\n        }\n      )\n      .then((res) => {\n        setTable(false);\n        setTable(true);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const handleAddLeaveApplicationHR = () => {\n    console.log(\"clicked1\");\n    setTable(false);\n  };\n\n  const handleEditLeaveApplicationHR = (e) => {\n    console.log(e);\n    console.log(\"clicked6\");\n    setEditForm(true);\n    setEditData(e);\n    // Assuming setEditFormGender is not used in the rest of your component\n    // setEditFormGender(e[\"Gender\"]);\n  };\n\n  const handleFormClose = () => {\n    console.log(\"clicked1\");\n    setTable(true);\n  };\n\n  const handleEditFormClose = () => {\n    console.log(\"clicked5\");\n    setEditForm(false);\n  };\n\n  const handleLeaveApplicationHREditUpdate = (info, newInfo) => {\n    newInfo.preventDefault();\n    console.log(\"zero data\", newInfo.target[0].value);\n    let body = {\n      Status: newInfo.target[3].value,\n    };\n    console.log(\"update\", info);\n    if(body.Status!==\"Pending\"){\n      axios\n      .put(\n        \"http://localhost:4000/api/leave-application-hr/\" + info[\"_id\"],\n        body,\n        {\n          headers: {\n            authorization: localStorage.getItem(\"token\") || \"\",\n          },\n        }\n      )\n      .then((res) => {\n        setTable(false);\n        setTable(true);\n        const taskId = uuid();\n        let leaveStatus = \"\";\n        if(body.Status===\"2\"){\n          leaveStatus = \"Approved\"\n        }else if(body.Status===\"3\"){\n          leaveStatus = \"Rejected\"\n        }\n        const data = {\n          taskId,\n          employeeEmail:info.employee[0].Email,\n          hrEmail:info.hrEmail,\n          message: `${info.employee[0].Email} Leave request ${leaveStatus} by ${email}`,\n          status: \"unseen\",\n          path: \"leaveApplication\"\n        }\n        console.log(data)\n        socket.emit(\"leaveManagerStatusNotification\", data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    }\n\n\n\n    setEditForm(false);\n  };\n\n  return (\n    <React.Fragment>\n      {table ? (\n        editForm ? (\n          <LeaveApplicationHRFormEdit\n            onLeaveApplicationHREditUpdate={handleLeaveApplicationHREditUpdate}\n            onFormEditClose={handleEditFormClose}\n            editData={editData}\n          />\n        ) : (\n          <LeaveApplicationHRTable\n            onAddLeaveApplicationHR={handleAddLeaveApplicationHR}\n            onEditLeaveApplicationHR={handleEditLeaveApplicationHR}\n            data={props.data}\n          />\n        )\n      ) : (\n        <div></div>\n        // Uncomment the following code if needed\n        // <LeaveApplicationHRForm\n        //   onLeaveApplicationHRSubmit={handleLeaveApplicationHRSubmit}\n        //   onFormClose={handleFormClose}\n        //   onGenderChange={handleAddFormGenderChange}\n        // />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default LeaveApplicationHR;\n\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\LeaveApplicationHRTable.jsx",["1418","1419","1420","1421","1422","1423","1424","1425","1426","1427","1428","1429","1430"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { RingLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport \"./LeaveApplicationHRTable.css\";\nimport {v4 as uuid} from \"uuid\"\n// *************csv & pdf **************//\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { BsFillFileEarmarkPdfFill } from \"react-icons/bs\";\n// *************csv & pdf **************//\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  margin-top: 45px;\n  border-color: red;\n`;\n\nconst LeaveApplicationHRTable = (props) => {\n  const [leaveApplicationHRData, setLeaveApplicationHRData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchData, setSearchData] = useState(\"\");\n  const [totalLeaves, setTotalLeaves] = useState(0);\n  const [sortColumn, setSortColumn] = useState(null);\n  const [sortDirection, setSortDirection] = useState(\"asc\");\n  const [rowData, setRowData] = useState([]);\n  const email = localStorage.getItem(\"Email\");\n\n\n  let leaveApplicationHRObj = [];\n  let rowDataT = [];\n\n  const loadLeaveApplicationHRData = () => {\n    axios\n      .get(\"http://localhost:4000/api/leave-application-hr/\", {\n        headers: {\n          authorization: localStorage.getItem(\"token\") || \"\"\n        }\n      })\n      .then((response) => {\n        leaveApplicationHRObj = response.data;\n        console.log(\"response\", response.data);\n        setLeaveApplicationHRData(response.data);\n        setLoading(false);\n\n        rowDataT = [];\n\n        leaveApplicationHRObj.map((data) => {\n          let temp = {\n            data,\n            empID:\n              data[\"employee\"] &&\n              data[\"employee\"][0] &&\n              data[\"employee\"][0][\"empID\"],\n            Name:\n              data[\"employee\"] &&\n              data[\"employee\"][0] &&\n              data[\"employee\"][0][\"FirstName\"] +\n                \" \" +\n                data[\"employee\"][0][\"LastName\"],\n            Leavetype: data[\"Leavetype\"],\n            FromDate: data[\"FromDate\"].slice(0, 10),\n            managerEmail: data[\"managerEmail\"],\n            ToDate: data[\"ToDate\"].slice(0, 10),\n            Reasonforleave: data[\"Reasonforleave\"],\n            Status: status(data[\"Status\"])\n          };\n\n          rowDataT.push(temp);\n        });\n\n        setRowData(rowDataT);\n        console.log(\"yyyyyyyyyyyyyyyyyyyyy\",rowDataT);\n        setTotalLeaves(response.data.length);\n        props.updateTotalLeaves(response.data.length);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  // ...\n\n  const onLeaveApplicationHRDelete = (e1, e2) => {\n    console.log(e1, e2);\n    if (window.confirm(\"Are you sure to delete this record? \") == true) {\n      axios\n        .delete(\n          \"http://localhost:4000/api/leave-application-hr/\" + e1 + \"/\" + e2,\n          {\n            headers: {\n              authorization: localStorage.getItem(\"token\") || \"\"\n            }\n          }\n        )\n        .then((res) => {\n          loadLeaveApplicationHRData();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const exportToPDF = () => {\n    window.confirm(\"Are you sure to download Leave record? \");\n    const { rowData } = this.state;\n    // Set A4 landscape dimensions\n    const pdfWidth = 297; // A4 width in mm\n    const pdfHeight = 210; // A4 height in mm\n    const doc = new jsPDF({\n      orientation: \"landscape\",\n      unit: \"mm\",\n      format: [pdfWidth, pdfHeight]\n    });\n\n    doc.setFontSize(18);\n    doc.text(\"Employee Leave Details\", pdfWidth / 2, 15, \"center\");\n    const headers = [\n      \"Emp Id\",\n      \"Leave Type\",\n      \"Start Date\",\n      \"End Date\",\n      \"Remarks\",\n      \"Status\"\n    ];\n    const data = rowData.map((row) => [\n      row.empID,\n      row.Leavetype,\n      row.FromDate,\n      row.ToDate,\n      row.Reasonforleave,\n      row.Status,\n\n      \"\" // Action column - you can customize this based on your requirements\n    ]);\n    doc.setFontSize(12);\n    doc.autoTable({\n      head: [headers],\n      body: data,\n      startY: 25\n    });\n\n    doc.save(\"leaveApplication_data.pdf\");\n  };\n\n  useEffect(() => {\n    loadLeaveApplicationHRData();\n  }, []);\n\n  const renderButton = (params) => {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faTrash}\n        onClick={() =>\n          onLeaveApplicationHRDelete(\n            params.data.data[\"employee\"][0][\"_id\"],\n            params.data.data[\"_id\"]\n          )\n        }\n      />\n    );\n  };\n\n  const renderEditButton = (params) => {\n    console.log(params);\n    return (\n      <FontAwesomeIcon\n        icon={faEdit}\n        onClick={() => props.onEditLeaveApplicationHR(params.data.data)}\n      />\n    );\n  };\n\n  const status = (s) => {\n    if (s == 1) {\n      return \"Pending\";\n    }\n    if (s == 2) {\n      return \"Approved\";\n    }\n    if (s == 3) {\n      return \"Rejected\";\n    }\n  };\n\n  const renderSortIcon = (field) => {\n    if (sortColumn === field) {\n      return sortDirection === \"asc\" ? \"▴\" : \"▾\";\n    }\n    return null;\n  };\n\n  const sortData = (columnName) => {\n    const { rowData, sortColumn, sortDirection } = this.state;\n    let newSortDirection = \"asc\";\n\n    if (sortColumn === columnName && sortDirection === \"asc\") {\n      newSortDirection = \"desc\";\n    }\n\n    const sortedData = [...rowData];\n\n    sortedData.sort((a, b) => {\n      const valueA = a[columnName];\n      const valueB = b[columnName];\n\n      let comparison = 0;\n\n      if (valueA > valueB) {\n        comparison = 1;\n      } else if (valueA < valueB) {\n        comparison = -1;\n      }\n\n      return sortDirection === \"desc\" ? comparison * -1 : comparison;\n    });\n\n    setRowData(sortedData);\n    setSortColumn(columnName);\n    setSortDirection(newSortDirection);\n  };\nconsole.log(rowData)\n  return (\n    <div className=\"p-4\">\n      <div className=\"d-flex justify-between\">\n        <h3 className=\"fw-bold text-muted\">Leave Request ({totalLeaves})</h3>\n\n        <button\n          className=\"btn px-3 d-flex justify-center  aline-center gap-2\"\n          onClick={exportToPDF}\n        >\n          <BsFillFileEarmarkPdfFill className=\"text-danger fs-4\" />\n          <p className=\"my-auto fs-5 fw-bold\">PDF</p>\n        </button>\n      </div>\n\n      <div id=\"clear-both\" />\n      {!loading ? (\n        <div\n          className=\"mt-3\"\n          style={{\n            overflow: \"auto\",\n            height: \"85vh\",\n            width: \"100%\",\n            scrollbarWidth: \"thin\"\n          }}\n        >\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"empID\")}\n                >\n                  Employee ID {renderSortIcon(\"empID\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Name\")}\n                >\n                  Emp Name {renderSortIcon(\"Name\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Leavetype\")}\n                >\n                  Leave Type {renderSortIcon(\"Leavetype\")}\n                </th>\n                <th\n                  s\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"FromDate\")}\n                >\n                  Start Date {renderSortIcon(\"FromDate\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"ToDate\")}\n                >\n                  End Date {renderSortIcon(\"ToDate\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Status\")}\n                >\n                  Status {renderSortIcon(\"Status\")}\n                </th>\n                <th\n                  style={{\n                    cursor: \"pointer\",\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\"\n                  }}\n                  onClick={() => sortData(\"Reasonforleave\")}\n                >\n                  Remarks {renderSortIcon(\"Reasonforleave\")}\n                </th>\n                <th\n                  style={{\n                    background: \"linear-gradient(#1D267D, #2F58CD)\",\n                    color: \"white\",\n                    textAlign: \"center\"\n                  }}\n                >\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {rowData.filter((e) => e.Status == \"Pending\" && e.managerEmail===email ).map((data, index) => (\n                <tr key={index}>\n                  <td className=\"text-uppercase py-1\">{data.empID}</td>\n                  <td className=\"py-1\">{data.Name}</td>\n                  <td className=\"py-1\">{data.Leavetype}</td>\n                  <td className=\"py-1\">{data.FromDate}</td>\n                  <td className=\"py-1\">{data.ToDate}</td>\n                  <td className=\"py-1\">{data.Status}</td>\n                  <td className=\"py-1\">{data.Reasonforleave}</td>\n                  <td className=\"py-1\">\n                    <div\n                      className=\"d-flex gap-3 py-2\"\n                      style={{ cursor: \"pointer\" }}\n                    >\n                      <p title=\"Update\" className=\"m-auto text-primary\">\n                        <FontAwesomeIcon\n                          className=\"m-auto\"\n                          icon={faEdit}\n                          onClick={() =>\n                            props.onEditLeaveApplicationHR(data.data)\n                          }\n                        />\n                      </p>\n                      <p title=\"Delete\" className=\"m-auto text-danger\">\n                        <FontAwesomeIcon\n                          className=\"m-auto\"\n                          icon={faTrash}\n                          onClick={() =>\n                            onLeaveApplicationHRDelete(\n                              data.data[\"employee\"][0][\"_id\"],\n                              data.data[\"_id\"]\n                            )\n                          }\n                        />\n                      </p>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <div id=\"loading-bar\">\n          <RingLoader\n            css={override}\n            sizeUnit={\"px\"}\n            size={50}\n            color={\"#0000ff\"}\n            loading={true}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LeaveApplicationHRTable;\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\LeaveApplicationHRFormEdit.jsx",["1431","1432","1433","1434","1435","1436","1437","1438"],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Notification\\Notification.jsx",["1439","1440"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { ImBin } from 'react-icons/im';\r\nimport { AttendanceContext } from '../../../Context/AttendanceContext/AttendanceContext';\r\nimport './notification.css';\r\n\r\nconst Notification = () => {\r\n  const [selectAll, setSelectAll] = useState(false);\r\n  const [selectedNotification, setSelectedNotification] = useState([]);\r\n  const [notification, setNotification] = useState(null);\r\n  const { socket } = useContext(AttendanceContext);\r\n  const id = localStorage.getItem('_id');\r\n  const email = localStorage.getItem('Email');\r\n\r\n  const loadEmployeeData = () => {\r\n    axios\r\n      .get(`http://localhost:4000/api/particularEmployee/${id}`, {\r\n        headers: {\r\n          authorization: localStorage.getItem('token') || '',\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setNotification(response.data.Notification);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\nuseEffect(()=>{\r\n  loadEmployeeData();\r\n},[])\r\n  useEffect(() => {\r\n    \r\n    if (socket) {\r\n      socket.on('taskNotificationReceived', () => {\r\n        loadEmployeeData();\r\n      });\r\n    }\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    // Check if all notifications are selected and update the \"Select All\" checkbox accordingly\r\n    setSelectAll(\r\n      notification && selectedNotification.length === notification.length\r\n    );\r\n  }, [selectedNotification, notification]);\r\n\r\n  const addSelectedNotification = (val) => {\r\n    const isChecked = selectedNotification.some(\r\n      (noti) => noti.taskId === val.taskId\r\n    );\r\n\r\n    if (isChecked) {\r\n      setSelectedNotification((prevNotification) =>\r\n        prevNotification.filter((noti) => noti.taskId !== val.taskId)\r\n      );\r\n    } else {\r\n      setSelectedNotification([...selectedNotification, val]);\r\n    }\r\n  };\r\n\r\n  const toggleSelectAll = () => {\r\n    setSelectAll(!selectAll);\r\n    setSelectedNotification(selectAll ? [] : [...notification]);\r\n  };\r\n  const clearAllHandler = ()=>{\r\n    if(notification.length>0){\r\n      console.log(\"clearALL\")\r\n      axios.post(`http://localhost:4000/api/selectedNotificationDelete`,{email},{\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        console.log(response)\r\n        setNotification(response.data.result.Notification);\r\n        socket.emit(\"notificationPageUpdate\", true)\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      }); \r\n    }\r\n  \r\n   }\r\n  const multiNotificationDeleteHandler = () => {\r\n    if (selectedNotification.length > 0) {\r\n      const taskIDArray = selectedNotification.map((val) => val.taskId);\r\n      const data = {\r\n        employeeMail: email,\r\n        tasks: taskIDArray,\r\n      };\r\nif(selectAll){\r\n\r\n   clearAllHandler()\r\n}else{\r\n \r\n  axios\r\n  .post(\r\n    `http://localhost:4000/api/multiSelectedNotificationDelete`,\r\n    data,\r\n    {\r\n      headers: {\r\n        authorization: localStorage.getItem('token') || '',\r\n      },\r\n    }\r\n  )\r\n  .then((response) => {\r\n    setNotification(response.data.result.Notification);\r\n    setSelectedNotification([])\r\n    console.log(\"emittted\")\r\n    socket.emit(\"notificationPageUpdate\", true)\r\n  })\r\n  .catch((error) => {\r\n    console.log(error);\r\n  });\r\n}\r\n      \r\n    }\r\n  };\r\n  const notificationDeleteHandler = (id)=>{\r\n    console.log(id)\r\n    axios\r\n    .post(`http://localhost:4000/api/notificationDeleteHandler/${id}`, {email},{\r\n      headers: {\r\n        authorization: localStorage.getItem(\"token\") || \"\"\r\n      }\r\n    })\r\n    .then((response) => {\r\n\r\n      setNotification(response.data.result.Notification);\r\n      setSelectedNotification([]) \r\n      console.log(\"emittted\")\r\n      socket.emit(\"notificationPageUpdate\", true)\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\nconsole.log(notification)\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <form className=\"d-flex col-8 flex-column gap-3\">\r\n          <div>\r\n            <div className=\"p-2\">\r\n              {' '}\r\n              <input\r\n                type=\"checkbox\"\r\n                name=\"\"\r\n                id=\"\"\r\n                onChange={toggleSelectAll}\r\n                checked={selectAll}\r\n              />{' '}\r\n              <span>Select All</span>\r\n            </div>\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">Select</th>\r\n                  <th scope=\"col\">task Name</th>\r\n                  <th scope=\"col\">Sender</th>\r\n                  <th scope=\"col\">Status</th>\r\n                  <th scope=\"col\">Action</th>\r\n                </tr>\r\n              </thead>\r\n\r\n              <tbody>\r\n                {notification &&\r\n                  notification.map((val, index) => (\r\n                    <tr key={index}>\r\n                      <th scope=\"row\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          name=\"\"\r\n                          id=\"\"\r\n                          onChange={() => addSelectedNotification(val)}\r\n                          checked={selectedNotification.some(\r\n                            (noti) => noti.taskId === val.taskId\r\n                          )}\r\n                        />\r\n                      </th>\r\n                      <td>{val.taskName}</td>\r\n                      <td>{val.senderMail}</td>\r\n                      {val.status === 'unseen' ? (\r\n                        <td>Unread</td>\r\n                      ) : (\r\n                        <td>read</td>\r\n                      )}\r\n                      <td>\r\n                        <ImBin onClick={()=>notificationDeleteHandler(val.taskId)} className=\"bin\" />\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      <button\r\n        className=\"Notification_delete\"\r\n        onClick={multiNotificationDeleteHandler}\r\n      >\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\Notification\\Notification.jsx",["1441","1442"],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\Notification\\Notification.jsx",["1443","1444"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { ImBin } from 'react-icons/im';\r\nimport { AttendanceContext } from '../../../Context/AttendanceContext/AttendanceContext';\r\nimport './notification.css';\r\n\r\nconst Notification = () => {\r\n  const [selectAll, setSelectAll] = useState(false);\r\n  const [selectedNotification, setSelectedNotification] = useState([]);\r\n  const [notification, setNotification] = useState(null);\r\n  const { socket } = useContext(AttendanceContext);\r\n  const id = localStorage.getItem('_id');\r\n  const email = localStorage.getItem('Email');\r\n\r\n  const loadEmployeeData = () => {\r\n    axios\r\n      .get(`http://localhost:4000/api/particularEmployee/${id}`, {\r\n        headers: {\r\n          authorization: localStorage.getItem('token') || '',\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setNotification(response.data.Notification);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\nuseEffect(()=>{\r\n  loadEmployeeData();\r\n\r\n},[])\r\n  useEffect(() => {\r\n    \r\n    if (socket) {\r\n      socket.on('taskNotificationReceived', () => {\r\n        loadEmployeeData();\r\n      });\r\n    }\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    // Check if all notifications are selected and update the \"Select All\" checkbox accordingly\r\n    setSelectAll(\r\n    notification &&  notification.length>0 && selectedNotification.length === notification.length\r\n    );\r\n  }, [selectedNotification, notification]);\r\n\r\n  const addSelectedNotification = (val) => {\r\n    const isChecked = selectedNotification.some(\r\n      (noti) => noti.taskId === val.taskId\r\n    );\r\n\r\n    if (isChecked) {\r\n      setSelectedNotification((prevNotification) =>\r\n        prevNotification.filter((noti) => noti.taskId !== val.taskId)\r\n      );\r\n    } else {\r\n      setSelectedNotification([...selectedNotification, val]);\r\n    }\r\n  };\r\n\r\n  const toggleSelectAll = () => {\r\n    setSelectAll(!selectAll);\r\n    setSelectedNotification(selectAll ? [] : [...notification]);\r\n  };\r\n  const clearAllHandler = ()=>{\r\n    if(notification.length>0){\r\n      console.log(\"clearALL\")\r\n      axios.post(`http://localhost:4000/api/selectedNotificationDelete`,{email},{\r\n        headers: {\r\n          authorization: localStorage.getItem(\"token\") || \"\"\r\n        }\r\n      })\r\n      .then((response) => {\r\n        console.log(response)\r\n        setNotification(response.data.result.Notification);\r\n        socket.emit(\"notificationPageUpdate\", true)\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      }); \r\n    }\r\n  \r\n   }\r\n  const multiNotificationDeleteHandler = () => {\r\n    if (selectedNotification.length > 0) {\r\n      const taskIDArray = selectedNotification.map((val) => val.taskId);\r\n      const data = {\r\n        employeeMail: email,\r\n        tasks: taskIDArray,\r\n      };\r\nif(selectAll){\r\n\r\n   clearAllHandler()\r\n}else{\r\n \r\n  axios\r\n  .post(\r\n    `http://localhost:4000/api/multiSelectedNotificationDelete`,\r\n    data,\r\n    {\r\n      headers: {\r\n        authorization: localStorage.getItem('token') || '',\r\n      },\r\n    }\r\n  )\r\n  .then((response) => {\r\n    setNotification(response.data.result.Notification);\r\n    setSelectedNotification([])\r\n    console.log(\"emittted\")\r\n    socket.emit(\"notificationPageUpdate\", true)\r\n  })\r\n  .catch((error) => {\r\n    console.log(error);\r\n  });\r\n}\r\n      \r\n    }\r\n  };\r\n  const notificationDeleteHandler = (id)=>{\r\n    console.log(id)\r\n    axios\r\n    .post(`http://localhost:4000/api/notificationDeleteHandler/${id}`, {email},{\r\n      headers: {\r\n        authorization: localStorage.getItem(\"token\") || \"\"\r\n      }\r\n    })\r\n    .then((response) => {\r\n\r\n      setNotification(response.data.result.Notification);\r\n      setSelectedNotification([]) \r\n      console.log(\"emittted\")\r\n      socket.emit(\"notificationPageUpdate\", true)\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\nconsole.log(notification)\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <form className=\"d-flex col-8 flex-column gap-3\">\r\n          <div>\r\n            <div className=\"p-2\">\r\n              {' '}\r\n              <input\r\n                type=\"checkbox\"\r\n                name=\"\"\r\n                id=\"\"\r\n                onChange={toggleSelectAll}\r\n                checked={selectAll}\r\n              />{' '}\r\n              <span>Select All</span>\r\n            </div>\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">Select</th>\r\n                  <th scope=\"col\">task Name</th>\r\n                  <th scope=\"col\">Sender</th>\r\n                  <th scope=\"col\">Status</th>\r\n                  <th scope=\"col\">Action</th>\r\n                </tr>\r\n              </thead>\r\n\r\n              <tbody>\r\n                {notification &&\r\n                  notification.map((val, index) => (\r\n                    <tr key={index}>\r\n                      <th scope=\"row\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          name=\"\"\r\n                          id=\"\"\r\n                          onChange={() => addSelectedNotification(val)}\r\n                          checked={selectedNotification.some(\r\n                            (noti) => noti.taskId === val.taskId\r\n                          )}\r\n                        />\r\n                      </th>\r\n                      <td>{val.taskName}</td>\r\n                      <td>{val.senderMail}</td>\r\n                      {val.status === 'unseen' ? (\r\n                        <td>Unread</td>\r\n                      ) : (\r\n                        <td>read</td>\r\n                      )}\r\n                      <td>\r\n                        <ImBin onClick={()=>notificationDeleteHandler(val.taskId)} className=\"bin\" />\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      <button\r\n        className=\"Notification_delete\"\r\n        onClick={multiNotificationDeleteHandler}\r\n      >\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Notification\\Notification.jsx",["1445","1446"],"C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\HrManager\\Notification\\NoticeBoard.jsx",["1447","1448"],"import React, { useEffect, useState, useContext } from 'react'\r\n\r\nimport { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\r\nimport axios from 'axios';\r\nconst NoticeBoard = () => {\r\n    const [notice, setNotice] = useState([]);\r\n    const {socket} = useContext(AttendanceContext);\r\n    const id = localStorage.getItem(\"_id\");\r\n    const loadEmployeeData = () => {\r\n        axios\r\n          .get(`http://localhost:4000/api/particularEmployee/${id}`, {\r\n            headers: {\r\n              authorization: localStorage.getItem(\"token\") || \"\"\r\n            }\r\n          })\r\n          .then((response) => {\r\n           \r\n            console.log(response.data.Notice)\r\n            setNotice(response.data.Notice)\r\n            \r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      };\r\n      useEffect(()=>{\r\n        loadEmployeeData()\r\n      },[]);\r\n      useEffect(() => {\r\n        console.log('Socket:', socket?.id);\r\n        if (socket) {\r\n          socket.on(\"notice\", (data) => {\r\n           setNotice((prev)=>[data,...prev])\r\n          });\r\n          socket.on(\"noticeDelete\", (data)=>{\r\n            if(data){\r\n                loadEmployeeData() \r\n            }\r\n          })\r\n        }\r\n      }, [socket]);\r\n    const  pdfHandler = (path)=>{\r\n        window.open(\r\n            `http://localhost:4000/${path}`,\r\n            \"_blank\",\r\n            \"noreferrer\"\r\n          );\r\n        // window.open(path, \"_blank\")\r\n    }\r\n console.log(notice)\r\n  return (\r\n    <div className=\"container box-shadow: 0 4px 10px 0 rgb(137 137 137 / 25%); mt-4 \">\r\n      <div className=\"birthday\">\r\n        <h4 className=\"fw-bolder d-flex text-muted gap-0 text-center\">\r\n          Notice Board{\" \"}\r\n          <span className=\"text-primary mx-2\">\r\n            ({notice.length})\r\n          </span>\r\n        </h4>\r\n        <div\r\n          className=\"mainbirth\"\r\n          style={{ maxWidth: \"100%\", overflowX: \"auto\" }}\r\n        >\r\n          {notice.filter((val, i, ar) => ar.findIndex(item => item.noticeId === val.noticeId) === i).length > 0 ? (\r\n            <table className=\"table table-striped mt-3\">\r\n              <thead>\r\n                <tr>\r\n                  \r\n                  <th className='cursor-pointer' style={{ width: \"100%\" }}>Notice</th>\r\n\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {notice.filter((val, i, ar) => ar.findIndex(item => item.noticeId === val.noticeId) === i).map((val) => (\r\n                  <tr key={val.noticeId} style={{cursor: \"pointer\"}} >\r\n                   \r\n                    <td  onClick={()=>pdfHandler(val.attachments)}>{`${val.notice}`}</td>\r\n                   \r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            <p>No Notice</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoticeBoard\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Employee\\Notification\\NoticeBoard.jsx",["1449","1450"],"import React, { useEffect, useState, useContext } from 'react'\r\n\r\nimport { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\r\nimport axios from 'axios';\r\nconst NoticeBoard = () => {\r\n    const [notice, setNotice] = useState([]);\r\n    const {socket} = useContext(AttendanceContext);\r\n    const id = localStorage.getItem(\"_id\");\r\n    const loadEmployeeData = () => {\r\n        axios\r\n          .get(`http://localhost:4000/api/particularEmployee/${id}`, {\r\n            headers: {\r\n              authorization: localStorage.getItem(\"token\") || \"\"\r\n            }\r\n          })\r\n          .then((response) => {\r\n           \r\n            console.log(response.data.Notice)\r\n            setNotice(response.data.Notice)\r\n            \r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      };\r\n      useEffect(()=>{\r\n        loadEmployeeData()\r\n      },[]);\r\n      useEffect(() => {\r\n        console.log('Socket:', socket?.id);\r\n        if (socket) {\r\n          socket.on(\"notice\", (data) => {\r\n           setNotice((prev)=>[data,...prev])\r\n          });\r\n          socket.on(\"noticeDelete\", (data)=>{\r\n            if(data){\r\n                loadEmployeeData() \r\n            }\r\n          })\r\n        }\r\n      }, [socket]);\r\n    const  pdfHandler = (val)=>{\r\n      console.log(val.attachments)\r\n        window.open(\r\n            `http://localhost:4000/${val.attachments}`,\r\n            \"_blank\",\r\n            \"noreferrer\"\r\n          );\r\n        // window.open(path, \"_blank\")\r\n    }\r\n \r\n  return (\r\n    <div className=\"container box-shadow: 0 4px 10px 0 rgb(137 137 137 / 25%); mt-4 \">\r\n      <div className=\"birthday\">\r\n        <h4 className=\"fw-bolder d-flex text-muted gap-0 text-center\">\r\n          Notice Board{\" \"}\r\n          <span className=\"text-primary mx-2\">\r\n            ({notice.filter((val, i, ar) => ar.findIndex(item => item.noticeId === val.noticeId) === i).length})\r\n          </span>\r\n        </h4>\r\n        <div\r\n          className=\"mainbirth\"\r\n          style={{ maxWidth: \"100%\", overflowX: \"auto\" }}\r\n        >\r\n          {notice.length > 0 ? (\r\n            <table className=\"table table-striped mt-3\">\r\n              <thead>\r\n                <tr>\r\n                  \r\n                  <th className='cursor-pointer' style={{ width: \"100%\" }}>Notice</th>\r\n\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {notice.filter((val, i, ar) => ar.findIndex(item => item.noticeId === val.noticeId) === i).map((val) => (\r\n                  <tr key={val.noticeId} style={{cursor: \"pointer\"}} >\r\n                   \r\n                    <td  onClick={()=>pdfHandler(val)}>{`${val.notice}`}</td>\r\n                   \r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            <p>No Notice</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoticeBoard\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Notification\\NoticeBoard.jsx",["1451","1452"],"import React, { useEffect, useState, useContext } from 'react'\r\nimport { TiDeleteOutline } from \"react-icons/ti\";\r\nimport { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\r\nimport axios from 'axios';\r\nconst NoticeBoard = () => {\r\n    const [notice, setNotice] = useState([]);\r\n    const {socket} = useContext(AttendanceContext);\r\n    const id = localStorage.getItem(\"_id\");\r\n    const loadEmployeeData = () => {\r\n        axios\r\n          .get(`http://localhost:4000/api/particularEmployee/${id}`, {\r\n            headers: {\r\n              authorization: localStorage.getItem(\"token\") || \"\"\r\n            }\r\n          })\r\n          .then((response) => {\r\n           \r\n         \r\n            setNotice(response.data.Notice)\r\n            \r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      };\r\n      useEffect(()=>{\r\n        loadEmployeeData()\r\n      },[]);\r\n      useEffect(() => {\r\n        console.log('Socket:', socket?.id);\r\n        if (socket) {\r\n          socket.on(\"notice\", (data) => {\r\n           setNotice((prev)=>[data,...prev])\r\n          });\r\n          socket.on(\"noticeDelete\", (data)=>{\r\n            if(data){\r\n                loadEmployeeData() \r\n            }\r\n          })\r\n        }\r\n      }, [socket]);\r\n    const  pdfHandler = (path)=>{\r\n        window.open(\r\n            `http://localhost:4000/${path}`,\r\n            \"_blank\",\r\n            \"noreferrer\"\r\n          );\r\n        // window.open(path, \"_blank\")\r\n    }\r\n    const deleteHandler=(id)=>{\r\n        axios\r\n          .post(\"http://localhost:4000/api/noticeDelete\", {noticeId:id})\r\n          .then((res) => {\r\n       alert(\"Notice delete\")\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n      \r\n    }\r\n  return (\r\n    <div className=\"container box-shadow: 0 4px 10px 0 rgb(137 137 137 / 25%); mt-4 \">\r\n      <div className=\"birthday\">\r\n        <h4 className=\"fw-bolder d-flex text-muted gap-0 text-center\">\r\n          Notice Board{\" \"}\r\n          <span className=\"text-primary mx-2\">\r\n            ({notice.length})\r\n          </span>\r\n        </h4>\r\n        <div\r\n          className=\"mainbirth\"\r\n          style={{ maxWidth: \"100%\", overflowX: \"auto\" }}\r\n        >\r\n          {notice.length > 0 ? (\r\n            <table className=\"table table-striped mt-3\">\r\n              <thead>\r\n                <tr>\r\n                  \r\n                  <th className='cursor-pointer' style={{ width: \"80%\" }}>Notice</th>\r\n                  <th style={{ width: \"80%\" }}>Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              {notice.filter((val, i, ar) => ar.findIndex(item => item.noticeId === val.noticeId) === i).map((val) => (\r\n  <tr key={val.noticeId} style={{ cursor: \"pointer\" }}>\r\n    <td onClick={() => pdfHandler(val.attachments)}>{`${val.notice}`}</td>\r\n    <td style={{ fontSize: \"22px\", color: \"red\", textAlign: \"center\" }}>\r\n      <TiDeleteOutline onClick={() => deleteHandler(val.noticeId)} />\r\n    </td>\r\n  </tr>\r\n))}\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            <p>No Notice</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoticeBoard\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Manager\\Notification\\NoticeBoard.jsx",["1453","1454"],"import React, { useEffect, useState, useContext } from 'react'\r\n\r\nimport { AttendanceContext } from \"../../../Context/AttendanceContext/AttendanceContext\";\r\nimport axios from 'axios';\r\nconst NoticeBoard = () => {\r\n    const [notice, setNotice] = useState([]);\r\n    const {socket} = useContext(AttendanceContext);\r\n    const id = localStorage.getItem(\"_id\");\r\n    const loadEmployeeData = () => {\r\n        axios\r\n          .get(`http://localhost:4000/api/particularEmployee/${id}`, {\r\n            headers: {\r\n              authorization: localStorage.getItem(\"token\") || \"\"\r\n            }\r\n          })\r\n          .then((response) => {\r\n           \r\n            console.log(response.data.Notice)\r\n            setNotice(response.data.Notice)\r\n            \r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      };\r\n      useEffect(()=>{\r\n        loadEmployeeData()\r\n      },[]);\r\n      useEffect(() => {\r\n        console.log('Socket:', socket?.id);\r\n        if (socket) {\r\n          socket.on(\"notice\", (data) => {\r\n           setNotice((prev)=>[data,...prev])\r\n          });\r\n          socket.on(\"noticeDelete\", (data)=>{\r\n            if(data){\r\n                loadEmployeeData() \r\n            }\r\n          })\r\n        }\r\n      }, [socket]);\r\n    const  pdfHandler = (val)=>{\r\n      console.log(val)\r\n        window.open(\r\n            `http://localhost:4000/${val.attachments}`,\r\n            \"_blank\",\r\n            \"noreferrer\"\r\n          );\r\n        // window.open(path, \"_blank\")\r\n    }\r\n \r\n  return (\r\n    <div className=\"container box-shadow: 0 4px 10px 0 rgb(137 137 137 / 25%); mt-4 \">\r\n      <div className=\"birthday\">\r\n        <h4 className=\"fw-bolder d-flex text-muted gap-0 text-center\">\r\n          Notice Board{\" \"}\r\n          <span className=\"text-primary mx-2\">\r\n            ({notice.filter((val, i, ar) => ar.findIndex(item => item.noticeId === val.noticeId) === i).length})\r\n          </span>\r\n        </h4>\r\n        <div\r\n          className=\"mainbirth\"\r\n          style={{ maxWidth: \"100%\", overflowX: \"auto\" }}\r\n        >\r\n          {notice.filter((val, i, ar) => ar.findIndex(item => item.noticeId === val.noticeId) === i).length > 0 ? (\r\n            <table className=\"table table-striped mt-3\">\r\n              <thead>\r\n                <tr>\r\n                  \r\n                  <th className='cursor-pointer' style={{ width: \"100%\" }}>Notice</th>\r\n\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {notice.filter((val, i, ar) => ar.findIndex(item => item.noticeId === val.noticeId) === i).map((val) => (\r\n                  <tr key={val.noticeId} style={{cursor: \"pointer\"}} >\r\n                   \r\n                    <td  onClick={()=>pdfHandler(val)}>{`${val.notice}`}</td>\r\n                   \r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            <p>No Notice</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoticeBoard\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Notification\\NoticeManagement.jsx",["1455","1456","1457"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Button, Container, Form } from \"react-bootstrap\";\r\nimport {v4 as uuid} from  \"uuid\";\r\n\r\nconst NoticeManagement = () => {\r\n   \r\n\r\n   \r\n    const [newTask, setNewTask] = useState({\r\n        notice: \"\",\r\n        attachments: null,\r\n      });\r\n      const isFormValid = () => {\r\n        return (\r\n          newTask.notice.trim() !== \"\" \r\n        );\r\n      };\r\n   \r\n\r\n    const sendNotice = async () => {\r\n        let formData = new FormData();\r\n        const noticeId = uuid();\r\n        formData.append(\"noticeId\", noticeId)\r\n        formData.append(\"notice\", newTask.notice);\r\n        formData.append(\"file\", newTask.attachments);\r\n        // console.log(newTask);\r\n        // socket.emit('sendNotice', formData);\r\n        axios\r\n          .post(\"http://localhost:4000/api/notice\", formData)\r\n          .then((res) => {\r\n       alert(\"Notice send\")\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n      };\r\n  return (\r\n    <div style={{ zIndex: \"1\" }} className=\"p-4 d-flex flex-column \">\r\n    <form className=\"row p-0 p-md-3 m-auto\">\r\n      <h2 className=\"fw-bold text-muted \"> 🖋️Send new Notice</h2>\r\n      <p className=\"text-muted\">\r\n      Unleash the Power of Notice: Communicate with Impact, Ignite Change!\r\n      </p>\r\n      <div className=\"col-12 mt-5 d-flex flex-column\">\r\n        <Form.Group controlId=\"Taskname\">\r\n          <Form.Label className=\"fw-bold\">Notice</Form.Label>\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            required\r\n            placeholder=\"Notice\"\r\n            value={newTask.notice}\r\n            onChange={(e) =>\r\n              setNewTask({ ...newTask, notice: e.target.value })\r\n            }\r\n          />\r\n        </Form.Group>\r\n      </div>\r\n      <div>\r\n        <Form.Group controlId=\"Attachments\">\r\n          <Form.Label className=\"fw-bold mt-3\">Attachments</Form.Label>\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"file\"\r\n            multiple\r\n            required\r\n            onChange={(e) =>\r\n              setNewTask({ ...newTask, attachments: e.target.files[0] })\r\n            }\r\n          />\r\n        </Form.Group>\r\n      </div>\r\n      <Button\r\n        className=\"mt-4 w-100 fw-bold text-white\"\r\n        variant=\"info\"\r\n        onClick={sendNotice}\r\n        disabled={!isFormValid()}\r\n      >\r\n        Send Notice\r\n      </Button>\r\n    </form>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default NoticeManagement\r\n","C:\\Users\\Admin\\Desktop\\updatecrm1\\frontend\\src\\Component\\Admin\\Chat.jsx",["1458","1459","1460"],"import React from \"react\";\r\nimport \"./chat.css\";\r\nimport UserImage from \"../../img/ChatUser.jpg\";\r\nimport { IoSearchOutline } from \"react-icons/io5\";\r\nimport { PiDotsThreeOutlineFill } from \"react-icons/pi\";\r\nimport { BsThreeDotsVertical } from \"react-icons/bs\";\r\nimport { GoPlus } from \"react-icons/go\";\r\n\r\nimport UserListImg from \"../../img/User2.jpg\";\r\nimport UserListImg2 from \"../../img/User3.jpg\";\r\nimport UserListImg3 from \"../../img/user4.jpg\";\r\n\r\nconst Chat = () => {\r\n  const data = [\r\n    {\r\n      UserListImg: UserListImg,\r\n      UserName: \"Ritika Mandal\",\r\n      Time: \"12:00 AM\",\r\n      LastMessage: \"This is the last message you....\",\r\n    },\r\n    {\r\n      UserListImg: UserListImg2,\r\n      UserName: \"Priyanka Rajput\",\r\n      Time: \"Yesterday\",\r\n      LastMessage: \"This is the last message you....\",\r\n    },\r\n    {\r\n      UserListImg: UserListImg3,\r\n      UserName: \"Priyanka Rajput\",\r\n      Time: \"10:00 AM\",\r\n      LastMessage: \"This is the last message you....\",\r\n    },\r\n    {\r\n      UserListImg: UserListImg,\r\n      UserName: \"Priyanka Rajput\",\r\n      Time: \"9:00 PM\",\r\n      LastMessage: \"This is the last message you....\",\r\n    },\r\n  ];\r\n  return (\r\n    <div className=\"container-fluid max_width\">\r\n    <div className=\"row\">\r\n      <div className=\"col-lg-3 border border-1 m-0 p-0\">\r\n      <div className='chat-container'>\r\n       <div className=\"AllChat_container\">\r\n        <div className=\"user_bar d-flex align-items-center justify-content-between \">\r\n          <div className=\"user_image_controller\">\r\n            <img src={UserImage} alt=\"image\" />\r\n          </div>\r\n          <div className=\"search_member\">\r\n            <input type=\"text\" placeholder=\"search\" />\r\n            <div className=\"search_btn_icon\">\r\n              <IoSearchOutline />\r\n            </div>\r\n          </div>\r\n          <div className=\"options\">\r\n            <GoPlus className=\"add_icon\" />\r\n            <BsThreeDotsVertical />\r\n          </div>\r\n        </div>\r\n        <div className=\"row m-auto my-3 mx-2\">\r\n          <select className=\"py-1\">\r\n            <option value=\"Manager\">Manager</option>\r\n            <option value=\"HR\">HR</option>\r\n            <option value=\"Manager\">Admin</option>\r\n            <option value=\"Manager\">Employee</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"user_list\">\r\n        {data.map((user, index) => (\r\n        <div className=\"user_list my-4 px-2 d-flex\" key={index}>\r\n          <div className=\"user_image_container\">\r\n            <div className=\"user_list_image_controller\">\r\n              <img src={user.UserListImg} alt=\"image\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"name_user_list px-1\">\r\n            <div className=\"namee d-flex justify-content-between \">\r\n              <h6 className=\"m-0 p-0\">{user.UserName}</h6>\r\n\r\n              <p\r\n                className=\"m-0 p-0 px-1\"\r\n                style={{ color: \"grey\", fontSize: \"11px\" }}\r\n              >\r\n                {user.Time}\r\n              </p>\r\n            </div>\r\n            <p className=\"my-1 p-0\" style={{ color: \"grey\", fontSize: \"14px\" }}>\r\n              {user.LastMessage}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n        </div>\r\n      </div>\r\n     \r\n    </div>\r\n      </div>\r\n      <div className=\"col-lg-9 border border-1 m-0 p-0\">col2</div>\r\n    </div>\r\n  </div>\r\n   \r\n  )\r\n}\r\n\r\nexport default Chat\r\n",{"ruleId":"1461","replacedBy":"1462"},{"ruleId":"1463","replacedBy":"1464"},{"ruleId":"1465","severity":1,"message":"1466","line":5,"column":3,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":9},{"ruleId":"1465","severity":1,"message":"1469","line":7,"column":3,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":9},{"ruleId":"1470","severity":1,"message":"1471","line":369,"column":28,"nodeType":"1472","messageId":"1473","endLine":369,"endColumn":30},{"ruleId":"1470","severity":1,"message":"1471","line":371,"column":32,"nodeType":"1472","messageId":"1473","endLine":371,"endColumn":34},{"ruleId":"1470","severity":1,"message":"1471","line":373,"column":32,"nodeType":"1472","messageId":"1473","endLine":373,"endColumn":34},{"ruleId":"1470","severity":1,"message":"1471","line":375,"column":32,"nodeType":"1472","messageId":"1473","endLine":375,"endColumn":34},{"ruleId":"1470","severity":1,"message":"1471","line":385,"column":28,"nodeType":"1472","messageId":"1473","endLine":385,"endColumn":30},{"ruleId":"1470","severity":1,"message":"1471","line":395,"column":28,"nodeType":"1472","messageId":"1473","endLine":395,"endColumn":30},{"ruleId":"1470","severity":1,"message":"1471","line":405,"column":28,"nodeType":"1472","messageId":"1473","endLine":405,"endColumn":30},{"ruleId":"1470","severity":1,"message":"1471","line":415,"column":28,"nodeType":"1472","messageId":"1473","endLine":415,"endColumn":30},{"ruleId":"1465","severity":1,"message":"1474","line":10,"column":7,"nodeType":"1467","messageId":"1468","endLine":10,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1475","line":17,"column":20,"nodeType":"1467","messageId":"1468","endLine":17,"endColumn":31},{"ruleId":"1465","severity":1,"message":"1476","line":19,"column":10,"nodeType":"1467","messageId":"1468","endLine":19,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1477","line":2,"column":27,"nodeType":"1467","messageId":"1468","endLine":2,"endColumn":36},{"ruleId":"1465","severity":1,"message":"1478","line":29,"column":21,"nodeType":"1467","messageId":"1468","endLine":29,"endColumn":33},{"ruleId":"1479","severity":1,"message":"1480","line":53,"column":6,"nodeType":"1481","endLine":53,"endColumn":17,"suggestions":"1482"},{"ruleId":"1465","severity":1,"message":"1483","line":93,"column":13,"nodeType":"1467","messageId":"1468","endLine":93,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1484","line":220,"column":3,"nodeType":"1467","messageId":"1468","endLine":220,"endColumn":10},{"ruleId":"1465","severity":1,"message":"1485","line":222,"column":3,"nodeType":"1467","messageId":"1468","endLine":222,"endColumn":12},{"ruleId":"1465","severity":1,"message":"1486","line":231,"column":10,"nodeType":"1467","messageId":"1468","endLine":231,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1487","line":232,"column":10,"nodeType":"1467","messageId":"1468","endLine":232,"endColumn":23},{"ruleId":"1465","severity":1,"message":"1488","line":235,"column":10,"nodeType":"1467","messageId":"1468","endLine":235,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1489","line":235,"column":23,"nodeType":"1467","messageId":"1468","endLine":235,"endColumn":33},{"ruleId":"1465","severity":1,"message":"1490","line":237,"column":10,"nodeType":"1467","messageId":"1468","endLine":237,"endColumn":26},{"ruleId":"1465","severity":1,"message":"1491","line":3,"column":10,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":23},{"ruleId":"1465","severity":1,"message":"1469","line":3,"column":32,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":38},{"ruleId":"1465","severity":1,"message":"1492","line":25,"column":8,"nodeType":"1467","messageId":"1468","endLine":25,"endColumn":26},{"ruleId":"1465","severity":1,"message":"1491","line":3,"column":10,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":23},{"ruleId":"1465","severity":1,"message":"1469","line":3,"column":32,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":38},{"ruleId":"1465","severity":1,"message":"1493","line":1,"column":8,"nodeType":"1467","messageId":"1468","endLine":1,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1494","line":353,"column":10,"nodeType":"1467","messageId":"1468","endLine":353,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1495","line":21,"column":10,"nodeType":"1467","messageId":"1468","endLine":21,"endColumn":22},{"ruleId":"1479","severity":1,"message":"1496","line":55,"column":5,"nodeType":"1481","endLine":55,"endColumn":7,"suggestions":"1497"},{"ruleId":"1479","severity":1,"message":"1498","line":184,"column":6,"nodeType":"1481","endLine":184,"endColumn":14,"suggestions":"1499"},{"ruleId":"1500","severity":1,"message":"1501","line":222,"column":408,"nodeType":"1502","messageId":"1503","endLine":222,"endColumn":409},{"ruleId":"1465","severity":1,"message":"1486","line":38,"column":10,"nodeType":"1467","messageId":"1468","endLine":38,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1487","line":39,"column":10,"nodeType":"1467","messageId":"1468","endLine":39,"endColumn":23},{"ruleId":"1465","severity":1,"message":"1494","line":40,"column":10,"nodeType":"1467","messageId":"1468","endLine":40,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1504","line":41,"column":10,"nodeType":"1467","messageId":"1468","endLine":41,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1488","line":42,"column":10,"nodeType":"1467","messageId":"1468","endLine":42,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1505","line":42,"column":35,"nodeType":"1467","messageId":"1468","endLine":42,"endColumn":44},{"ruleId":"1465","severity":1,"message":"1506","line":43,"column":10,"nodeType":"1467","messageId":"1468","endLine":43,"endColumn":27},{"ruleId":"1465","severity":1,"message":"1490","line":44,"column":10,"nodeType":"1467","messageId":"1468","endLine":44,"endColumn":26},{"ruleId":"1465","severity":1,"message":"1507","line":45,"column":10,"nodeType":"1467","messageId":"1468","endLine":45,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1508","line":18,"column":8,"nodeType":"1467","messageId":"1468","endLine":18,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1509","line":14,"column":9,"nodeType":"1467","messageId":"1468","endLine":14,"endColumn":39},{"ruleId":"1465","severity":1,"message":"1510","line":59,"column":9,"nodeType":"1467","messageId":"1468","endLine":59,"endColumn":24},{"ruleId":"1465","severity":1,"message":"1511","line":17,"column":10,"nodeType":"1467","messageId":"1468","endLine":17,"endColumn":34},{"ruleId":"1465","severity":1,"message":"1512","line":19,"column":31,"nodeType":"1467","messageId":"1468","endLine":19,"endColumn":40},{"ruleId":"1465","severity":1,"message":"1513","line":20,"column":10,"nodeType":"1467","messageId":"1468","endLine":20,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1514","line":21,"column":10,"nodeType":"1467","messageId":"1468","endLine":21,"endColumn":24},{"ruleId":"1465","severity":1,"message":"1515","line":22,"column":10,"nodeType":"1467","messageId":"1468","endLine":22,"endColumn":24},{"ruleId":"1465","severity":1,"message":"1516","line":25,"column":10,"nodeType":"1467","messageId":"1468","endLine":25,"endColumn":14},{"ruleId":"1465","severity":1,"message":"1517","line":25,"column":16,"nodeType":"1467","messageId":"1468","endLine":25,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1518","line":25,"column":24,"nodeType":"1467","messageId":"1468","endLine":25,"endColumn":27},{"ruleId":"1465","severity":1,"message":"1519","line":25,"column":29,"nodeType":"1467","messageId":"1468","endLine":25,"endColumn":32},{"ruleId":"1465","severity":1,"message":"1520","line":26,"column":10,"nodeType":"1467","messageId":"1468","endLine":26,"endColumn":14},{"ruleId":"1465","severity":1,"message":"1521","line":32,"column":10,"nodeType":"1467","messageId":"1468","endLine":32,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1495","line":43,"column":10,"nodeType":"1467","messageId":"1468","endLine":43,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1522","line":47,"column":28,"nodeType":"1467","messageId":"1468","endLine":47,"endColumn":47},{"ruleId":"1465","severity":1,"message":"1523","line":49,"column":10,"nodeType":"1467","messageId":"1468","endLine":49,"endColumn":27},{"ruleId":"1465","severity":1,"message":"1524","line":178,"column":9,"nodeType":"1467","messageId":"1468","endLine":178,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1525","line":192,"column":9,"nodeType":"1467","messageId":"1468","endLine":192,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1526","line":204,"column":9,"nodeType":"1467","messageId":"1468","endLine":204,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1527","line":216,"column":9,"nodeType":"1467","messageId":"1468","endLine":216,"endColumn":27},{"ruleId":"1479","severity":1,"message":"1528","line":271,"column":6,"nodeType":"1481","endLine":271,"endColumn":15,"suggestions":"1529"},{"ruleId":"1465","severity":1,"message":"1530","line":288,"column":9,"nodeType":"1467","messageId":"1468","endLine":288,"endColumn":17},{"ruleId":"1531","severity":1,"message":"1532","line":507,"column":21,"nodeType":"1533","messageId":"1534","endLine":516,"endColumn":22,"fix":"1535"},{"ruleId":"1531","severity":1,"message":"1532","line":519,"column":21,"nodeType":"1533","messageId":"1534","endLine":528,"endColumn":22,"fix":"1536"},{"ruleId":"1465","severity":1,"message":"1537","line":241,"column":18,"nodeType":"1467","messageId":"1468","endLine":241,"endColumn":27},{"ruleId":"1465","severity":1,"message":"1538","line":249,"column":10,"nodeType":"1467","messageId":"1468","endLine":249,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1539","line":339,"column":11,"nodeType":"1467","messageId":"1468","endLine":339,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1540","line":3,"column":10,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1541","line":14,"column":10,"nodeType":"1467","messageId":"1468","endLine":14,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1542","line":15,"column":10,"nodeType":"1467","messageId":"1468","endLine":15,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1543","line":16,"column":10,"nodeType":"1467","messageId":"1468","endLine":16,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1544","line":176,"column":9,"nodeType":"1467","messageId":"1468","endLine":176,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1542","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1542","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1542","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1545","line":16,"column":5,"nodeType":"1467","messageId":"1468","endLine":16,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1546","line":18,"column":5,"nodeType":"1467","messageId":"1468","endLine":18,"endColumn":17},{"ruleId":"1479","severity":1,"message":"1547","line":44,"column":6,"nodeType":"1481","endLine":44,"endColumn":8,"suggestions":"1548"},{"ruleId":"1479","severity":1,"message":"1549","line":66,"column":6,"nodeType":"1481","endLine":66,"endColumn":8,"suggestions":"1550"},{"ruleId":"1465","severity":1,"message":"1551","line":69,"column":9,"nodeType":"1467","messageId":"1468","endLine":69,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1540","line":3,"column":10,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1552","line":4,"column":10,"nodeType":"1467","messageId":"1468","endLine":4,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1542","line":15,"column":10,"nodeType":"1467","messageId":"1468","endLine":15,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1543","line":16,"column":10,"nodeType":"1467","messageId":"1468","endLine":16,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1553","line":17,"column":10,"nodeType":"1467","messageId":"1468","endLine":17,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1554","line":17,"column":24,"nodeType":"1467","messageId":"1468","endLine":17,"endColumn":39},{"ruleId":"1465","severity":1,"message":"1555","line":100,"column":9,"nodeType":"1467","messageId":"1468","endLine":100,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1477","line":1,"column":27,"nodeType":"1467","messageId":"1468","endLine":1,"endColumn":36},{"ruleId":"1465","severity":1,"message":"1556","line":5,"column":10,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":16},{"ruleId":"1465","severity":1,"message":"1516","line":9,"column":3,"nodeType":"1467","messageId":"1468","endLine":9,"endColumn":7},{"ruleId":"1465","severity":1,"message":"1517","line":10,"column":3,"nodeType":"1467","messageId":"1468","endLine":10,"endColumn":9},{"ruleId":"1465","severity":1,"message":"1518","line":11,"column":3,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":6},{"ruleId":"1465","severity":1,"message":"1519","line":12,"column":3,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":6},{"ruleId":"1465","severity":1,"message":"1557","line":13,"column":3,"nodeType":"1467","messageId":"1468","endLine":13,"endColumn":8},{"ruleId":"1465","severity":1,"message":"1558","line":14,"column":3,"nodeType":"1467","messageId":"1468","endLine":14,"endColumn":11},{"ruleId":"1465","severity":1,"message":"1559","line":15,"column":3,"nodeType":"1467","messageId":"1468","endLine":15,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1560","line":32,"column":10,"nodeType":"1467","messageId":"1468","endLine":32,"endColumn":32},{"ruleId":"1465","severity":1,"message":"1561","line":34,"column":10,"nodeType":"1467","messageId":"1468","endLine":34,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1562","line":34,"column":22,"nodeType":"1467","messageId":"1468","endLine":34,"endColumn":35},{"ruleId":"1465","severity":1,"message":"1563","line":35,"column":10,"nodeType":"1467","messageId":"1468","endLine":35,"endColumn":21},{"ruleId":"1564","severity":1,"message":"1565","line":60,"column":42,"nodeType":"1566","messageId":"1567","endLine":60,"endColumn":44},{"ruleId":"1470","severity":1,"message":"1471","line":97,"column":64,"nodeType":"1472","messageId":"1473","endLine":97,"endColumn":66},{"ruleId":"1479","severity":1,"message":"1568","line":160,"column":6,"nodeType":"1481","endLine":160,"endColumn":8,"suggestions":"1569"},{"ruleId":"1465","severity":1,"message":"1525","line":162,"column":9,"nodeType":"1467","messageId":"1468","endLine":162,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1526","line":177,"column":9,"nodeType":"1467","messageId":"1468","endLine":177,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1471","line":188,"column":11,"nodeType":"1472","messageId":"1473","endLine":188,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":191,"column":11,"nodeType":"1472","messageId":"1473","endLine":191,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":194,"column":11,"nodeType":"1472","messageId":"1473","endLine":194,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":353,"column":41,"nodeType":"1472","messageId":"1473","endLine":353,"endColumn":43},{"ruleId":"1465","severity":1,"message":"1556","line":5,"column":10,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":16},{"ruleId":"1465","severity":1,"message":"1516","line":9,"column":3,"nodeType":"1467","messageId":"1468","endLine":9,"endColumn":7},{"ruleId":"1465","severity":1,"message":"1517","line":10,"column":3,"nodeType":"1467","messageId":"1468","endLine":10,"endColumn":9},{"ruleId":"1465","severity":1,"message":"1518","line":11,"column":3,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":6},{"ruleId":"1465","severity":1,"message":"1519","line":12,"column":3,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":6},{"ruleId":"1465","severity":1,"message":"1557","line":13,"column":3,"nodeType":"1467","messageId":"1468","endLine":13,"endColumn":8},{"ruleId":"1465","severity":1,"message":"1558","line":14,"column":3,"nodeType":"1467","messageId":"1468","endLine":14,"endColumn":11},{"ruleId":"1465","severity":1,"message":"1559","line":15,"column":3,"nodeType":"1467","messageId":"1468","endLine":15,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1560","line":32,"column":10,"nodeType":"1467","messageId":"1468","endLine":32,"endColumn":32},{"ruleId":"1465","severity":1,"message":"1561","line":34,"column":10,"nodeType":"1467","messageId":"1468","endLine":34,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1562","line":34,"column":22,"nodeType":"1467","messageId":"1468","endLine":34,"endColumn":35},{"ruleId":"1465","severity":1,"message":"1563","line":35,"column":10,"nodeType":"1467","messageId":"1468","endLine":35,"endColumn":21},{"ruleId":"1564","severity":1,"message":"1565","line":60,"column":42,"nodeType":"1566","messageId":"1567","endLine":60,"endColumn":44},{"ruleId":"1470","severity":1,"message":"1471","line":97,"column":64,"nodeType":"1472","messageId":"1473","endLine":97,"endColumn":66},{"ruleId":"1479","severity":1,"message":"1568","line":160,"column":6,"nodeType":"1481","endLine":160,"endColumn":8,"suggestions":"1570"},{"ruleId":"1465","severity":1,"message":"1525","line":162,"column":9,"nodeType":"1467","messageId":"1468","endLine":162,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1526","line":177,"column":9,"nodeType":"1467","messageId":"1468","endLine":177,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1471","line":188,"column":11,"nodeType":"1472","messageId":"1473","endLine":188,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":191,"column":11,"nodeType":"1472","messageId":"1473","endLine":191,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":194,"column":11,"nodeType":"1472","messageId":"1473","endLine":194,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":353,"column":41,"nodeType":"1472","messageId":"1473","endLine":353,"endColumn":43},{"ruleId":"1465","severity":1,"message":"1571","line":71,"column":8,"nodeType":"1467","messageId":"1468","endLine":71,"endColumn":19},{"ruleId":"1465","severity":1,"message":"1572","line":72,"column":8,"nodeType":"1467","messageId":"1468","endLine":72,"endColumn":23},{"ruleId":"1465","severity":1,"message":"1555","line":102,"column":9,"nodeType":"1467","messageId":"1468","endLine":102,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1573","line":27,"column":9,"nodeType":"1467","messageId":"1468","endLine":27,"endColumn":14},{"ruleId":"1470","severity":1,"message":"1471","line":98,"column":11,"nodeType":"1472","messageId":"1473","endLine":98,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":101,"column":11,"nodeType":"1472","messageId":"1473","endLine":101,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":104,"column":11,"nodeType":"1472","messageId":"1473","endLine":104,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":107,"column":11,"nodeType":"1472","messageId":"1473","endLine":107,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":110,"column":11,"nodeType":"1472","messageId":"1473","endLine":110,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":113,"column":11,"nodeType":"1472","messageId":"1473","endLine":113,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":116,"column":11,"nodeType":"1472","messageId":"1473","endLine":116,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1542","line":12,"column":10,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":15},{"ruleId":"1574","severity":1,"message":"1575","line":154,"column":7,"nodeType":"1533","endLine":154,"endColumn":54},{"ruleId":"1465","severity":1,"message":"1542","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1542","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1542","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1576","line":8,"column":9,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":14},{"ruleId":"1465","severity":1,"message":"1540","line":662,"column":10,"nodeType":"1467","messageId":"1468","endLine":662,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1577","line":682,"column":32,"nodeType":"1467","messageId":"1468","endLine":682,"endColumn":55},{"ruleId":"1465","severity":1,"message":"1495","line":687,"column":10,"nodeType":"1467","messageId":"1468","endLine":687,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1561","line":688,"column":10,"nodeType":"1467","messageId":"1468","endLine":688,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1562","line":688,"column":22,"nodeType":"1467","messageId":"1468","endLine":688,"endColumn":35},{"ruleId":"1465","severity":1,"message":"1578","line":690,"column":10,"nodeType":"1467","messageId":"1468","endLine":690,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1579","line":690,"column":20,"nodeType":"1467","messageId":"1468","endLine":690,"endColumn":31},{"ruleId":"1465","severity":1,"message":"1580","line":691,"column":10,"nodeType":"1467","messageId":"1468","endLine":691,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1581","line":691,"column":20,"nodeType":"1467","messageId":"1468","endLine":691,"endColumn":31},{"ruleId":"1465","severity":1,"message":"1582","line":692,"column":10,"nodeType":"1467","messageId":"1468","endLine":692,"endColumn":24},{"ruleId":"1465","severity":1,"message":"1545","line":217,"column":5,"nodeType":"1467","messageId":"1468","endLine":217,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1546","line":219,"column":5,"nodeType":"1467","messageId":"1468","endLine":219,"endColumn":17},{"ruleId":"1479","severity":1,"message":"1547","line":245,"column":6,"nodeType":"1481","endLine":245,"endColumn":8,"suggestions":"1583"},{"ruleId":"1479","severity":1,"message":"1549","line":267,"column":6,"nodeType":"1481","endLine":267,"endColumn":8,"suggestions":"1584"},{"ruleId":"1465","severity":1,"message":"1551","line":270,"column":9,"nodeType":"1467","messageId":"1468","endLine":270,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1520","line":3,"column":10,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":14},{"ruleId":"1465","severity":1,"message":"1585","line":4,"column":8,"nodeType":"1467","messageId":"1468","endLine":4,"endColumn":32},{"ruleId":"1465","severity":1,"message":"1586","line":10,"column":8,"nodeType":"1467","messageId":"1468","endLine":10,"endColumn":23},{"ruleId":"1465","severity":1,"message":"1587","line":11,"column":8,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1588","line":13,"column":10,"nodeType":"1467","messageId":"1468","endLine":13,"endColumn":35},{"ruleId":"1465","severity":1,"message":"1589","line":16,"column":10,"nodeType":"1467","messageId":"1468","endLine":16,"endColumn":28},{"ruleId":"1465","severity":1,"message":"1590","line":19,"column":9,"nodeType":"1467","messageId":"1468","endLine":19,"endColumn":33},{"ruleId":"1465","severity":1,"message":"1591","line":4,"column":10,"nodeType":"1467","messageId":"1468","endLine":4,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1592","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":19},{"ruleId":"1465","severity":1,"message":"1593","line":12,"column":10,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1594","line":13,"column":10,"nodeType":"1467","messageId":"1468","endLine":13,"endColumn":24},{"ruleId":"1465","severity":1,"message":"1595","line":24,"column":9,"nodeType":"1467","messageId":"1468","endLine":24,"endColumn":29},{"ruleId":"1465","severity":1,"message":"1596","line":28,"column":9,"nodeType":"1467","messageId":"1468","endLine":28,"endColumn":29},{"ruleId":"1479","severity":1,"message":"1597","line":34,"column":6,"nodeType":"1481","endLine":34,"endColumn":8,"suggestions":"1598"},{"ruleId":"1479","severity":1,"message":"1599","line":75,"column":6,"nodeType":"1481","endLine":75,"endColumn":35,"suggestions":"1600"},{"ruleId":"1465","severity":1,"message":"1555","line":77,"column":9,"nodeType":"1467","messageId":"1468","endLine":77,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1495","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1541","line":8,"column":10,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1601","line":10,"column":10,"nodeType":"1467","messageId":"1468","endLine":10,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1602","line":10,"column":23,"nodeType":"1467","messageId":"1468","endLine":10,"endColumn":37},{"ruleId":"1465","severity":1,"message":"1603","line":11,"column":10,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":26},{"ruleId":"1465","severity":1,"message":"1522","line":11,"column":28,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":47},{"ruleId":"1465","severity":1,"message":"1604","line":12,"column":10,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":27},{"ruleId":"1465","severity":1,"message":"1605","line":12,"column":29,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":49},{"ruleId":"1479","severity":1,"message":"1528","line":94,"column":6,"nodeType":"1481","endLine":94,"endColumn":15,"suggestions":"1606"},{"ruleId":"1465","severity":1,"message":"1541","line":186,"column":10,"nodeType":"1467","messageId":"1468","endLine":186,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1607","line":186,"column":19,"nodeType":"1467","messageId":"1468","endLine":186,"endColumn":29},{"ruleId":"1465","severity":1,"message":"1542","line":187,"column":10,"nodeType":"1467","messageId":"1468","endLine":187,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1608","line":187,"column":17,"nodeType":"1467","messageId":"1468","endLine":187,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1539","line":188,"column":9,"nodeType":"1467","messageId":"1468","endLine":188,"endColumn":11},{"ruleId":"1479","severity":1,"message":"1609","line":299,"column":6,"nodeType":"1481","endLine":299,"endColumn":22,"suggestions":"1610"},{"ruleId":"1465","severity":1,"message":"1545","line":17,"column":5,"nodeType":"1467","messageId":"1468","endLine":17,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1546","line":19,"column":5,"nodeType":"1467","messageId":"1468","endLine":19,"endColumn":17},{"ruleId":"1479","severity":1,"message":"1611","line":43,"column":6,"nodeType":"1481","endLine":43,"endColumn":8,"suggestions":"1612"},{"ruleId":"1479","severity":1,"message":"1549","line":65,"column":6,"nodeType":"1481","endLine":65,"endColumn":8,"suggestions":"1613"},{"ruleId":"1465","severity":1,"message":"1551","line":68,"column":9,"nodeType":"1467","messageId":"1468","endLine":68,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1592","line":8,"column":10,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":19},{"ruleId":"1479","severity":1,"message":"1597","line":34,"column":6,"nodeType":"1481","endLine":34,"endColumn":8,"suggestions":"1614"},{"ruleId":"1479","severity":1,"message":"1599","line":93,"column":6,"nodeType":"1481","endLine":93,"endColumn":8,"suggestions":"1615"},{"ruleId":"1465","severity":1,"message":"1555","line":94,"column":9,"nodeType":"1467","messageId":"1468","endLine":94,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1542","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1542","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1540","line":3,"column":10,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1552","line":4,"column":10,"nodeType":"1467","messageId":"1468","endLine":4,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1616","line":5,"column":10,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":30},{"ruleId":"1465","severity":1,"message":"1617","line":8,"column":10,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1618","line":9,"column":10,"nodeType":"1467","messageId":"1468","endLine":9,"endColumn":23},{"ruleId":"1465","severity":1,"message":"1542","line":14,"column":10,"nodeType":"1467","messageId":"1468","endLine":14,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1543","line":15,"column":10,"nodeType":"1467","messageId":"1468","endLine":15,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1553","line":16,"column":10,"nodeType":"1467","messageId":"1468","endLine":16,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1619","line":17,"column":10,"nodeType":"1467","messageId":"1468","endLine":17,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1620","line":18,"column":10,"nodeType":"1467","messageId":"1468","endLine":18,"endColumn":20},{"ruleId":"1479","severity":1,"message":"1621","line":59,"column":6,"nodeType":"1481","endLine":59,"endColumn":8,"suggestions":"1622"},{"ruleId":"1465","severity":1,"message":"1544","line":61,"column":9,"nodeType":"1467","messageId":"1468","endLine":61,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1623","line":64,"column":9,"nodeType":"1467","messageId":"1468","endLine":64,"endColumn":19},{"ruleId":"1465","severity":1,"message":"1624","line":95,"column":9,"nodeType":"1467","messageId":"1468","endLine":95,"endColumn":19},{"ruleId":"1465","severity":1,"message":"1625","line":120,"column":9,"nodeType":"1467","messageId":"1468","endLine":120,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1626","line":4,"column":10,"nodeType":"1467","messageId":"1468","endLine":4,"endColumn":24},{"ruleId":"1465","severity":1,"message":"1627","line":13,"column":10,"nodeType":"1467","messageId":"1468","endLine":13,"endColumn":19},{"ruleId":"1465","severity":1,"message":"1628","line":13,"column":21,"nodeType":"1467","messageId":"1468","endLine":13,"endColumn":33},{"ruleId":"1465","severity":1,"message":"1629","line":16,"column":9,"nodeType":"1467","messageId":"1468","endLine":16,"endColumn":15},{"ruleId":"1479","severity":1,"message":"1630","line":39,"column":6,"nodeType":"1481","endLine":39,"endColumn":8,"suggestions":"1631"},{"ruleId":"1479","severity":1,"message":"1621","line":80,"column":6,"nodeType":"1481","endLine":80,"endColumn":8,"suggestions":"1632"},{"ruleId":"1564","severity":1,"message":"1633","line":99,"column":63,"nodeType":"1566","messageId":"1634","endLine":99,"endColumn":65},{"ruleId":"1564","severity":1,"message":"1633","line":180,"column":63,"nodeType":"1566","messageId":"1634","endLine":180,"endColumn":65},{"ruleId":"1465","severity":1,"message":"1545","line":216,"column":5,"nodeType":"1467","messageId":"1468","endLine":216,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1546","line":218,"column":5,"nodeType":"1467","messageId":"1468","endLine":218,"endColumn":17},{"ruleId":"1479","severity":1,"message":"1547","line":244,"column":6,"nodeType":"1481","endLine":244,"endColumn":8,"suggestions":"1635"},{"ruleId":"1465","severity":1,"message":"1551","line":270,"column":9,"nodeType":"1467","messageId":"1468","endLine":270,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1471","line":57,"column":35,"nodeType":"1472","messageId":"1473","endLine":57,"endColumn":37},{"ruleId":"1470","severity":1,"message":"1471","line":67,"column":37,"nodeType":"1472","messageId":"1473","endLine":67,"endColumn":39},{"ruleId":"1470","severity":1,"message":"1471","line":62,"column":36,"nodeType":"1472","messageId":"1473","endLine":62,"endColumn":38},{"ruleId":"1470","severity":1,"message":"1471","line":142,"column":65,"nodeType":"1472","messageId":"1473","endLine":142,"endColumn":67},{"ruleId":"1470","severity":1,"message":"1471","line":192,"column":65,"nodeType":"1472","messageId":"1473","endLine":192,"endColumn":67},{"ruleId":"1470","severity":1,"message":"1471","line":198,"column":65,"nodeType":"1472","messageId":"1473","endLine":198,"endColumn":67},{"ruleId":"1470","severity":1,"message":"1471","line":204,"column":65,"nodeType":"1472","messageId":"1473","endLine":204,"endColumn":67},{"ruleId":"1470","severity":1,"message":"1471","line":220,"column":61,"nodeType":"1472","messageId":"1473","endLine":220,"endColumn":63},{"ruleId":"1470","severity":1,"message":"1471","line":226,"column":61,"nodeType":"1472","messageId":"1473","endLine":226,"endColumn":63},{"ruleId":"1470","severity":1,"message":"1471","line":232,"column":61,"nodeType":"1472","messageId":"1473","endLine":232,"endColumn":63},{"ruleId":"1470","severity":1,"message":"1471","line":238,"column":61,"nodeType":"1472","messageId":"1473","endLine":238,"endColumn":63},{"ruleId":"1564","severity":1,"message":"1565","line":40,"column":35,"nodeType":"1566","messageId":"1567","endLine":40,"endColumn":37},{"ruleId":"1470","severity":1,"message":"1471","line":44,"column":36,"nodeType":"1472","messageId":"1473","endLine":44,"endColumn":38},{"ruleId":"1470","severity":1,"message":"1471","line":61,"column":9,"nodeType":"1472","messageId":"1473","endLine":61,"endColumn":11},{"ruleId":"1470","severity":1,"message":"1471","line":100,"column":11,"nodeType":"1472","messageId":"1473","endLine":100,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1542","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1542","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1540","line":662,"column":10,"nodeType":"1467","messageId":"1468","endLine":662,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1577","line":681,"column":32,"nodeType":"1467","messageId":"1468","endLine":681,"endColumn":55},{"ruleId":"1465","severity":1,"message":"1495","line":686,"column":10,"nodeType":"1467","messageId":"1468","endLine":686,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1561","line":687,"column":10,"nodeType":"1467","messageId":"1468","endLine":687,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1562","line":687,"column":22,"nodeType":"1467","messageId":"1468","endLine":687,"endColumn":35},{"ruleId":"1465","severity":1,"message":"1578","line":689,"column":10,"nodeType":"1467","messageId":"1468","endLine":689,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1579","line":689,"column":20,"nodeType":"1467","messageId":"1468","endLine":689,"endColumn":31},{"ruleId":"1465","severity":1,"message":"1580","line":690,"column":10,"nodeType":"1467","messageId":"1468","endLine":690,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1581","line":690,"column":20,"nodeType":"1467","messageId":"1468","endLine":690,"endColumn":31},{"ruleId":"1465","severity":1,"message":"1582","line":691,"column":10,"nodeType":"1467","messageId":"1468","endLine":691,"endColumn":24},{"ruleId":"1465","severity":1,"message":"1636","line":1,"column":38,"nodeType":"1467","messageId":"1468","endLine":1,"endColumn":44},{"ruleId":"1465","severity":1,"message":"1542","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1542","line":334,"column":10,"nodeType":"1467","messageId":"1468","endLine":334,"endColumn":15},{"ruleId":"1574","severity":1,"message":"1575","line":457,"column":7,"nodeType":"1533","endLine":457,"endColumn":54},{"ruleId":"1465","severity":1,"message":"1492","line":8,"column":8,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":26},{"ruleId":"1465","severity":1,"message":"1637","line":4,"column":8,"nodeType":"1467","messageId":"1468","endLine":4,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1637","line":3,"column":8,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1638","line":18,"column":10,"nodeType":"1467","messageId":"1468","endLine":18,"endColumn":33},{"ruleId":"1465","severity":1,"message":"1639","line":21,"column":9,"nodeType":"1467","messageId":"1468","endLine":21,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1640","line":62,"column":9,"nodeType":"1467","messageId":"1468","endLine":62,"endColumn":36},{"ruleId":"1470","severity":1,"message":"1471","line":81,"column":11,"nodeType":"1472","messageId":"1473","endLine":81,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":84,"column":11,"nodeType":"1472","messageId":"1473","endLine":84,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":87,"column":11,"nodeType":"1472","messageId":"1473","endLine":87,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1641","line":93,"column":9,"nodeType":"1467","messageId":"1468","endLine":93,"endColumn":15},{"ruleId":"1479","severity":1,"message":"1642","line":105,"column":6,"nodeType":"1481","endLine":105,"endColumn":8,"suggestions":"1643"},{"ruleId":"1465","severity":1,"message":"1644","line":2,"column":24,"nodeType":"1467","messageId":"1468","endLine":2,"endColumn":30},{"ruleId":"1465","severity":1,"message":"1645","line":2,"column":32,"nodeType":"1467","messageId":"1468","endLine":2,"endColumn":37},{"ruleId":"1465","severity":1,"message":"1520","line":2,"column":39,"nodeType":"1467","messageId":"1468","endLine":2,"endColumn":43},{"ruleId":"1470","severity":1,"message":"1471","line":57,"column":41,"nodeType":"1472","messageId":"1473","endLine":57,"endColumn":43},{"ruleId":"1470","severity":1,"message":"1471","line":63,"column":65,"nodeType":"1472","messageId":"1473","endLine":63,"endColumn":67},{"ruleId":"1470","severity":1,"message":"1471","line":109,"column":64,"nodeType":"1472","messageId":"1473","endLine":109,"endColumn":66},{"ruleId":"1470","severity":1,"message":"1471","line":54,"column":41,"nodeType":"1472","messageId":"1473","endLine":54,"endColumn":43},{"ruleId":"1564","severity":1,"message":"1565","line":43,"column":33,"nodeType":"1566","messageId":"1567","endLine":43,"endColumn":35},{"ruleId":"1470","severity":1,"message":"1471","line":63,"column":65,"nodeType":"1472","messageId":"1473","endLine":63,"endColumn":67},{"ruleId":"1470","severity":1,"message":"1471","line":76,"column":35,"nodeType":"1472","messageId":"1473","endLine":76,"endColumn":37},{"ruleId":"1465","severity":1,"message":"1516","line":2,"column":10,"nodeType":"1467","messageId":"1468","endLine":2,"endColumn":14},{"ruleId":"1465","severity":1,"message":"1517","line":2,"column":16,"nodeType":"1467","messageId":"1468","endLine":2,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1518","line":2,"column":24,"nodeType":"1467","messageId":"1468","endLine":2,"endColumn":27},{"ruleId":"1479","severity":1,"message":"1496","line":30,"column":5,"nodeType":"1481","endLine":30,"endColumn":7,"suggestions":"1646"},{"ruleId":"1465","severity":1,"message":"1638","line":18,"column":10,"nodeType":"1467","messageId":"1468","endLine":18,"endColumn":33},{"ruleId":"1465","severity":1,"message":"1639","line":21,"column":9,"nodeType":"1467","messageId":"1468","endLine":21,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1640","line":61,"column":9,"nodeType":"1467","messageId":"1468","endLine":61,"endColumn":36},{"ruleId":"1470","severity":1,"message":"1471","line":80,"column":11,"nodeType":"1472","messageId":"1473","endLine":80,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":83,"column":11,"nodeType":"1472","messageId":"1473","endLine":83,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":86,"column":11,"nodeType":"1472","messageId":"1473","endLine":86,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1641","line":92,"column":9,"nodeType":"1467","messageId":"1468","endLine":92,"endColumn":15},{"ruleId":"1479","severity":1,"message":"1642","line":104,"column":6,"nodeType":"1481","endLine":104,"endColumn":30,"suggestions":"1647"},{"ruleId":"1465","severity":1,"message":"1637","line":164,"column":8,"nodeType":"1467","messageId":"1468","endLine":164,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1637","line":3,"column":8,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1517","line":4,"column":16,"nodeType":"1467","messageId":"1468","endLine":4,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1648","line":28,"column":9,"nodeType":"1467","messageId":"1468","endLine":28,"endColumn":30},{"ruleId":"1465","severity":1,"message":"1649","line":31,"column":9,"nodeType":"1467","messageId":"1468","endLine":31,"endColumn":31},{"ruleId":"1465","severity":1,"message":"1650","line":34,"column":9,"nodeType":"1467","messageId":"1468","endLine":34,"endColumn":29},{"ruleId":"1470","severity":1,"message":"1471","line":160,"column":47,"nodeType":"1472","messageId":"1473","endLine":160,"endColumn":49},{"ruleId":"1470","severity":1,"message":"1471","line":171,"column":47,"nodeType":"1472","messageId":"1473","endLine":171,"endColumn":49},{"ruleId":"1470","severity":1,"message":"1471","line":296,"column":62,"nodeType":"1472","messageId":"1473","endLine":296,"endColumn":64},{"ruleId":"1470","severity":1,"message":"1471","line":302,"column":62,"nodeType":"1472","messageId":"1473","endLine":302,"endColumn":64},{"ruleId":"1470","severity":1,"message":"1471","line":308,"column":62,"nodeType":"1472","messageId":"1473","endLine":308,"endColumn":64},{"ruleId":"1470","severity":1,"message":"1471","line":314,"column":62,"nodeType":"1472","messageId":"1473","endLine":314,"endColumn":64},{"ruleId":"1470","severity":1,"message":"1471","line":320,"column":62,"nodeType":"1472","messageId":"1473","endLine":320,"endColumn":64},{"ruleId":"1470","severity":1,"message":"1471","line":326,"column":62,"nodeType":"1472","messageId":"1473","endLine":326,"endColumn":64},{"ruleId":"1470","severity":1,"message":"1471","line":332,"column":62,"nodeType":"1472","messageId":"1473","endLine":332,"endColumn":64},{"ruleId":"1470","severity":1,"message":"1471","line":338,"column":62,"nodeType":"1472","messageId":"1473","endLine":338,"endColumn":64},{"ruleId":"1465","severity":1,"message":"1512","line":10,"column":38,"nodeType":"1467","messageId":"1468","endLine":10,"endColumn":47},{"ruleId":"1479","severity":1,"message":"1651","line":92,"column":6,"nodeType":"1481","endLine":92,"endColumn":18,"suggestions":"1652"},{"ruleId":"1465","severity":1,"message":"1653","line":98,"column":9,"nodeType":"1467","messageId":"1468","endLine":98,"endColumn":29},{"ruleId":"1465","severity":1,"message":"1526","line":116,"column":9,"nodeType":"1467","messageId":"1468","endLine":116,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1527","line":127,"column":9,"nodeType":"1467","messageId":"1468","endLine":127,"endColumn":27},{"ruleId":"1531","severity":1,"message":"1532","line":672,"column":25,"nodeType":"1533","messageId":"1534","endLine":677,"endColumn":26,"fix":"1654"},{"ruleId":"1465","severity":1,"message":"1655","line":5,"column":10,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":26},{"ruleId":"1465","severity":1,"message":"1592","line":8,"column":10,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":19},{"ruleId":"1465","severity":1,"message":"1656","line":8,"column":21,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":33},{"ruleId":"1465","severity":1,"message":"1657","line":12,"column":10,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1658","line":12,"column":27,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":45},{"ruleId":"1465","severity":1,"message":"1555","line":98,"column":9,"nodeType":"1467","messageId":"1468","endLine":98,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1659","line":10,"column":9,"nodeType":"1467","messageId":"1468","endLine":10,"endColumn":29},{"ruleId":"1465","severity":1,"message":"1495","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1541","line":8,"column":10,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1601","line":10,"column":10,"nodeType":"1467","messageId":"1468","endLine":10,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1602","line":10,"column":23,"nodeType":"1467","messageId":"1468","endLine":10,"endColumn":37},{"ruleId":"1465","severity":1,"message":"1603","line":11,"column":10,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":26},{"ruleId":"1465","severity":1,"message":"1522","line":11,"column":28,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":47},{"ruleId":"1465","severity":1,"message":"1604","line":12,"column":10,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":27},{"ruleId":"1465","severity":1,"message":"1605","line":12,"column":29,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":49},{"ruleId":"1479","severity":1,"message":"1528","line":94,"column":6,"nodeType":"1481","endLine":94,"endColumn":15,"suggestions":"1660"},{"ruleId":"1465","severity":1,"message":"1541","line":8,"column":10,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1607","line":8,"column":19,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":29},{"ruleId":"1465","severity":1,"message":"1542","line":9,"column":10,"nodeType":"1467","messageId":"1468","endLine":9,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1608","line":9,"column":17,"nodeType":"1467","messageId":"1468","endLine":9,"endColumn":25},{"ruleId":"1479","severity":1,"message":"1609","line":87,"column":6,"nodeType":"1481","endLine":87,"endColumn":22,"suggestions":"1661"},{"ruleId":"1465","severity":1,"message":"1541","line":10,"column":10,"nodeType":"1467","messageId":"1468","endLine":10,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1542","line":11,"column":10,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1662","line":116,"column":9,"nodeType":"1467","messageId":"1468","endLine":116,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1663","line":11,"column":10,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1521","line":22,"column":10,"nodeType":"1467","messageId":"1468","endLine":22,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1474","line":25,"column":7,"nodeType":"1467","messageId":"1468","endLine":25,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1495","line":33,"column":10,"nodeType":"1467","messageId":"1468","endLine":33,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1541","line":34,"column":10,"nodeType":"1467","messageId":"1468","endLine":34,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1522","line":37,"column":28,"nodeType":"1467","messageId":"1468","endLine":37,"endColumn":47},{"ruleId":"1465","severity":1,"message":"1523","line":39,"column":10,"nodeType":"1467","messageId":"1468","endLine":39,"endColumn":27},{"ruleId":"1465","severity":1,"message":"1664","line":40,"column":10,"nodeType":"1467","messageId":"1468","endLine":40,"endColumn":24},{"ruleId":"1465","severity":1,"message":"1665","line":40,"column":26,"nodeType":"1467","messageId":"1468","endLine":40,"endColumn":43},{"ruleId":"1465","severity":1,"message":"1666","line":120,"column":9,"nodeType":"1467","messageId":"1468","endLine":120,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1524","line":167,"column":9,"nodeType":"1467","messageId":"1468","endLine":167,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1525","line":181,"column":9,"nodeType":"1467","messageId":"1468","endLine":181,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1526","line":193,"column":9,"nodeType":"1467","messageId":"1468","endLine":193,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1527","line":205,"column":9,"nodeType":"1467","messageId":"1468","endLine":205,"endColumn":27},{"ruleId":"1465","severity":1,"message":"1667","line":220,"column":9,"nodeType":"1467","messageId":"1468","endLine":220,"endColumn":32},{"ruleId":"1465","severity":1,"message":"1668","line":224,"column":9,"nodeType":"1467","messageId":"1468","endLine":224,"endColumn":27},{"ruleId":"1479","severity":1,"message":"1528","line":260,"column":6,"nodeType":"1481","endLine":260,"endColumn":15,"suggestions":"1669"},{"ruleId":"1465","severity":1,"message":"1556","line":5,"column":10,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":16},{"ruleId":"1465","severity":1,"message":"1663","line":6,"column":10,"nodeType":"1467","messageId":"1468","endLine":6,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1516","line":12,"column":3,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":7},{"ruleId":"1465","severity":1,"message":"1517","line":13,"column":3,"nodeType":"1467","messageId":"1468","endLine":13,"endColumn":9},{"ruleId":"1465","severity":1,"message":"1518","line":14,"column":3,"nodeType":"1467","messageId":"1468","endLine":14,"endColumn":6},{"ruleId":"1465","severity":1,"message":"1519","line":15,"column":3,"nodeType":"1467","messageId":"1468","endLine":15,"endColumn":6},{"ruleId":"1465","severity":1,"message":"1557","line":16,"column":3,"nodeType":"1467","messageId":"1468","endLine":16,"endColumn":8},{"ruleId":"1465","severity":1,"message":"1558","line":17,"column":3,"nodeType":"1467","messageId":"1468","endLine":17,"endColumn":11},{"ruleId":"1465","severity":1,"message":"1559","line":18,"column":3,"nodeType":"1467","messageId":"1468","endLine":18,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1511","line":24,"column":10,"nodeType":"1467","messageId":"1468","endLine":24,"endColumn":34},{"ruleId":"1465","severity":1,"message":"1474","line":27,"column":7,"nodeType":"1467","messageId":"1468","endLine":27,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1560","line":35,"column":10,"nodeType":"1467","messageId":"1468","endLine":35,"endColumn":32},{"ruleId":"1465","severity":1,"message":"1541","line":36,"column":10,"nodeType":"1467","messageId":"1468","endLine":36,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1561","line":37,"column":10,"nodeType":"1467","messageId":"1468","endLine":37,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1562","line":37,"column":22,"nodeType":"1467","messageId":"1468","endLine":37,"endColumn":35},{"ruleId":"1465","severity":1,"message":"1563","line":38,"column":10,"nodeType":"1467","messageId":"1468","endLine":38,"endColumn":21},{"ruleId":"1564","severity":1,"message":"1565","line":63,"column":42,"nodeType":"1566","messageId":"1567","endLine":63,"endColumn":44},{"ruleId":"1470","severity":1,"message":"1471","line":100,"column":64,"nodeType":"1472","messageId":"1473","endLine":100,"endColumn":66},{"ruleId":"1465","severity":1,"message":"1666","line":119,"column":9,"nodeType":"1467","messageId":"1468","endLine":119,"endColumn":20},{"ruleId":"1479","severity":1,"message":"1568","line":163,"column":6,"nodeType":"1481","endLine":163,"endColumn":8,"suggestions":"1670"},{"ruleId":"1465","severity":1,"message":"1525","line":165,"column":9,"nodeType":"1467","messageId":"1468","endLine":165,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1526","line":180,"column":9,"nodeType":"1467","messageId":"1468","endLine":180,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1471","line":191,"column":11,"nodeType":"1472","messageId":"1473","endLine":191,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":194,"column":11,"nodeType":"1472","messageId":"1473","endLine":194,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":197,"column":11,"nodeType":"1472","messageId":"1473","endLine":197,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1671","line":204,"column":9,"nodeType":"1467","messageId":"1468","endLine":204,"endColumn":23},{"ruleId":"1465","severity":1,"message":"1672","line":211,"column":9,"nodeType":"1467","messageId":"1468","endLine":211,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1655","line":5,"column":10,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":26},{"ruleId":"1465","severity":1,"message":"1592","line":8,"column":10,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":19},{"ruleId":"1465","severity":1,"message":"1656","line":8,"column":21,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":33},{"ruleId":"1465","severity":1,"message":"1657","line":12,"column":10,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1658","line":12,"column":27,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":45},{"ruleId":"1465","severity":1,"message":"1555","line":98,"column":9,"nodeType":"1467","messageId":"1468","endLine":98,"endColumn":25},{"ruleId":"1479","severity":1,"message":"1549","line":268,"column":6,"nodeType":"1481","endLine":268,"endColumn":25,"suggestions":"1673"},{"ruleId":"1479","severity":1,"message":"1674","line":268,"column":7,"nodeType":"1675","endLine":268,"endColumn":24},{"ruleId":"1465","severity":1,"message":"1525","line":288,"column":9,"nodeType":"1467","messageId":"1468","endLine":288,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1526","line":303,"column":9,"nodeType":"1467","messageId":"1468","endLine":303,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1541","line":153,"column":10,"nodeType":"1467","messageId":"1468","endLine":153,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1542","line":154,"column":10,"nodeType":"1467","messageId":"1468","endLine":154,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1676","line":218,"column":9,"nodeType":"1467","messageId":"1468","endLine":218,"endColumn":32},{"ruleId":"1465","severity":1,"message":"1662","line":253,"column":9,"nodeType":"1467","messageId":"1468","endLine":253,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1541","line":8,"column":10,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1607","line":8,"column":19,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":29},{"ruleId":"1465","severity":1,"message":"1542","line":9,"column":10,"nodeType":"1467","messageId":"1468","endLine":9,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1608","line":9,"column":17,"nodeType":"1467","messageId":"1468","endLine":9,"endColumn":25},{"ruleId":"1479","severity":1,"message":"1609","line":87,"column":6,"nodeType":"1481","endLine":87,"endColumn":22,"suggestions":"1677"},{"ruleId":"1465","severity":1,"message":"1556","line":5,"column":10,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":16},{"ruleId":"1465","severity":1,"message":"1663","line":6,"column":10,"nodeType":"1467","messageId":"1468","endLine":6,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1516","line":12,"column":3,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":7},{"ruleId":"1465","severity":1,"message":"1517","line":13,"column":3,"nodeType":"1467","messageId":"1468","endLine":13,"endColumn":9},{"ruleId":"1465","severity":1,"message":"1518","line":14,"column":3,"nodeType":"1467","messageId":"1468","endLine":14,"endColumn":6},{"ruleId":"1465","severity":1,"message":"1519","line":15,"column":3,"nodeType":"1467","messageId":"1468","endLine":15,"endColumn":6},{"ruleId":"1465","severity":1,"message":"1557","line":16,"column":3,"nodeType":"1467","messageId":"1468","endLine":16,"endColumn":8},{"ruleId":"1465","severity":1,"message":"1558","line":17,"column":3,"nodeType":"1467","messageId":"1468","endLine":17,"endColumn":11},{"ruleId":"1465","severity":1,"message":"1559","line":18,"column":3,"nodeType":"1467","messageId":"1468","endLine":18,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1511","line":24,"column":10,"nodeType":"1467","messageId":"1468","endLine":24,"endColumn":34},{"ruleId":"1465","severity":1,"message":"1474","line":27,"column":7,"nodeType":"1467","messageId":"1468","endLine":27,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1560","line":35,"column":10,"nodeType":"1467","messageId":"1468","endLine":35,"endColumn":32},{"ruleId":"1465","severity":1,"message":"1541","line":36,"column":10,"nodeType":"1467","messageId":"1468","endLine":36,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1561","line":37,"column":10,"nodeType":"1467","messageId":"1468","endLine":37,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1562","line":37,"column":22,"nodeType":"1467","messageId":"1468","endLine":37,"endColumn":35},{"ruleId":"1465","severity":1,"message":"1563","line":38,"column":10,"nodeType":"1467","messageId":"1468","endLine":38,"endColumn":21},{"ruleId":"1564","severity":1,"message":"1565","line":63,"column":42,"nodeType":"1566","messageId":"1567","endLine":63,"endColumn":44},{"ruleId":"1470","severity":1,"message":"1471","line":100,"column":64,"nodeType":"1472","messageId":"1473","endLine":100,"endColumn":66},{"ruleId":"1465","severity":1,"message":"1666","line":119,"column":9,"nodeType":"1467","messageId":"1468","endLine":119,"endColumn":20},{"ruleId":"1479","severity":1,"message":"1568","line":163,"column":6,"nodeType":"1481","endLine":163,"endColumn":8,"suggestions":"1678"},{"ruleId":"1465","severity":1,"message":"1525","line":165,"column":9,"nodeType":"1467","messageId":"1468","endLine":165,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1526","line":180,"column":9,"nodeType":"1467","messageId":"1468","endLine":180,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1471","line":191,"column":11,"nodeType":"1472","messageId":"1473","endLine":191,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":194,"column":11,"nodeType":"1472","messageId":"1473","endLine":194,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":197,"column":11,"nodeType":"1472","messageId":"1473","endLine":197,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1671","line":204,"column":9,"nodeType":"1467","messageId":"1468","endLine":204,"endColumn":23},{"ruleId":"1465","severity":1,"message":"1672","line":211,"column":9,"nodeType":"1467","messageId":"1468","endLine":211,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1663","line":11,"column":10,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1521","line":22,"column":10,"nodeType":"1467","messageId":"1468","endLine":22,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1474","line":25,"column":7,"nodeType":"1467","messageId":"1468","endLine":25,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1495","line":33,"column":10,"nodeType":"1467","messageId":"1468","endLine":33,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1541","line":34,"column":10,"nodeType":"1467","messageId":"1468","endLine":34,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1522","line":37,"column":28,"nodeType":"1467","messageId":"1468","endLine":37,"endColumn":47},{"ruleId":"1465","severity":1,"message":"1523","line":39,"column":10,"nodeType":"1467","messageId":"1468","endLine":39,"endColumn":27},{"ruleId":"1465","severity":1,"message":"1664","line":40,"column":10,"nodeType":"1467","messageId":"1468","endLine":40,"endColumn":24},{"ruleId":"1465","severity":1,"message":"1665","line":40,"column":26,"nodeType":"1467","messageId":"1468","endLine":40,"endColumn":43},{"ruleId":"1465","severity":1,"message":"1666","line":120,"column":9,"nodeType":"1467","messageId":"1468","endLine":120,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1524","line":167,"column":9,"nodeType":"1467","messageId":"1468","endLine":167,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1525","line":181,"column":9,"nodeType":"1467","messageId":"1468","endLine":181,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1526","line":193,"column":9,"nodeType":"1467","messageId":"1468","endLine":193,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1527","line":205,"column":9,"nodeType":"1467","messageId":"1468","endLine":205,"endColumn":27},{"ruleId":"1465","severity":1,"message":"1667","line":220,"column":9,"nodeType":"1467","messageId":"1468","endLine":220,"endColumn":32},{"ruleId":"1465","severity":1,"message":"1668","line":224,"column":9,"nodeType":"1467","messageId":"1468","endLine":224,"endColumn":27},{"ruleId":"1479","severity":1,"message":"1528","line":260,"column":6,"nodeType":"1481","endLine":260,"endColumn":15,"suggestions":"1679"},{"ruleId":"1465","severity":1,"message":"1637","line":78,"column":8,"nodeType":"1467","messageId":"1468","endLine":78,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1637","line":124,"column":8,"nodeType":"1467","messageId":"1468","endLine":124,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1680","line":260,"column":10,"nodeType":"1467","messageId":"1468","endLine":260,"endColumn":24},{"ruleId":"1479","severity":1,"message":"1681","line":312,"column":6,"nodeType":"1481","endLine":312,"endColumn":8,"suggestions":"1682"},{"ruleId":"1465","severity":1,"message":"1525","line":314,"column":9,"nodeType":"1467","messageId":"1468","endLine":314,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1526","line":329,"column":9,"nodeType":"1467","messageId":"1468","endLine":329,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1637","line":5,"column":8,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1637","line":71,"column":8,"nodeType":"1467","messageId":"1468","endLine":71,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1512","line":198,"column":10,"nodeType":"1467","messageId":"1468","endLine":198,"endColumn":19},{"ruleId":"1465","severity":1,"message":"1683","line":209,"column":10,"nodeType":"1467","messageId":"1468","endLine":209,"endColumn":28},{"ruleId":"1564","severity":1,"message":"1565","line":230,"column":53,"nodeType":"1566","messageId":"1567","endLine":230,"endColumn":55},{"ruleId":"1479","severity":1,"message":"1684","line":268,"column":6,"nodeType":"1481","endLine":268,"endColumn":8,"suggestions":"1685"},{"ruleId":"1465","severity":1,"message":"1525","line":271,"column":9,"nodeType":"1467","messageId":"1468","endLine":271,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1526","line":287,"column":9,"nodeType":"1467","messageId":"1468","endLine":287,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1471","line":114,"column":43,"nodeType":"1472","messageId":"1473","endLine":114,"endColumn":45},{"ruleId":"1470","severity":1,"message":"1471","line":122,"column":41,"nodeType":"1472","messageId":"1473","endLine":122,"endColumn":43},{"ruleId":"1470","severity":1,"message":"1471","line":69,"column":41,"nodeType":"1472","messageId":"1473","endLine":69,"endColumn":43},{"ruleId":"1470","severity":1,"message":"1471","line":79,"column":39,"nodeType":"1472","messageId":"1473","endLine":79,"endColumn":41},{"ruleId":"1564","severity":1,"message":"1565","line":39,"column":36,"nodeType":"1566","messageId":"1567","endLine":39,"endColumn":38},{"ruleId":"1470","severity":1,"message":"1471","line":70,"column":64,"nodeType":"1472","messageId":"1473","endLine":70,"endColumn":66},{"ruleId":"1470","severity":1,"message":"1471","line":57,"column":66,"nodeType":"1472","messageId":"1473","endLine":57,"endColumn":68},{"ruleId":"1564","severity":1,"message":"1565","line":46,"column":34,"nodeType":"1566","messageId":"1567","endLine":46,"endColumn":36},{"ruleId":"1470","severity":1,"message":"1471","line":65,"column":65,"nodeType":"1472","messageId":"1473","endLine":65,"endColumn":67},{"ruleId":"1470","severity":1,"message":"1471","line":78,"column":35,"nodeType":"1472","messageId":"1473","endLine":78,"endColumn":37},{"ruleId":"1465","severity":1,"message":"1644","line":2,"column":24,"nodeType":"1467","messageId":"1468","endLine":2,"endColumn":30},{"ruleId":"1465","severity":1,"message":"1645","line":2,"column":32,"nodeType":"1467","messageId":"1468","endLine":2,"endColumn":37},{"ruleId":"1465","severity":1,"message":"1520","line":2,"column":39,"nodeType":"1467","messageId":"1468","endLine":2,"endColumn":43},{"ruleId":"1465","severity":1,"message":"1644","line":2,"column":24,"nodeType":"1467","messageId":"1468","endLine":2,"endColumn":30},{"ruleId":"1465","severity":1,"message":"1645","line":2,"column":32,"nodeType":"1467","messageId":"1468","endLine":2,"endColumn":37},{"ruleId":"1465","severity":1,"message":"1520","line":2,"column":39,"nodeType":"1467","messageId":"1468","endLine":2,"endColumn":43},{"ruleId":"1465","severity":1,"message":"1512","line":9,"column":10,"nodeType":"1467","messageId":"1468","endLine":9,"endColumn":19},{"ruleId":"1465","severity":1,"message":"1686","line":11,"column":10,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":21},{"ruleId":"1564","severity":1,"message":"1565","line":83,"column":36,"nodeType":"1566","messageId":"1567","endLine":83,"endColumn":38},{"ruleId":"1470","severity":1,"message":"1471","line":101,"column":65,"nodeType":"1472","messageId":"1473","endLine":101,"endColumn":67},{"ruleId":"1470","severity":1,"message":"1471","line":114,"column":35,"nodeType":"1472","messageId":"1473","endLine":114,"endColumn":37},{"ruleId":"1465","severity":1,"message":"1687","line":23,"column":10,"nodeType":"1467","messageId":"1468","endLine":23,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1688","line":24,"column":10,"nodeType":"1467","messageId":"1468","endLine":24,"endColumn":26},{"ruleId":"1465","severity":1,"message":"1689","line":105,"column":9,"nodeType":"1467","messageId":"1468","endLine":105,"endColumn":33},{"ruleId":"1465","severity":1,"message":"1690","line":122,"column":9,"nodeType":"1467","messageId":"1468","endLine":122,"endColumn":28},{"ruleId":"1465","severity":1,"message":"1691","line":130,"column":9,"nodeType":"1467","messageId":"1468","endLine":130,"endColumn":21},{"ruleId":"1470","severity":1,"message":"1471","line":192,"column":75,"nodeType":"1472","messageId":"1473","endLine":192,"endColumn":77},{"ruleId":"1470","severity":1,"message":"1471","line":195,"column":75,"nodeType":"1472","messageId":"1473","endLine":195,"endColumn":77},{"ruleId":"1470","severity":1,"message":"1471","line":198,"column":75,"nodeType":"1472","messageId":"1473","endLine":198,"endColumn":77},{"ruleId":"1470","severity":1,"message":"1471","line":201,"column":75,"nodeType":"1472","messageId":"1473","endLine":201,"endColumn":77},{"ruleId":"1470","severity":1,"message":"1471","line":222,"column":60,"nodeType":"1472","messageId":"1473","endLine":222,"endColumn":62},{"ruleId":"1470","severity":1,"message":"1471","line":243,"column":41,"nodeType":"1472","messageId":"1473","endLine":243,"endColumn":43},{"ruleId":"1470","severity":1,"message":"1471","line":253,"column":41,"nodeType":"1472","messageId":"1473","endLine":253,"endColumn":43},{"ruleId":"1470","severity":1,"message":"1471","line":358,"column":66,"nodeType":"1472","messageId":"1473","endLine":358,"endColumn":68},{"ruleId":"1470","severity":1,"message":"1471","line":382,"column":64,"nodeType":"1472","messageId":"1473","endLine":382,"endColumn":66},{"ruleId":"1465","severity":1,"message":"1518","line":3,"column":18,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1644","line":4,"column":24,"nodeType":"1467","messageId":"1468","endLine":4,"endColumn":30},{"ruleId":"1465","severity":1,"message":"1645","line":4,"column":32,"nodeType":"1467","messageId":"1468","endLine":4,"endColumn":37},{"ruleId":"1470","severity":1,"message":"1471","line":68,"column":66,"nodeType":"1472","messageId":"1473","endLine":68,"endColumn":68},{"ruleId":"1465","severity":1,"message":"1663","line":6,"column":10,"nodeType":"1467","messageId":"1468","endLine":6,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1692","line":7,"column":10,"nodeType":"1467","messageId":"1468","endLine":7,"endColumn":13},{"ruleId":"1564","severity":1,"message":"1565","line":32,"column":39,"nodeType":"1566","messageId":"1567","endLine":32,"endColumn":41},{"ruleId":"1470","severity":1,"message":"1471","line":50,"column":65,"nodeType":"1472","messageId":"1473","endLine":50,"endColumn":67},{"ruleId":"1470","severity":1,"message":"1471","line":63,"column":35,"nodeType":"1472","messageId":"1473","endLine":63,"endColumn":37},{"ruleId":"1465","severity":1,"message":"1644","line":3,"column":24,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":30},{"ruleId":"1465","severity":1,"message":"1645","line":3,"column":32,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":37},{"ruleId":"1465","severity":1,"message":"1520","line":3,"column":39,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":43},{"ruleId":"1470","severity":1,"message":"1471","line":73,"column":66,"nodeType":"1472","messageId":"1473","endLine":73,"endColumn":68},{"ruleId":"1465","severity":1,"message":"1517","line":5,"column":16,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1663","line":6,"column":10,"nodeType":"1467","messageId":"1468","endLine":6,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1516","line":10,"column":3,"nodeType":"1467","messageId":"1468","endLine":10,"endColumn":7},{"ruleId":"1465","severity":1,"message":"1518","line":12,"column":3,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":6},{"ruleId":"1465","severity":1,"message":"1519","line":13,"column":3,"nodeType":"1467","messageId":"1468","endLine":13,"endColumn":6},{"ruleId":"1465","severity":1,"message":"1558","line":15,"column":3,"nodeType":"1467","messageId":"1468","endLine":15,"endColumn":11},{"ruleId":"1465","severity":1,"message":"1559","line":16,"column":3,"nodeType":"1467","messageId":"1468","endLine":16,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1686","line":19,"column":10,"nodeType":"1467","messageId":"1468","endLine":19,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1474","line":23,"column":7,"nodeType":"1467","messageId":"1468","endLine":23,"endColumn":15},{"ruleId":"1564","severity":1,"message":"1565","line":58,"column":37,"nodeType":"1566","messageId":"1567","endLine":58,"endColumn":39},{"ruleId":"1470","severity":1,"message":"1471","line":77,"column":65,"nodeType":"1472","messageId":"1473","endLine":77,"endColumn":67},{"ruleId":"1470","severity":1,"message":"1471","line":90,"column":35,"nodeType":"1472","messageId":"1473","endLine":90,"endColumn":37},{"ruleId":"1465","severity":1,"message":"1541","line":8,"column":10,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1542","line":9,"column":10,"nodeType":"1467","messageId":"1468","endLine":9,"endColumn":15},{"ruleId":"1479","severity":1,"message":"1630","line":32,"column":6,"nodeType":"1481","endLine":32,"endColumn":8,"suggestions":"1693"},{"ruleId":"1479","severity":1,"message":"1621","line":73,"column":6,"nodeType":"1481","endLine":73,"endColumn":8,"suggestions":"1694"},{"ruleId":"1465","severity":1,"message":"1695","line":136,"column":9,"nodeType":"1467","messageId":"1468","endLine":136,"endColumn":32},{"ruleId":"1470","severity":1,"message":"1471","line":62,"column":66,"nodeType":"1472","messageId":"1473","endLine":62,"endColumn":68},{"ruleId":"1465","severity":1,"message":"1588","line":3,"column":10,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":35},{"ruleId":"1465","severity":1,"message":"1520","line":4,"column":10,"nodeType":"1467","messageId":"1468","endLine":4,"endColumn":14},{"ruleId":"1465","severity":1,"message":"1541","line":11,"column":10,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1542","line":12,"column":10,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":15},{"ruleId":"1479","severity":1,"message":"1630","line":35,"column":6,"nodeType":"1481","endLine":35,"endColumn":8,"suggestions":"1696"},{"ruleId":"1479","severity":1,"message":"1621","line":74,"column":6,"nodeType":"1481","endLine":74,"endColumn":8,"suggestions":"1697"},{"ruleId":"1465","severity":1,"message":"1695","line":137,"column":9,"nodeType":"1467","messageId":"1468","endLine":137,"endColumn":32},{"ruleId":"1564","severity":1,"message":"1565","line":47,"column":33,"nodeType":"1566","messageId":"1567","endLine":47,"endColumn":35},{"ruleId":"1470","severity":1,"message":"1471","line":66,"column":65,"nodeType":"1472","messageId":"1473","endLine":66,"endColumn":67},{"ruleId":"1470","severity":1,"message":"1471","line":79,"column":35,"nodeType":"1472","messageId":"1473","endLine":79,"endColumn":37},{"ruleId":"1465","severity":1,"message":"1556","line":6,"column":10,"nodeType":"1467","messageId":"1468","endLine":6,"endColumn":16},{"ruleId":"1465","severity":1,"message":"1516","line":10,"column":3,"nodeType":"1467","messageId":"1468","endLine":10,"endColumn":7},{"ruleId":"1465","severity":1,"message":"1517","line":11,"column":3,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":9},{"ruleId":"1465","severity":1,"message":"1518","line":12,"column":3,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":6},{"ruleId":"1465","severity":1,"message":"1519","line":13,"column":3,"nodeType":"1467","messageId":"1468","endLine":13,"endColumn":6},{"ruleId":"1465","severity":1,"message":"1557","line":14,"column":3,"nodeType":"1467","messageId":"1468","endLine":14,"endColumn":8},{"ruleId":"1465","severity":1,"message":"1558","line":15,"column":3,"nodeType":"1467","messageId":"1468","endLine":15,"endColumn":11},{"ruleId":"1465","severity":1,"message":"1559","line":16,"column":3,"nodeType":"1467","messageId":"1468","endLine":16,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1560","line":33,"column":10,"nodeType":"1467","messageId":"1468","endLine":33,"endColumn":32},{"ruleId":"1465","severity":1,"message":"1561","line":35,"column":10,"nodeType":"1467","messageId":"1468","endLine":35,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1562","line":35,"column":22,"nodeType":"1467","messageId":"1468","endLine":35,"endColumn":35},{"ruleId":"1465","severity":1,"message":"1563","line":36,"column":10,"nodeType":"1467","messageId":"1468","endLine":36,"endColumn":21},{"ruleId":"1564","severity":1,"message":"1565","line":61,"column":42,"nodeType":"1566","messageId":"1567","endLine":61,"endColumn":44},{"ruleId":"1470","severity":1,"message":"1471","line":99,"column":64,"nodeType":"1472","messageId":"1473","endLine":99,"endColumn":66},{"ruleId":"1479","severity":1,"message":"1568","line":162,"column":6,"nodeType":"1481","endLine":162,"endColumn":8,"suggestions":"1698"},{"ruleId":"1465","severity":1,"message":"1525","line":164,"column":9,"nodeType":"1467","messageId":"1468","endLine":164,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1526","line":179,"column":9,"nodeType":"1467","messageId":"1468","endLine":179,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1471","line":190,"column":11,"nodeType":"1472","messageId":"1473","endLine":190,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":193,"column":11,"nodeType":"1472","messageId":"1473","endLine":193,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":196,"column":11,"nodeType":"1472","messageId":"1473","endLine":196,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":354,"column":41,"nodeType":"1472","messageId":"1473","endLine":354,"endColumn":43},{"ruleId":"1465","severity":1,"message":"1699","line":5,"column":24,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":39},{"ruleId":"1465","severity":1,"message":"1700","line":8,"column":22,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":35},{"ruleId":"1465","severity":1,"message":"1701","line":11,"column":30,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":51},{"ruleId":"1470","severity":1,"message":"1471","line":45,"column":63,"nodeType":"1472","messageId":"1473","endLine":45,"endColumn":65},{"ruleId":"1470","severity":1,"message":"1471","line":52,"column":63,"nodeType":"1472","messageId":"1473","endLine":52,"endColumn":65},{"ruleId":"1470","severity":1,"message":"1471","line":60,"column":55,"nodeType":"1472","messageId":"1473","endLine":60,"endColumn":57},{"ruleId":"1470","severity":1,"message":"1471","line":112,"column":60,"nodeType":"1472","messageId":"1473","endLine":112,"endColumn":62},{"ruleId":"1470","severity":1,"message":"1471","line":118,"column":60,"nodeType":"1472","messageId":"1473","endLine":118,"endColumn":62},{"ruleId":"1470","severity":1,"message":"1471","line":30,"column":36,"nodeType":"1472","messageId":"1473","endLine":30,"endColumn":38},{"ruleId":"1470","severity":1,"message":"1471","line":58,"column":64,"nodeType":"1472","messageId":"1473","endLine":58,"endColumn":66},{"ruleId":"1465","severity":1,"message":"1655","line":5,"column":10,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":26},{"ruleId":"1465","severity":1,"message":"1592","line":8,"column":10,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":19},{"ruleId":"1465","severity":1,"message":"1656","line":8,"column":21,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":33},{"ruleId":"1465","severity":1,"message":"1657","line":12,"column":10,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1658","line":12,"column":27,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":45},{"ruleId":"1465","severity":1,"message":"1555","line":98,"column":9,"nodeType":"1467","messageId":"1468","endLine":98,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1556","line":5,"column":10,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":16},{"ruleId":"1465","severity":1,"message":"1663","line":6,"column":10,"nodeType":"1467","messageId":"1468","endLine":6,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1516","line":12,"column":3,"nodeType":"1467","messageId":"1468","endLine":12,"endColumn":7},{"ruleId":"1465","severity":1,"message":"1517","line":13,"column":3,"nodeType":"1467","messageId":"1468","endLine":13,"endColumn":9},{"ruleId":"1465","severity":1,"message":"1518","line":14,"column":3,"nodeType":"1467","messageId":"1468","endLine":14,"endColumn":6},{"ruleId":"1465","severity":1,"message":"1519","line":15,"column":3,"nodeType":"1467","messageId":"1468","endLine":15,"endColumn":6},{"ruleId":"1465","severity":1,"message":"1557","line":16,"column":3,"nodeType":"1467","messageId":"1468","endLine":16,"endColumn":8},{"ruleId":"1465","severity":1,"message":"1558","line":17,"column":3,"nodeType":"1467","messageId":"1468","endLine":17,"endColumn":11},{"ruleId":"1465","severity":1,"message":"1559","line":18,"column":3,"nodeType":"1467","messageId":"1468","endLine":18,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1511","line":24,"column":10,"nodeType":"1467","messageId":"1468","endLine":24,"endColumn":34},{"ruleId":"1465","severity":1,"message":"1474","line":27,"column":7,"nodeType":"1467","messageId":"1468","endLine":27,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1560","line":35,"column":10,"nodeType":"1467","messageId":"1468","endLine":35,"endColumn":32},{"ruleId":"1465","severity":1,"message":"1541","line":36,"column":10,"nodeType":"1467","messageId":"1468","endLine":36,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1561","line":37,"column":10,"nodeType":"1467","messageId":"1468","endLine":37,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1562","line":37,"column":22,"nodeType":"1467","messageId":"1468","endLine":37,"endColumn":35},{"ruleId":"1465","severity":1,"message":"1563","line":38,"column":10,"nodeType":"1467","messageId":"1468","endLine":38,"endColumn":21},{"ruleId":"1564","severity":1,"message":"1565","line":63,"column":42,"nodeType":"1566","messageId":"1567","endLine":63,"endColumn":44},{"ruleId":"1470","severity":1,"message":"1471","line":100,"column":64,"nodeType":"1472","messageId":"1473","endLine":100,"endColumn":66},{"ruleId":"1465","severity":1,"message":"1666","line":119,"column":9,"nodeType":"1467","messageId":"1468","endLine":119,"endColumn":20},{"ruleId":"1479","severity":1,"message":"1568","line":163,"column":6,"nodeType":"1481","endLine":163,"endColumn":8,"suggestions":"1702"},{"ruleId":"1465","severity":1,"message":"1525","line":165,"column":9,"nodeType":"1467","messageId":"1468","endLine":165,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1526","line":180,"column":9,"nodeType":"1467","messageId":"1468","endLine":180,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1471","line":191,"column":11,"nodeType":"1472","messageId":"1473","endLine":191,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":194,"column":11,"nodeType":"1472","messageId":"1473","endLine":194,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":197,"column":11,"nodeType":"1472","messageId":"1473","endLine":197,"endColumn":13},{"ruleId":"1465","severity":1,"message":"1671","line":204,"column":9,"nodeType":"1467","messageId":"1468","endLine":204,"endColumn":23},{"ruleId":"1465","severity":1,"message":"1672","line":211,"column":9,"nodeType":"1467","messageId":"1468","endLine":211,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1663","line":11,"column":10,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1521","line":22,"column":10,"nodeType":"1467","messageId":"1468","endLine":22,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1474","line":25,"column":7,"nodeType":"1467","messageId":"1468","endLine":25,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1495","line":33,"column":10,"nodeType":"1467","messageId":"1468","endLine":33,"endColumn":22},{"ruleId":"1465","severity":1,"message":"1541","line":34,"column":10,"nodeType":"1467","messageId":"1468","endLine":34,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1522","line":37,"column":28,"nodeType":"1467","messageId":"1468","endLine":37,"endColumn":47},{"ruleId":"1465","severity":1,"message":"1523","line":39,"column":10,"nodeType":"1467","messageId":"1468","endLine":39,"endColumn":27},{"ruleId":"1465","severity":1,"message":"1664","line":40,"column":10,"nodeType":"1467","messageId":"1468","endLine":40,"endColumn":24},{"ruleId":"1465","severity":1,"message":"1665","line":40,"column":26,"nodeType":"1467","messageId":"1468","endLine":40,"endColumn":43},{"ruleId":"1465","severity":1,"message":"1666","line":120,"column":9,"nodeType":"1467","messageId":"1468","endLine":120,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1524","line":167,"column":9,"nodeType":"1467","messageId":"1468","endLine":167,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1525","line":181,"column":9,"nodeType":"1467","messageId":"1468","endLine":181,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1526","line":193,"column":9,"nodeType":"1467","messageId":"1468","endLine":193,"endColumn":25},{"ruleId":"1465","severity":1,"message":"1527","line":205,"column":9,"nodeType":"1467","messageId":"1468","endLine":205,"endColumn":27},{"ruleId":"1465","severity":1,"message":"1667","line":220,"column":9,"nodeType":"1467","messageId":"1468","endLine":220,"endColumn":32},{"ruleId":"1465","severity":1,"message":"1668","line":224,"column":9,"nodeType":"1467","messageId":"1468","endLine":224,"endColumn":27},{"ruleId":"1479","severity":1,"message":"1528","line":260,"column":6,"nodeType":"1481","endLine":260,"endColumn":15,"suggestions":"1703"},{"ruleId":"1465","severity":1,"message":"1541","line":152,"column":10,"nodeType":"1467","messageId":"1468","endLine":152,"endColumn":17},{"ruleId":"1465","severity":1,"message":"1542","line":153,"column":10,"nodeType":"1467","messageId":"1468","endLine":153,"endColumn":15},{"ruleId":"1465","severity":1,"message":"1676","line":217,"column":9,"nodeType":"1467","messageId":"1468","endLine":217,"endColumn":32},{"ruleId":"1465","severity":1,"message":"1662","line":265,"column":9,"nodeType":"1467","messageId":"1468","endLine":265,"endColumn":18},{"ruleId":"1465","severity":1,"message":"1509","line":17,"column":9,"nodeType":"1467","messageId":"1468","endLine":17,"endColumn":39},{"ruleId":"1465","severity":1,"message":"1510","line":63,"column":9,"nodeType":"1467","messageId":"1468","endLine":63,"endColumn":24},{"ruleId":"1465","severity":1,"message":"1704","line":8,"column":15,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":19},{"ruleId":"1465","severity":1,"message":"1560","line":23,"column":10,"nodeType":"1467","messageId":"1468","endLine":23,"endColumn":32},{"ruleId":"1465","severity":1,"message":"1561","line":25,"column":10,"nodeType":"1467","messageId":"1468","endLine":25,"endColumn":20},{"ruleId":"1465","severity":1,"message":"1562","line":25,"column":22,"nodeType":"1467","messageId":"1468","endLine":25,"endColumn":35},{"ruleId":"1564","severity":1,"message":"1565","line":51,"column":42,"nodeType":"1566","messageId":"1567","endLine":51,"endColumn":44},{"ruleId":"1470","severity":1,"message":"1471","line":89,"column":64,"nodeType":"1472","messageId":"1473","endLine":89,"endColumn":66},{"ruleId":"1479","severity":1,"message":"1568","line":152,"column":6,"nodeType":"1481","endLine":152,"endColumn":8,"suggestions":"1705"},{"ruleId":"1465","severity":1,"message":"1525","line":154,"column":9,"nodeType":"1467","messageId":"1468","endLine":154,"endColumn":21},{"ruleId":"1465","severity":1,"message":"1526","line":169,"column":9,"nodeType":"1467","messageId":"1468","endLine":169,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1471","line":180,"column":11,"nodeType":"1472","messageId":"1473","endLine":180,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":183,"column":11,"nodeType":"1472","messageId":"1473","endLine":183,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":186,"column":11,"nodeType":"1472","messageId":"1473","endLine":186,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1471","line":339,"column":47,"nodeType":"1472","messageId":"1473","endLine":339,"endColumn":49},{"ruleId":"1465","severity":1,"message":"1699","line":5,"column":24,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":39},{"ruleId":"1465","severity":1,"message":"1700","line":8,"column":22,"nodeType":"1467","messageId":"1468","endLine":8,"endColumn":35},{"ruleId":"1465","severity":1,"message":"1701","line":11,"column":30,"nodeType":"1467","messageId":"1468","endLine":11,"endColumn":51},{"ruleId":"1470","severity":1,"message":"1471","line":45,"column":63,"nodeType":"1472","messageId":"1473","endLine":45,"endColumn":65},{"ruleId":"1470","severity":1,"message":"1471","line":52,"column":63,"nodeType":"1472","messageId":"1473","endLine":52,"endColumn":65},{"ruleId":"1470","severity":1,"message":"1471","line":60,"column":55,"nodeType":"1472","messageId":"1473","endLine":60,"endColumn":57},{"ruleId":"1470","severity":1,"message":"1471","line":112,"column":60,"nodeType":"1472","messageId":"1473","endLine":112,"endColumn":62},{"ruleId":"1470","severity":1,"message":"1471","line":118,"column":60,"nodeType":"1472","messageId":"1473","endLine":118,"endColumn":62},{"ruleId":"1479","severity":1,"message":"1496","line":31,"column":3,"nodeType":"1481","endLine":31,"endColumn":5,"suggestions":"1706"},{"ruleId":"1479","severity":1,"message":"1496","line":39,"column":6,"nodeType":"1481","endLine":39,"endColumn":14,"suggestions":"1707"},{"ruleId":"1479","severity":1,"message":"1496","line":31,"column":3,"nodeType":"1481","endLine":31,"endColumn":5,"suggestions":"1708"},{"ruleId":"1479","severity":1,"message":"1496","line":39,"column":6,"nodeType":"1481","endLine":39,"endColumn":14,"suggestions":"1709"},{"ruleId":"1479","severity":1,"message":"1496","line":32,"column":3,"nodeType":"1481","endLine":32,"endColumn":5,"suggestions":"1710"},{"ruleId":"1479","severity":1,"message":"1496","line":40,"column":6,"nodeType":"1481","endLine":40,"endColumn":14,"suggestions":"1711"},{"ruleId":"1479","severity":1,"message":"1496","line":31,"column":3,"nodeType":"1481","endLine":31,"endColumn":5,"suggestions":"1712"},{"ruleId":"1479","severity":1,"message":"1496","line":39,"column":6,"nodeType":"1481","endLine":39,"endColumn":14,"suggestions":"1713"},{"ruleId":"1479","severity":1,"message":"1496","line":28,"column":9,"nodeType":"1481","endLine":28,"endColumn":11,"suggestions":"1714"},{"ruleId":"1479","severity":1,"message":"1496","line":41,"column":10,"nodeType":"1481","endLine":41,"endColumn":18,"suggestions":"1715"},{"ruleId":"1479","severity":1,"message":"1496","line":28,"column":9,"nodeType":"1481","endLine":28,"endColumn":11,"suggestions":"1716"},{"ruleId":"1479","severity":1,"message":"1496","line":41,"column":10,"nodeType":"1481","endLine":41,"endColumn":18,"suggestions":"1717"},{"ruleId":"1479","severity":1,"message":"1496","line":28,"column":9,"nodeType":"1481","endLine":28,"endColumn":11,"suggestions":"1718"},{"ruleId":"1479","severity":1,"message":"1496","line":41,"column":10,"nodeType":"1481","endLine":41,"endColumn":18,"suggestions":"1719"},{"ruleId":"1479","severity":1,"message":"1496","line":28,"column":9,"nodeType":"1481","endLine":28,"endColumn":11,"suggestions":"1720"},{"ruleId":"1479","severity":1,"message":"1496","line":41,"column":10,"nodeType":"1481","endLine":41,"endColumn":18,"suggestions":"1721"},{"ruleId":"1465","severity":1,"message":"1477","line":1,"column":27,"nodeType":"1467","messageId":"1468","endLine":1,"endColumn":36},{"ruleId":"1465","severity":1,"message":"1722","line":1,"column":38,"nodeType":"1467","messageId":"1468","endLine":1,"endColumn":48},{"ruleId":"1465","severity":1,"message":"1537","line":3,"column":18,"nodeType":"1467","messageId":"1468","endLine":3,"endColumn":27},{"ruleId":"1465","severity":1,"message":"1723","line":5,"column":10,"nodeType":"1467","messageId":"1468","endLine":5,"endColumn":32},{"ruleId":"1724","severity":1,"message":"1725","line":48,"column":13,"nodeType":"1533","endLine":48,"endColumn":48},{"ruleId":"1724","severity":1,"message":"1725","line":74,"column":15,"nodeType":"1533","endLine":74,"endColumn":57},"no-native-reassign",["1726"],"no-negated-in-lhs",["1727"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Routes' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'override' is assigned a value but never used.","'setalertMsg' is assigned a value but never used.","'password' is assigned a value but never used.","'useEffect' is defined but never used.","'setPassMatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'stage'. Either include it or remove the dependency array.","ArrayExpression",["1728"],"'response' is assigned a value but never used.","'faUsers' is defined but never used.","'faFileAlt' is defined but never used.","'BsBuildingsFill' is defined but never used.","'FaAddressBook' is defined but never used.","'MdDashboard' is defined but never used.","'MdMenuOpen' is defined but never used.","'MdHolidayVillage' is defined but never used.","'BrowserRouter' is defined but never used.","'InnerDashContainer' is defined but never used.","'React' is defined but never used.","'FaUserCircle' is defined but never used.","'employeeData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadEmployeeData'. Either include it or remove the dependency array.",["1729"],"React Hook useEffect has missing dependencies: 'email', 'loadEmployeeData', and 'location'. Either include them or remove the dependency array.",["1730"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'FaCalendarCheck' is defined but never used.","'MdTaskAlt' is defined but never used.","'TbDeviceIpadMinus' is defined but never used.","'FcLeave' is defined but never used.","'DashContainer' is defined but never used.","'handleLeaveApplicationHRSubmit' is assigned a value but never used.","'handleFormClose' is assigned a value but never used.","'BsFillFileEarmarkPdfFill' is defined but never used.","'FaRegEdit' is defined but never used.","'MdDeleteForever' is defined but never used.","'SiMinutemailer' is defined but never used.","'TbPhoneCalling' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'Link' is defined but never used.","'FiSearch' is defined but never used.","'setIsIdFilterActive' is assigned a value but never used.","'upcomingBirthdays' is assigned a value but never used.","'renderInfoButton' is assigned a value but never used.","'renderButton' is assigned a value but never used.","'renderEditButton' is assigned a value but never used.","'getBackgroundColor' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'calculateUpcomingBirthdays'. Either include it or remove the dependency array.",["1731"],"'allCount' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"1732","text":"1733"},{"range":"1734","text":"1733"},"'Container' is defined but never used.","'endDateError' is assigned a value but never used.","'id' is assigned a value but never used.","'PiInfoFill' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'isCanceling' is assigned a value but never used.","'askStatus' is assigned a value but never used.","'selectedEmployee' is assigned a value but never used.","'attencenceID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setEmployees'. Either include it or remove the dependency array.",["1735"],"React Hook useEffect has a missing dependency: 'props.data'. Either include it or remove the dependency array.",["1736"],"'handleUserChange' is assigned a value but never used.","'FaCheck' is defined but never used.","'isCompleting' is assigned a value but never used.","'setIsCompleting' is assigned a value but never used.","'getTotalHolidays' is assigned a value but never used.","'faPlus' is defined but never used.","'Table' is defined but never used.","'Dropdown' is defined but never used.","'DropdownButton' is defined but never used.","'leaveApplicationHRData' is assigned a value but never used.","'searchData' is assigned a value but never used.","'setSearchData' is assigned a value but never used.","'totalLeaves' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'loadLeaveApplicationHRData'. Either include it or remove the dependency array.",["1737"],["1738"],"'HolidayList' is defined but never used.","'TodatAttendance' is defined but never used.","'Today' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'email' is assigned a value but never used.","'setOriginalEmployeeData' is assigned a value but never used.","'rowIndex' is assigned a value but never used.","'setRowIndex' is assigned a value but never used.","'moreInfo' is assigned a value but never used.","'setMoreInfo' is assigned a value but never used.","'taskDepartment' is assigned a value but never used.",["1739"],["1740"],"'LeaveApplicationEmpTable' is defined but never used.","'DepartmentChart' is defined but never used.","'Chart' is defined but never used.","'IoIosArrowDroprightCircle' is defined but never used.","'totalEmployeeLeave' is assigned a value but never used.","'updateTotalEmployeeLeave' is assigned a value but never used.","'FaCircleInfo' is defined but never used.","'employees' is assigned a value but never used.","'hoveredDate' is assigned a value but never used.","'isInfoHovering' is assigned a value but never used.","'handleInfoMouseEnter' is assigned a value but never used.","'handleInfoMouseLeave' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchEmployees'. Either include it or remove the dependency array.",["1741"],"React Hook useEffect has a missing dependency: 'handleFetchAttendance'. Either include it or remove the dependency array.",["1742"],"'searchInput' is assigned a value but never used.","'setSearchInput' is assigned a value but never used.","'isIdFilterActive' is assigned a value but never used.","'isIdSortAscending' is assigned a value but never used.","'setIsIdSortAscending' is assigned a value but never used.",["1743"],"'setLoading' is assigned a value but never used.","'setError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateChartOptions'. Either include it or remove the dependency array.",["1744"],"React Hook useEffect has missing dependencies: 'props.data' and 'setEmployees'. Either include them or remove the dependency array.",["1745"],["1746"],["1747"],["1748"],"'IoCheckmarkDoneSharp' is defined but never used.","'MdCancel' is defined but never used.","'BsFiletypeDoc' is defined but never used.","'isAccepted' is assigned a value but never used.","'isRejected' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["1749"],"'AcceptTask' is assigned a value but never used.","'RejectTask' is assigned a value but never used.","'completeTask' is assigned a value but never used.","'MdMarkChatRead' is defined but never used.","'isHovered' is assigned a value but never used.","'setIsHovered' is assigned a value but never used.","'taskId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["1750"],["1751"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd",["1752"],"'useRef' is defined but never used.","'axios' is defined but never used.","'leaveApplicationEmpData' is assigned a value but never used.","'userId' is assigned a value but never used.","'onLeaveApplicationEmpDelete' is assigned a value but never used.","'onEdit' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadLeaveApplicationEmpData'. Either include it or remove the dependency array.",["1753"],"'Router' is defined but never used.","'Route' is defined but never used.",["1754"],["1755"],"'onFirstNameDataChange' is assigned a value but never used.","'onMiddleNameDataChange' is assigned a value but never used.","'onLastNameDataChange' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadPersonalInfoData'. Either include it or remove the dependency array.",["1756"],"'onPersonalInfoDelete' is assigned a value but never used.",{"range":"1757","text":"1733"},"'MdOutlineRefresh' is defined but never used.","'setEmployees' is assigned a value but never used.","'isButtonClicked' is assigned a value but never used.","'setIsButtonClicked' is assigned a value but never used.","'toggleListVisibility' is assigned a value but never used.",["1758"],["1759"],"'chartData' is assigned a value but never used.","'RingLoader' is defined but never used.","'selectedFilter' is assigned a value but never used.","'setSelectedFilter' is assigned a value but never used.","'exportToPDF' is assigned a value but never used.","'handleSearchInputChange' is assigned a value but never used.","'handleToggleIdSort' is assigned a value but never used.",["1760"],["1761"],"'renderSortIcon' is assigned a value but never used.","'sortData' is assigned a value but never used.",["1762"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","'countLateAndOnTimeTasks' is assigned a value but never used.",["1763"],["1764"],["1765"],"'familyInfoData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadFamilyInfoData'. Either include it or remove the dependency array.",["1766"],"'workExperienceData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadWorkExperienceData'. Either include it or remove the dependency array.",["1767"],"'AgGridReact' is defined but never used.","'profile' is assigned a value but never used.","'employeeCodeData' is assigned a value but never used.","'onEmployeeCodeDataChange' is assigned a value but never used.","'onProfileDataChange' is assigned a value but never used.","'onFormSubmit' is assigned a value but never used.","'css' is defined but never used.",["1768"],["1769"],"'lateCompletedTasksCount' is assigned a value but never used.",["1770"],["1771"],["1772"],"'setFromDateData' is assigned a value but never used.","'setToDateData' is assigned a value but never used.","'setReasonforleaveData' is assigned a value but never used.",["1773"],["1774"],"'uuid' is defined but never used.",["1775"],["1776"],["1777"],["1778"],["1779"],["1780"],["1781"],["1782"],["1783"],["1784"],["1785"],["1786"],["1787"],["1788"],["1789"],["1790"],["1791"],"'useContext' is defined but never used.","'PiDotsThreeOutlineFill' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation",{"desc":"1792","fix":"1793"},{"desc":"1794","fix":"1795"},{"desc":"1796","fix":"1797"},{"desc":"1798","fix":"1799"},[16706,16706]," rel=\"noreferrer\"",[17149,17149],{"desc":"1800","fix":"1801"},{"desc":"1802","fix":"1803"},{"desc":"1804","fix":"1805"},{"desc":"1804","fix":"1806"},{"desc":"1800","fix":"1807"},{"desc":"1802","fix":"1808"},{"desc":"1809","fix":"1810"},{"desc":"1811","fix":"1812"},{"desc":"1798","fix":"1813"},{"desc":"1814","fix":"1815"},{"desc":"1816","fix":"1817"},{"desc":"1802","fix":"1818"},{"desc":"1809","fix":"1819"},{"desc":"1820","fix":"1821"},{"desc":"1822","fix":"1823"},{"desc":"1824","fix":"1825"},{"desc":"1822","fix":"1826"},{"desc":"1800","fix":"1827"},{"desc":"1828","fix":"1829"},{"desc":"1794","fix":"1830"},{"desc":"1831","fix":"1832"},{"desc":"1833","fix":"1834"},[28372,28372],{"desc":"1798","fix":"1835"},{"desc":"1814","fix":"1836"},{"desc":"1798","fix":"1837"},{"desc":"1804","fix":"1838"},{"desc":"1802","fix":"1839"},{"desc":"1814","fix":"1840"},{"desc":"1804","fix":"1841"},{"desc":"1798","fix":"1842"},{"desc":"1843","fix":"1844"},{"desc":"1845","fix":"1846"},{"desc":"1824","fix":"1847"},{"desc":"1822","fix":"1848"},{"desc":"1824","fix":"1849"},{"desc":"1822","fix":"1850"},{"desc":"1804","fix":"1851"},{"desc":"1804","fix":"1852"},{"desc":"1798","fix":"1853"},{"desc":"1804","fix":"1854"},{"desc":"1794","fix":"1855"},{"desc":"1856","fix":"1857"},{"desc":"1794","fix":"1858"},{"desc":"1856","fix":"1859"},{"desc":"1794","fix":"1860"},{"desc":"1856","fix":"1861"},{"desc":"1794","fix":"1862"},{"desc":"1856","fix":"1863"},{"desc":"1794","fix":"1864"},{"desc":"1856","fix":"1865"},{"desc":"1794","fix":"1866"},{"desc":"1856","fix":"1867"},{"desc":"1794","fix":"1868"},{"desc":"1856","fix":"1869"},{"desc":"1794","fix":"1870"},{"desc":"1856","fix":"1871"},"Update the dependencies array to be: [countDown, stage]",{"range":"1872","text":"1873"},"Update the dependencies array to be: [loadEmployeeData]",{"range":"1874","text":"1875"},"Update the dependencies array to be: [email, loadEmployeeData, location, socket]",{"range":"1876","text":"1877"},"Update the dependencies array to be: [calculateUpcomingBirthdays, rowData]",{"range":"1878","text":"1879"},"Update the dependencies array to be: [setEmployees]",{"range":"1880","text":"1881"},"Update the dependencies array to be: [props.data]",{"range":"1882","text":"1883"},"Update the dependencies array to be: [loadLeaveApplicationHRData]",{"range":"1884","text":"1885"},{"range":"1886","text":"1885"},{"range":"1887","text":"1881"},{"range":"1888","text":"1883"},"Update the dependencies array to be: [fetchEmployees]",{"range":"1889","text":"1890"},"Update the dependencies array to be: [selectedYear, selectedMonth, handleFetchAttendance]",{"range":"1891","text":"1892"},{"range":"1893","text":"1879"},"Update the dependencies array to be: [departmentData, updateChartOptions]",{"range":"1894","text":"1895"},"Update the dependencies array to be: [props.data, setEmployees]",{"range":"1896","text":"1897"},{"range":"1898","text":"1883"},{"range":"1899","text":"1890"},"Update the dependencies array to be: [handleFetchAttendance]",{"range":"1900","text":"1901"},"Update the dependencies array to be: [fetchData]",{"range":"1902","text":"1903"},"Update the dependencies array to be: [id]",{"range":"1904","text":"1905"},{"range":"1906","text":"1903"},{"range":"1907","text":"1881"},"Update the dependencies array to be: [loadLeaveApplicationEmpData]",{"range":"1908","text":"1909"},{"range":"1910","text":"1875"},"Update the dependencies array to be: [loadLeaveApplicationEmpData, props.leaveRequestDone]",{"range":"1911","text":"1912"},"Update the dependencies array to be: [loadPersonalInfoData, props.data]",{"range":"1913","text":"1914"},{"range":"1915","text":"1879"},{"range":"1916","text":"1895"},{"range":"1917","text":"1879"},{"range":"1918","text":"1885"},{"range":"1919","text":"1883"},{"range":"1920","text":"1895"},{"range":"1921","text":"1885"},{"range":"1922","text":"1879"},"Update the dependencies array to be: [loadFamilyInfoData]",{"range":"1923","text":"1924"},"Update the dependencies array to be: [loadWorkExperienceData]",{"range":"1925","text":"1926"},{"range":"1927","text":"1905"},{"range":"1928","text":"1903"},{"range":"1929","text":"1905"},{"range":"1930","text":"1903"},{"range":"1931","text":"1885"},{"range":"1932","text":"1885"},{"range":"1933","text":"1879"},{"range":"1934","text":"1885"},{"range":"1935","text":"1875"},"Update the dependencies array to be: [loadEmployeeData, socket]",{"range":"1936","text":"1937"},{"range":"1938","text":"1875"},{"range":"1939","text":"1937"},{"range":"1940","text":"1875"},{"range":"1941","text":"1937"},{"range":"1942","text":"1875"},{"range":"1943","text":"1937"},{"range":"1944","text":"1875"},{"range":"1945","text":"1937"},{"range":"1946","text":"1875"},{"range":"1947","text":"1937"},{"range":"1948","text":"1875"},{"range":"1949","text":"1937"},{"range":"1950","text":"1875"},{"range":"1951","text":"1937"},[1304,1315],"[countDown, stage]",[1887,1889],"[loadEmployeeData]",[5731,5739],"[email, loadEmployeeData, location, socket]",[7511,7520],"[calculateUpcomingBirthdays, rowData]",[1350,1352],"[setEmployees]",[1944,1946],"[props.data]",[4266,4268],"[loadLeaveApplicationHRData]",[4266,4268],[8237,8239],[8831,8833],[1021,1023],"[fetchEmployees]",[2133,2162],"[selectedYear, selectedMonth, handleFetchAttendance]",[3251,3260],[9018,9034],"[departmentData, updateChartOptions]",[1299,1301],"[props.data, setEmployees]",[1871,1873],[1075,1077],[2839,2841],"[handleFetchAttendance]",[2038,2040],"[fetchData]",[1333,1335],"[id]",[2582,2584],[8239,8241],[2857,2859],"[loadLeaveApplicationEmpData]",[848,850],[2827,2851],"[loadLeaveApplicationEmpData, props.leaveRequestDone]",[3359,3371],"[loadPersonalInfoData, props.data]",[3221,3230],[2107,2123],[7157,7166],[4574,4576],[7937,7956],[2107,2123],[4574,4576],[7157,7166],[9432,9434],"[loadFamilyInfoData]",[7794,7796],"[loadWorkExperienceData]",[956,958],[2246,2248],[1065,1067],[2229,2231],[4348,4350],[4574,4576],[7157,7166],[4321,4323],[1047,1049],[1203,1211],"[loadEmployeeData, socket]",[1047,1049],[1203,1211],[1049,1051],[1205,1213],[1047,1049],[1203,1211],[917,919],[1276,1284],[917,919],[1276,1284],[930,932],[1289,1297],[917,919],[1276,1284]]